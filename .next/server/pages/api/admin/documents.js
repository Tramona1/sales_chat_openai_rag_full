"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/admin/documents";
exports.ids = ["pages/api/admin/documents"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fadmin%2Fdocuments&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fadmin%2Fdocuments.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fadmin%2Fdocuments&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fadmin%2Fdocuments.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_admin_documents_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/admin/documents.ts */ \"(api)/./pages/api/admin/documents.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_admin_documents_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_admin_documents_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_admin_documents_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_admin_documents_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/admin/documents\",\n        pathname: \"/api/admin/documents\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_admin_documents_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFkbWluJTJGZG9jdW1lbnRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZhZG1pbiUyRmRvY3VtZW50cy50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUMyRDtBQUMzRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsMERBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDBEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbGVzLWNoYXQtb3BlbmFpLXJhZy8/NWYwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2FkbWluL2RvY3VtZW50cy50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FkbWluL2RvY3VtZW50c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FkbWluL2RvY3VtZW50c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fadmin%2Fdocuments&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fadmin%2Fdocuments.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/admin/documents.ts":
/*!**************************************!*\
  !*** ./pages/api/admin/documents.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_errorHandling__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/errorHandling */ \"(api)/./utils/errorHandling.ts\");\n/* harmony import */ var _utils_vectorStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/vectorStore */ \"(api)/./utils/vectorStore.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_errorHandling__WEBPACK_IMPORTED_MODULE_0__]);\n_utils_errorHandling__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nasync function handler(req, res) {\n    // Only allow GET requests\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: {\n                message: \"Method Not Allowed\",\n                code: \"method_not_allowed\"\n            }\n        });\n    }\n    try {\n        // Get the limit parameter (default to 100)\n        const limit = req.query.limit ? parseInt(req.query.limit, 10) : 100;\n        // Get documents from vector store\n        console.log(\"Fetching vector store items...\");\n        const vectorStoreItems = (0,_utils_vectorStore__WEBPACK_IMPORTED_MODULE_1__.getAllVectorStoreItems)();\n        console.log(`Retrieved ${vectorStoreItems.length} vector store items`);\n        // Transform items to the format expected by the UI\n        console.log(`Processing up to ${limit} items for UI display`);\n        const documents = vectorStoreItems.slice(0, limit).map((item)=>({\n                id: item.metadata?.source || `doc-${Math.random().toString(36).substring(7)}`,\n                source: item.metadata?.source || \"Unknown Source\",\n                text: item.text || \"\",\n                metadata: {\n                    ...item.metadata,\n                    // Ensure source is always available\n                    source: item.metadata?.source || \"Unknown Source\"\n                }\n            }));\n        console.log(`Returning ${documents.length} documents to client`);\n        // Return the documents\n        return res.status(200).json({\n            documents,\n            total: vectorStoreItems.length,\n            limit\n        });\n    } catch (error) {\n        console.error(\"Error fetching documents:\", error);\n        const errorResponse = (0,_utils_errorHandling__WEBPACK_IMPORTED_MODULE_0__.standardizeApiErrorResponse)(error);\n        return res.status(500).json(errorResponse);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYWRtaW4vZG9jdW1lbnRzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUMyRTtBQUNVO0FBRXRFLGVBQWVFLFFBQVFDLEdBQW1CLEVBQUVDLEdBQW9CO0lBQzdFLDBCQUEwQjtJQUMxQixJQUFJRCxJQUFJRSxNQUFNLEtBQUssT0FBTztRQUN4QixPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLE9BQU87Z0JBQUVDLFNBQVM7Z0JBQXNCQyxNQUFNO1lBQXFCO1FBQUU7SUFDckc7SUFFQSxJQUFJO1FBQ0YsMkNBQTJDO1FBQzNDLE1BQU1DLFFBQVFSLElBQUlTLEtBQUssQ0FBQ0QsS0FBSyxHQUFHRSxTQUFTVixJQUFJUyxLQUFLLENBQUNELEtBQUssRUFBWSxNQUFNO1FBRTFFLGtDQUFrQztRQUNsQ0csUUFBUUMsR0FBRyxDQUFDO1FBQ1osTUFBTUMsbUJBQW1CZiwwRUFBc0JBO1FBQy9DYSxRQUFRQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUVDLGlCQUFpQkMsTUFBTSxDQUFDLG1CQUFtQixDQUFDO1FBRXJFLG1EQUFtRDtRQUNuREgsUUFBUUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUVKLE1BQU0scUJBQXFCLENBQUM7UUFDNUQsTUFBTU8sWUFBWUYsaUJBQWlCRyxLQUFLLENBQUMsR0FBR1IsT0FBT1MsR0FBRyxDQUFDLENBQUNDLE9BQTJCO2dCQUNqRkMsSUFBSUQsS0FBS0UsUUFBUSxFQUFFQyxVQUFVLENBQUMsSUFBSSxFQUFFQyxLQUFLQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxTQUFTLENBQUMsR0FBRyxDQUFDO2dCQUM3RUosUUFBUUgsS0FBS0UsUUFBUSxFQUFFQyxVQUFVO2dCQUNqQ0ssTUFBTVIsS0FBS1EsSUFBSSxJQUFJO2dCQUNuQk4sVUFBVTtvQkFDUixHQUFHRixLQUFLRSxRQUFRO29CQUNoQixvQ0FBb0M7b0JBQ3BDQyxRQUFRSCxLQUFLRSxRQUFRLEVBQUVDLFVBQVU7Z0JBQ25DO1lBQ0Y7UUFFQVYsUUFBUUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFRyxVQUFVRCxNQUFNLENBQUMsb0JBQW9CLENBQUM7UUFFL0QsdUJBQXVCO1FBQ3ZCLE9BQU9iLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDMUJXO1lBQ0FZLE9BQU9kLGlCQUFpQkMsTUFBTTtZQUM5Qk47UUFDRjtJQUNGLEVBQUUsT0FBT0gsT0FBTztRQUNkTSxRQUFRTixLQUFLLENBQUMsNkJBQTZCQTtRQUMzQyxNQUFNdUIsZ0JBQWdCL0IsaUZBQTJCQSxDQUFDUTtRQUNsRCxPQUFPSixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDd0I7SUFDOUI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbGVzLWNoYXQtb3BlbmFpLXJhZy8uL3BhZ2VzL2FwaS9hZG1pbi9kb2N1bWVudHMudHM/ZDFjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgeyBzdGFuZGFyZGl6ZUFwaUVycm9yUmVzcG9uc2UgfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvckhhbmRsaW5nJztcbmltcG9ydCB7IGdldEFsbFZlY3RvclN0b3JlSXRlbXMsIFZlY3RvclN0b3JlSXRlbSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3ZlY3RvclN0b3JlJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkge1xuICAvLyBPbmx5IGFsbG93IEdFVCByZXF1ZXN0c1xuICBpZiAocmVxLm1ldGhvZCAhPT0gJ0dFVCcpIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBlcnJvcjogeyBtZXNzYWdlOiAnTWV0aG9kIE5vdCBBbGxvd2VkJywgY29kZTogJ21ldGhvZF9ub3RfYWxsb3dlZCcgfSB9KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gR2V0IHRoZSBsaW1pdCBwYXJhbWV0ZXIgKGRlZmF1bHQgdG8gMTAwKVxuICAgIGNvbnN0IGxpbWl0ID0gcmVxLnF1ZXJ5LmxpbWl0ID8gcGFyc2VJbnQocmVxLnF1ZXJ5LmxpbWl0IGFzIHN0cmluZywgMTApIDogMTAwO1xuICAgIFxuICAgIC8vIEdldCBkb2N1bWVudHMgZnJvbSB2ZWN0b3Igc3RvcmVcbiAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgdmVjdG9yIHN0b3JlIGl0ZW1zLi4uJyk7XG4gICAgY29uc3QgdmVjdG9yU3RvcmVJdGVtcyA9IGdldEFsbFZlY3RvclN0b3JlSXRlbXMoKTtcbiAgICBjb25zb2xlLmxvZyhgUmV0cmlldmVkICR7dmVjdG9yU3RvcmVJdGVtcy5sZW5ndGh9IHZlY3RvciBzdG9yZSBpdGVtc2ApO1xuICAgIFxuICAgIC8vIFRyYW5zZm9ybSBpdGVtcyB0byB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IHRoZSBVSVxuICAgIGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIHVwIHRvICR7bGltaXR9IGl0ZW1zIGZvciBVSSBkaXNwbGF5YCk7XG4gICAgY29uc3QgZG9jdW1lbnRzID0gdmVjdG9yU3RvcmVJdGVtcy5zbGljZSgwLCBsaW1pdCkubWFwKChpdGVtOiBWZWN0b3JTdG9yZUl0ZW0pID0+ICh7XG4gICAgICBpZDogaXRlbS5tZXRhZGF0YT8uc291cmNlIHx8IGBkb2MtJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNyl9YCxcbiAgICAgIHNvdXJjZTogaXRlbS5tZXRhZGF0YT8uc291cmNlIHx8ICdVbmtub3duIFNvdXJjZScsXG4gICAgICB0ZXh0OiBpdGVtLnRleHQgfHwgJycsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICAuLi5pdGVtLm1ldGFkYXRhLFxuICAgICAgICAvLyBFbnN1cmUgc291cmNlIGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICAgICAgc291cmNlOiBpdGVtLm1ldGFkYXRhPy5zb3VyY2UgfHwgJ1Vua25vd24gU291cmNlJyxcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYFJldHVybmluZyAke2RvY3VtZW50cy5sZW5ndGh9IGRvY3VtZW50cyB0byBjbGllbnRgKTtcbiAgICBcbiAgICAvLyBSZXR1cm4gdGhlIGRvY3VtZW50c1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBkb2N1bWVudHMsXG4gICAgICB0b3RhbDogdmVjdG9yU3RvcmVJdGVtcy5sZW5ndGgsXG4gICAgICBsaW1pdFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGRvY3VtZW50czonLCBlcnJvcik7XG4gICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IHN0YW5kYXJkaXplQXBpRXJyb3JSZXNwb25zZShlcnJvcik7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKGVycm9yUmVzcG9uc2UpO1xuICB9XG59ICJdLCJuYW1lcyI6WyJzdGFuZGFyZGl6ZUFwaUVycm9yUmVzcG9uc2UiLCJnZXRBbGxWZWN0b3JTdG9yZUl0ZW1zIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwibGltaXQiLCJxdWVyeSIsInBhcnNlSW50IiwiY29uc29sZSIsImxvZyIsInZlY3RvclN0b3JlSXRlbXMiLCJsZW5ndGgiLCJkb2N1bWVudHMiLCJzbGljZSIsIm1hcCIsIml0ZW0iLCJpZCIsIm1ldGFkYXRhIiwic291cmNlIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwidGV4dCIsInRvdGFsIiwiZXJyb3JSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/admin/documents.ts\n");

/***/ }),

/***/ "(api)/./utils/errorHandling.ts":
/*!********************************!*\
  !*** ./utils/errorHandling.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIModelError: () => (/* binding */ AIModelError),\n/* harmony export */   DocumentProcessingError: () => (/* binding */ DocumentProcessingError),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   QueryProcessingError: () => (/* binding */ QueryProcessingError),\n/* harmony export */   VectorStoreError: () => (/* binding */ VectorStoreError),\n/* harmony export */   createError: () => (/* binding */ createError),\n/* harmony export */   createFallbackResponse: () => (/* binding */ createFallbackResponse),\n/* harmony export */   formatValidationError: () => (/* binding */ formatValidationError),\n/* harmony export */   handleError: () => (/* binding */ handleError),\n/* harmony export */   handleOpenAIError: () => (/* binding */ handleOpenAIError),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   safeExecute: () => (/* binding */ safeExecute),\n/* harmony export */   standardizeApiErrorResponse: () => (/* binding */ standardizeApiErrorResponse)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__]);\nopenai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Custom error classes for better error identification\nclass DocumentProcessingError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"DocumentProcessingError\";\n    }\n}\nclass AIModelError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"AIModelError\";\n    }\n}\nclass VectorStoreError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"VectorStoreError\";\n    }\n}\nclass NetworkError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"NetworkError\";\n    }\n}\nclass QueryProcessingError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"QueryProcessingError\";\n    }\n}\n// Error handler for OpenAI API errors\nfunction handleOpenAIError(error) {\n    if (error instanceof openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI.APIError) {\n        if (error.status === 400) {\n            return new AIModelError(`Invalid request to OpenAI: ${error.message}`, error);\n        } else if (error.status === 401) {\n            return new AIModelError(\"Authentication error with OpenAI API. Check your API key.\", error);\n        } else if (error.status === 429) {\n            return new AIModelError(\"Rate limit exceeded with OpenAI API. Please try again later.\", error);\n        } else if (error.status >= 500) {\n            return new AIModelError(\"OpenAI service is currently unavailable. Please try again later.\", error);\n        }\n    }\n    return new AIModelError(`Unexpected error with OpenAI: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error : undefined);\n}\n// General purpose error handler\nfunction handleError(error, context) {\n    // Log the error for debugging\n    console.error(`Error in ${context}:`, error);\n    // Specific handling based on error type\n    if (error instanceof openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI.APIError) {\n        return handleOpenAIError(error);\n    }\n    if (error instanceof DocumentProcessingError || error instanceof AIModelError || error instanceof VectorStoreError || error instanceof NetworkError || error instanceof QueryProcessingError) {\n        return error; // Already a custom error, return as is\n    }\n    // Generic error handling\n    const message = error instanceof Error ? error.message : String(error);\n    return new Error(`Error in ${context}: ${message}`);\n}\n// Helper for fallback response creation\nfunction createFallbackResponse(defaultValue) {\n    return defaultValue;\n}\n// Type-safe try/catch wrapper for async functions\nasync function safeExecute(operation, context, fallback) {\n    try {\n        return await operation();\n    } catch (error) {\n        handleError(error, context);\n        return fallback;\n    }\n}\n/**\n * Standardize error responses for API endpoints\n * This ensures consistent error formatting across the application\n */ function standardizeApiErrorResponse(error) {\n    console.error(\"Error details:\", error);\n    // Handle OpenAI API errors\n    if (error.name === \"OpenAIError\" || error.response && error.response.headers && error.response.headers.get(\"x-request-id\")) {\n        return {\n            error: {\n                message: \"Error processing your request with the language model\",\n                code: \"OPENAI_API_ERROR\",\n                details:  true ? {\n                    message: error.message,\n                    type: error.type,\n                    statusCode: error.status || error.statusCode\n                } : 0\n            }\n        };\n    }\n    // Handle vector store errors\n    if (error.message && error.message.includes(\"vector store\")) {\n        return {\n            error: {\n                message: \"Error retrieving information from knowledge base\",\n                code: \"VECTOR_STORE_ERROR\",\n                details:  true ? {\n                    message: error.message\n                } : 0\n            }\n        };\n    }\n    // Handle timeout errors\n    if (error.name === \"AbortError\" || error.code === \"ETIMEDOUT\" || error.message?.includes(\"timeout\")) {\n        return {\n            error: {\n                message: \"Request timed out. Please try again.\",\n                code: \"TIMEOUT_ERROR\",\n                details:  true ? {\n                    message: error.message\n                } : 0\n            }\n        };\n    }\n    // Default error response\n    return {\n        error: {\n            message: \"An unexpected error occurred\",\n            code: \"INTERNAL_SERVER_ERROR\",\n            details:  true ? {\n                message: error.message || \"Unknown error\"\n            } : 0\n        }\n    };\n}\n/**\n * Format validation errors consistently\n */ function formatValidationError(message, fieldErrors) {\n    return {\n        error: {\n            message: message || \"Validation error\",\n            code: \"VALIDATION_ERROR\",\n            details: fieldErrors\n        }\n    };\n}\n/**\n * Log error with standardized format for easier debugging\n */ function logError(error, context) {\n    const timestamp = new Date().toISOString();\n    const contextInfo = context ? `[${context}] ` : \"\";\n    console.error(`${timestamp} ${contextInfo}Error: ${error.message}`);\n    if (error.stack && \"development\" !== \"production\") {\n        console.error(`Stack trace: ${error.stack}`);\n    }\n    // Log additional details if available\n    if (error.response) {\n        console.error(\"Response data:\", error.response.data);\n        console.error(\"Response status:\", error.response.status);\n    }\n}\n/**\n * Create a simple error with additional context\n */ function createError(message, code, additionalDetails) {\n    const error = new Error(message);\n    if (code) error.code = code;\n    if (additionalDetails) error.details = additionalDetails;\n    return error;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/errorHandling.ts\n");

/***/ }),

/***/ "(api)/./utils/vectorStore.ts":
/*!******************************!*\
  !*** ./utils/vectorStore.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToVectorStore: () => (/* binding */ addToVectorStore),\n/* harmony export */   clearVectorStore: () => (/* binding */ clearVectorStore),\n/* harmony export */   cosineSimilarity: () => (/* binding */ cosineSimilarity),\n/* harmony export */   getAllVectorStoreItems: () => (/* binding */ getAllVectorStoreItems),\n/* harmony export */   getSimilarItems: () => (/* binding */ getSimilarItems),\n/* harmony export */   getVectorStoreSize: () => (/* binding */ getVectorStoreSize),\n/* harmony export */   vectorStore: () => (/* binding */ vectorStore)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Constants for batch processing\nconst VECTOR_STORE_DIR = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"vector_batches\");\nconst BATCH_INDEX_FILE = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"batch_index.json\");\nconst MAX_BATCH_SIZE = 1000; // Maximum items per batch file\n// In-memory vector store (now loads from multiple files)\nlet vectorStore = [];\nlet activeBatches = [];\n// Initialize vector store directory\nfunction initVectorStore() {\n    // Ensure data directory exists\n    const dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\");\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dataDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dataDir, {\n            recursive: true\n        });\n    }\n    // Ensure vector_batches directory exists\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(VECTOR_STORE_DIR)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(VECTOR_STORE_DIR, {\n            recursive: true\n        });\n    }\n    // Create batch index if it doesn't exist\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(BATCH_INDEX_FILE)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(BATCH_INDEX_FILE, JSON.stringify({\n            activeBatches: [],\n            lastUpdated: Date.now()\n        }));\n    }\n}\n// Load vector store index and all active batches\nfunction loadVectorStore() {\n    try {\n        initVectorStore();\n        console.log(\"Loading vector store batches...\");\n        // Read the batch index\n        const indexData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(BATCH_INDEX_FILE, \"utf-8\"));\n        activeBatches = indexData.activeBatches || [];\n        // Load each active batch\n        vectorStore = [];\n        let totalLoaded = 0;\n        for (const batchId of activeBatches){\n            const batchFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(VECTOR_STORE_DIR, `batch_${batchId}.json`);\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(batchFile)) {\n                try {\n                    const batchData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(batchFile, \"utf-8\"));\n                    vectorStore = [\n                        ...vectorStore,\n                        ...batchData\n                    ];\n                    totalLoaded += batchData.length;\n                    console.log(`Loaded batch ${batchId} with ${batchData.length} items`);\n                } catch (error) {\n                    console.error(`Error loading batch ${batchId}:`, error);\n                }\n            }\n        }\n        // If no batches were loaded, try loading from single vectorStore.json file as fallback\n        if (totalLoaded === 0) {\n            const singleStoreFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"vectorStore.json\");\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(singleStoreFile)) {\n                try {\n                    const fileData = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(singleStoreFile, \"utf8\");\n                    const parsedData = JSON.parse(fileData);\n                    // Handle both formats: array of items or {items: [...]} structure\n                    if (Array.isArray(parsedData)) {\n                        vectorStore = parsedData;\n                        totalLoaded = parsedData.length;\n                    } else if (parsedData.items && Array.isArray(parsedData.items)) {\n                        vectorStore = parsedData.items;\n                        totalLoaded = parsedData.items.length;\n                    }\n                    console.log(`Loaded ${totalLoaded} items from single vectorStore.json file`);\n                } catch (error) {\n                    console.error(\"Error loading from single vectorStore.json file:\", error);\n                }\n            }\n        }\n        console.log(`Loaded ${totalLoaded} total items from ${activeBatches.length} batches and fallback sources`);\n    } catch (error) {\n        console.error(\"Error loading vector store:\", error);\n        vectorStore = [];\n        activeBatches = [];\n    }\n}\n// Create a new batch and add it to the index\nfunction createNewBatch() {\n    const batchId = Date.now().toString();\n    activeBatches.push(batchId);\n    // Update the batch index\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(BATCH_INDEX_FILE, JSON.stringify({\n        activeBatches,\n        lastUpdated: Date.now()\n    }, null, 2));\n    console.log(`Created new batch: ${batchId}`);\n    return batchId;\n}\n// Save a specific batch to disk\nfunction saveBatch(batchId, items) {\n    const batchFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(VECTOR_STORE_DIR, `batch_${batchId}.json`);\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(batchFile, JSON.stringify(items, null, 2));\n    console.log(`Saved batch ${batchId} with ${items.length} items`);\n}\n// Save the current state of all batches\nfunction saveVectorStore() {\n    try {\n        if (activeBatches.length === 0 && vectorStore.length > 0) {\n            // First-time save - create initial batch\n            const initialBatchId = createNewBatch();\n            // Add batch metadata to all items\n            vectorStore = vectorStore.map((item)=>({\n                    ...item,\n                    metadata: {\n                        ...item.metadata,\n                        batch: initialBatchId\n                    }\n                }));\n            // Save as first batch\n            saveBatch(initialBatchId, vectorStore);\n        } else {\n            // Group items by batch\n            const batchMap = {};\n            // Find items without batch ID (newly added)\n            const unbatchedItems = vectorStore.filter((item)=>!item.metadata?.batch);\n            if (unbatchedItems.length > 0) {\n                // Get current batch or create new one\n                let currentBatchId = activeBatches[activeBatches.length - 1];\n                if (currentBatchId) {\n                    // Count items in the current batch\n                    const currentBatchCount = vectorStore.filter((item)=>item.metadata?.batch === currentBatchId).length;\n                    // Create a new batch if current one is too full\n                    if (currentBatchCount + unbatchedItems.length > MAX_BATCH_SIZE) {\n                        currentBatchId = createNewBatch();\n                    }\n                } else {\n                    // No batches exist yet, create the first one\n                    currentBatchId = createNewBatch();\n                }\n                // Assign batch ID to unbatched items\n                unbatchedItems.forEach((item)=>{\n                    if (!item.metadata) item.metadata = {};\n                    item.metadata.batch = currentBatchId;\n                });\n            }\n            // Group all items by batch\n            vectorStore.forEach((item)=>{\n                const batchId = item.metadata?.batch;\n                if (batchId) {\n                    if (!batchMap[batchId]) batchMap[batchId] = [];\n                    batchMap[batchId].push(item);\n                }\n            });\n            // Save each batch\n            Object.entries(batchMap).forEach(([batchId, items])=>{\n                if (items.length > 0) {\n                    saveBatch(batchId, items);\n                }\n            });\n        }\n        // Update index file\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(BATCH_INDEX_FILE, JSON.stringify({\n            activeBatches,\n            lastUpdated: Date.now()\n        }, null, 2));\n        // Also save to the single vectorStore.json file as a backup\n        const singleStoreFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"vectorStore.json\");\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(singleStoreFile, JSON.stringify({\n            items: vectorStore,\n            lastUpdated: Date.now()\n        }, null, 2));\n        console.log(`Saved vector store with ${activeBatches.length} batches and ${vectorStore.length} total items`);\n    } catch (error) {\n        console.error(\"Error saving vector store:\", error);\n    }\n}\n/**\n * Calculate cosine similarity between two vectors\n * @param vecA First vector\n * @param vecB Second vector\n * @returns Cosine similarity score (0-1)\n */ function cosineSimilarity(vecA, vecB) {\n    const dot = vecA.reduce((sum, a, i)=>sum + a * vecB[i], 0);\n    const magA = Math.sqrt(vecA.reduce((sum, a)=>sum + a * a, 0));\n    const magB = Math.sqrt(vecB.reduce((sum, b)=>sum + b * b, 0));\n    return dot / (magA * magB);\n}\n/**\n * Add an item or multiple items to the vector store\n * @param items Single item or array of items to add\n */ function addToVectorStore(items) {\n    // Convert single item to array\n    const itemsArray = Array.isArray(items) ? items : [\n        items\n    ];\n    if (itemsArray.length === 0) return;\n    // Add to in-memory store\n    vectorStore = [\n        ...vectorStore,\n        ...itemsArray\n    ];\n    // Save changes to disk\n    saveVectorStore();\n}\n// Enhanced version of getSimilarItems with stronger emphasis on structured data\nfunction getSimilarItems(queryEmbedding, limit = 5, queryText, priorityInfoType) {\n    // Check if the vector store is initialized\n    if (!vectorStore || vectorStore.length === 0) {\n        loadVectorStore();\n    }\n    if (!vectorStore || vectorStore.length === 0) {\n        console.warn(\"Vector store is empty. No results to return.\");\n        return [];\n    }\n    console.log(\"Searching for similar items...\");\n    // Look for certain types of inquiries to boost specific content\n    let shouldBoostStructuredInfo = false;\n    let shouldBoostCompanyValues = false;\n    let shouldBoostInvestors = false;\n    let shouldBoostLeadership = false;\n    let shouldBoostPricing = false;\n    let shouldBoostProductFeatures = false;\n    let shouldBoostSalesInfo = false;\n    if (queryText) {\n        const queryLower = queryText.toLowerCase();\n        // Check for company values inquiries\n        shouldBoostCompanyValues = queryLower.includes(\"value\") || queryLower.includes(\"culture\") || queryLower.includes(\"principle\") || queryLower.includes(\"mission\") || queryLower.includes(\"vision\");\n        // Check for investor inquiries\n        shouldBoostInvestors = queryLower.includes(\"investor\") || queryLower.includes(\"funding\") || queryLower.includes(\"backed by\") || queryLower.includes(\"invested\");\n        // Check for leadership inquiries\n        shouldBoostLeadership = queryLower.includes(\"founder\") || queryLower.includes(\"ceo\") || queryLower.includes(\"leader\") || queryLower.includes(\"executive\");\n        // Check for pricing inquiries\n        shouldBoostPricing = queryLower.includes(\"pricing\") || queryLower.includes(\"price\") || queryLower.includes(\"cost\") || queryLower.includes(\"subscription\") || queryLower.includes(\"plan\") || queryLower.includes(\"tier\");\n        // Check for product feature inquiries  \n        shouldBoostProductFeatures = queryLower.includes(\"feature\") || queryLower.includes(\"function\") || queryLower.includes(\"capability\") || queryLower.includes(\"how does it work\") || queryLower.includes(\"what does it do\");\n        // Check for sales information inquiries\n        shouldBoostSalesInfo = queryLower.includes(\"sell\") || queryLower.includes(\"pitch\") || queryLower.includes(\"competitor\") || queryLower.includes(\"comparison\");\n        // Set the overall structured info flag if any specific type should be boosted\n        shouldBoostStructuredInfo = shouldBoostCompanyValues || shouldBoostInvestors || shouldBoostLeadership || shouldBoostPricing || shouldBoostProductFeatures || shouldBoostSalesInfo;\n    }\n    // Calculate similarity scores\n    const itemsWithScores = vectorStore.map((item)=>{\n        // Compute base score using cosine similarity\n        let score = cosineSimilarity(queryEmbedding, item.embedding);\n        // Apply boosting for structured information when relevant\n        if (shouldBoostStructuredInfo && item.metadata?.isStructured) {\n            // Specific boosts for different types of structured information\n            const infoType = item.metadata?.infoType;\n            // Handle the case when a specific info type is prioritized\n            if (priorityInfoType && infoType === priorityInfoType) {\n                score *= 1.5; // Strong boost for exact info type match\n            } else if (shouldBoostCompanyValues && infoType === \"company_values\") {\n                score *= 1.3;\n            } else if (shouldBoostInvestors && infoType === \"investors\") {\n                score *= 1.3;\n            } else if (shouldBoostLeadership && infoType === \"leadership\") {\n                score *= 1.3;\n            } else if (shouldBoostPricing && infoType === \"pricing\") {\n                score *= 1.3;\n            } else if (shouldBoostProductFeatures && infoType === \"product_features\") {\n                score *= 1.3;\n            } else if (shouldBoostSalesInfo && infoType === \"sales_info\") {\n                score *= 1.3;\n            } else if (item.metadata?.isStructured) {\n                // General boost for any structured info\n                score *= 1.1;\n            }\n        }\n        return {\n            ...item,\n            score\n        };\n    });\n    // Sort by similarity score\n    const sortedResults = itemsWithScores.sort((a, b)=>b.score - a.score);\n    // Get the top results, but ensure priority structured info is included if relevant\n    let result = sortedResults.slice(0, limit);\n    // Check if we need to guarantee inclusion of specific structured info\n    if (shouldBoostStructuredInfo) {\n        // Check if we already have a relevant piece of structured information\n        let hasRelevantStructuredInfo = false;\n        // Use the priorityInfoType if available, otherwise check all relevant types\n        if (priorityInfoType) {\n            hasRelevantStructuredInfo = result.some((item)=>item.metadata?.infoType === priorityInfoType);\n        } else {\n            hasRelevantStructuredInfo = result.some((item)=>{\n                const infoType = item.metadata?.infoType;\n                return shouldBoostCompanyValues && infoType === \"company_values\" || shouldBoostInvestors && infoType === \"investors\" || shouldBoostLeadership && infoType === \"leadership\" || shouldBoostPricing && infoType === \"pricing\" || shouldBoostProductFeatures && infoType === \"product_features\" || shouldBoostSalesInfo && infoType === \"sales_info\";\n            });\n        }\n        // If we don't have the relevant info in our top results, find and include it\n        if (!hasRelevantStructuredInfo) {\n            let structuredInfoToInclude;\n            if (priorityInfoType) {\n                // Look for the specific priority info type\n                structuredInfoToInclude = sortedResults.find((item)=>item.metadata?.infoType === priorityInfoType && !result.includes(item));\n            } else {\n                // Look for any relevant structured info type\n                structuredInfoToInclude = sortedResults.find((item)=>{\n                    const infoType = item.metadata?.infoType;\n                    return (shouldBoostCompanyValues && infoType === \"company_values\" || shouldBoostInvestors && infoType === \"investors\" || shouldBoostLeadership && infoType === \"leadership\" || shouldBoostPricing && infoType === \"pricing\" || shouldBoostProductFeatures && infoType === \"product_features\" || shouldBoostSalesInfo && infoType === \"sales_info\") && !result.includes(item);\n                });\n            }\n            // If we found a relevant item, add it and remove the lowest scored item\n            if (structuredInfoToInclude) {\n                result.pop(); // Remove the lowest scored item\n                result.push(structuredInfoToInclude);\n                // Re-sort to maintain score order\n                result = result.sort((a, b)=>b.score - a.score);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Clear the vector store\n */ function clearVectorStore() {\n    // Clear in-memory data\n    vectorStore = [];\n    // Delete all batch files\n    try {\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(VECTOR_STORE_DIR)) {\n            const files = fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(VECTOR_STORE_DIR);\n            files.forEach((file)=>{\n                if (file.startsWith(\"batch_\")) {\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(path__WEBPACK_IMPORTED_MODULE_1___default().join(VECTOR_STORE_DIR, file));\n                }\n            });\n        }\n        // Reset batch index\n        activeBatches = [];\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(BATCH_INDEX_FILE, JSON.stringify({\n            activeBatches: [],\n            lastUpdated: Date.now()\n        }, null, 2));\n        console.log(\"Vector store cleared successfully\");\n    } catch (error) {\n        console.error(\"Error clearing vector store:\", error);\n    }\n}\n/**\n * Get the current size of the vector store\n * @returns Number of items in the vector store\n */ function getVectorStoreSize() {\n    return vectorStore.length;\n}\n// Initialize vector store on module load\ntry {\n    loadVectorStore();\n} catch (error) {\n    console.error(\"Failed to initialize vector store:\", error);\n    vectorStore = [];\n    activeBatches = [];\n}\n/**\n * Get all items from the vector store\n * @returns Array of all vector store items\n */ function getAllVectorStoreItems() {\n    return [\n        ...vectorStore\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/vectorStore.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fadmin%2Fdocuments&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fadmin%2Fdocuments.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();
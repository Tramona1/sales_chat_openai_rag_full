"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/query";
exports.ids = ["pages/api/query"];
exports.modules = {

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "mammoth":
/*!**************************!*\
  !*** external "mammoth" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mammoth");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pdf-parse":
/*!****************************!*\
  !*** external "pdf-parse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("pdf-parse");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fquery.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fquery.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_query_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/query.ts */ \"(api)/./pages/api/query.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_query_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_query_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_query_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_query_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/query\",\n        pathname: \"/api/query\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_query_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnF1ZXJ5JnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZxdWVyeS50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNpRDtBQUNqRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsZ0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGdEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbGVzLWNoYXQtb3BlbmFpLXJhZy8/ZTVhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL3F1ZXJ5LnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcXVlcnlcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9xdWVyeVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fquery.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/query.ts":
/*!****************************!*\
  !*** ./pages/api/query.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_openaiClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/openaiClient */ \"(api)/./utils/openaiClient.ts\");\n/* harmony import */ var _utils_advancedDocumentProcessing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/advancedDocumentProcessing */ \"(api)/./utils/advancedDocumentProcessing.ts\");\n/* harmony import */ var _utils_errorHandling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/errorHandling */ \"(api)/./utils/errorHandling.ts\");\n/* harmony import */ var _utils_modelConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/modelConfig */ \"(api)/./utils/modelConfig.ts\");\n/* harmony import */ var _utils_enhancedRetrieval__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/enhancedRetrieval */ \"(api)/./utils/enhancedRetrieval.ts\");\n/* harmony import */ var _utils_reranking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/reranking */ \"(api)/./utils/reranking.ts\");\n/* harmony import */ var _utils_caching__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/caching */ \"(api)/./utils/caching.ts\");\n/* harmony import */ var _utils_queryExpansion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/queryExpansion */ \"(api)/./utils/queryExpansion.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_openaiClient__WEBPACK_IMPORTED_MODULE_0__, _utils_advancedDocumentProcessing__WEBPACK_IMPORTED_MODULE_1__, _utils_errorHandling__WEBPACK_IMPORTED_MODULE_2__, _utils_reranking__WEBPACK_IMPORTED_MODULE_5__, _utils_queryExpansion__WEBPACK_IMPORTED_MODULE_7__]);\n([_utils_openaiClient__WEBPACK_IMPORTED_MODULE_0__, _utils_advancedDocumentProcessing__WEBPACK_IMPORTED_MODULE_1__, _utils_errorHandling__WEBPACK_IMPORTED_MODULE_2__, _utils_reranking__WEBPACK_IMPORTED_MODULE_5__, _utils_queryExpansion__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n// Initialize the enhanced retrieval system\nconst enhancedRetrieval = new _utils_enhancedRetrieval__WEBPACK_IMPORTED_MODULE_4__.EnhancedRetrieval({\n    bm25Weight: 0.3,\n    minBM25Score: 0.01,\n    minVectorScore: 0.6,\n    normalizeScores: true,\n    maxResults: 10,\n    debug: \"development\" !== \"production\" // Enable debug in non-production\n});\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method Not Allowed\"\n        });\n    }\n    try {\n        const { query, urgent = false } = req.body;\n        if (!query) {\n            return res.status(400).json({\n                message: \"Query is required\"\n            });\n        }\n        // Check cache first for non-urgent queries\n        if (!urgent) {\n            const cachedResult = await (0,_utils_caching__WEBPACK_IMPORTED_MODULE_6__.getCachedResult)(query);\n            if (cachedResult) {\n                console.log(`Cache hit for query: \"${query}\"`);\n                return res.status(200).json(cachedResult);\n            }\n        }\n        // Step 1: Analyze the query for intent and information needs\n        const queryAnalysis = await (0,_utils_advancedDocumentProcessing__WEBPACK_IMPORTED_MODULE_1__.analyzeQuery)(query);\n        console.log(\"Query analysis:\", JSON.stringify(queryAnalysis, null, 2));\n        // Step 2: Apply query expansion for better retrieval\n        // Skip for urgent queries to reduce latency\n        let expandedQueryResult;\n        let queryForRetrieval = query;\n        if (!urgent) {\n            console.log(\"Applying query expansion to improve recall...\");\n            // Use optimized query expansion parameters\n            expandedQueryResult = await (0,_utils_queryExpansion__WEBPACK_IMPORTED_MODULE_7__.expandQuery)(query, {\n                maxExpandedTerms: 3,\n                useSemanticExpansion: queryAnalysis.complexity > 1,\n                useKeywordExpansion: true,\n                semanticWeight: 0.6,\n                timeoutMs: 2500,\n                enableCaching: true,\n                debug: \"development\" !== \"production\"\n            });\n            if (expandedQueryResult.expansionType !== \"none\") {\n                queryForRetrieval = expandedQueryResult.expandedQuery;\n                console.log(`Expanded query: \"${queryForRetrieval}\"`);\n                console.log(`Added terms: ${expandedQueryResult.addedTerms.join(\", \")}`);\n                console.log(`Expansion type: ${expandedQueryResult.expansionType}`);\n            }\n        }\n        // Step 3: Generate embedding for the query\n        const queryEmbedding = await (0,_utils_openaiClient__WEBPACK_IMPORTED_MODULE_0__.embedText)(queryForRetrieval);\n        const queryLower = query.toLowerCase();\n        // Detect if query is asking about pricing or plans\n        const isPricingQuery = queryLower.match(/pricing|price|cost|subscription|tier|plan|package|fee|\\$/);\n        // Detect if query is asking about product features\n        const isProductFeaturesQuery = queryLower.match(/feature|functionality|capability|how (does|do) .* work|what (does|do) .* do/);\n        // Detect if query is looking for sales information\n        const isSalesQuery = queryLower.match(/sell|pitch|present|proposal|demo|sales|competitor|comparison|vs\\.?|versus/);\n        // When retrieving similar items, add priority for the new categories\n        let priorityInfoType = undefined;\n        if (isPricingQuery) {\n            priorityInfoType = \"pricing\";\n            console.log(\"Query appears to be about pricing information\");\n        } else if (isProductFeaturesQuery) {\n            priorityInfoType = \"product_features\";\n            console.log(\"Query appears to be about product features\");\n        } else if (isSalesQuery) {\n            priorityInfoType = \"sales_info\";\n            console.log(\"Query appears to be about sales information\");\n        }\n        console.log(`Using enhanced retrieval with BM25 and vector search for query: \"${queryForRetrieval}\"`);\n        // Step 4: Use enhanced retrieval system with hybrid search\n        const retrievalOptions = {\n            debug: \"development\" !== \"production\",\n            bm25Weight: priorityInfoType ? 0.4 : 0.3,\n            maxResults: urgent ? 5 : 10\n        };\n        // Find similar documents using enhanced retrieval\n        const retrievalResults = await enhancedRetrieval.findSimilarDocuments(queryForRetrieval, retrievalOptions);\n        console.log(`Retrieved ${retrievalResults.length} results with hybrid search`);\n        // Check if we should apply re-ranking\n        // Skip for urgent queries or very simple queries to reduce latency\n        const shouldRerank = !urgent && queryAnalysis.complexity > 1 && retrievalResults.length > 2;\n        let finalResults;\n        if (shouldRerank) {\n            // Step 5a: Apply re-ranking for non-urgent, complex queries\n            console.log(\"Applying re-ranking to improve result relevance...\");\n            const rerankedResults = await (0,_utils_reranking__WEBPACK_IMPORTED_MODULE_5__.rerankResults)(query, retrievalResults, {\n                returnTopN: 5,\n                model: \"gpt-3.5-turbo\",\n                timeoutMs: 8000,\n                parallelBatching: true,\n                debug: \"development\" !== \"production\"\n            });\n            finalResults = rerankedResults.map((result)=>result.originalResult);\n            console.log(`Re-ranking complete. Using ${finalResults.length} re-ranked results.`);\n        } else {\n            // Step 5b: Apply content-based boosting for urgent queries\n            console.log(\"Using content-based boosting for quick results (urgent mode or simple query)\");\n            const boostedResults = retrievalResults.map((result)=>{\n                const boostFactor = calculateBoostFactor(queryAnalysis, result.item);\n                return {\n                    ...result,\n                    boost: boostFactor,\n                    finalScore: result.combinedScore * boostFactor\n                };\n            });\n            // Re-rank based on combined scores and boost factors\n            finalResults = boostedResults.sort((a, b)=>(b.finalScore || 0) - (a.finalScore || 0)).slice(0, 5); // Get top 5 after boosting\n        }\n        // Format context for OpenAI\n        const context = finalResults.map((result)=>{\n            // Prepare source attribution\n            let sourceInfo = `Source: ${result.item.metadata?.source || \"Unknown\"}`;\n            if (result.item.metadata?.page) {\n                sourceInfo += `, Page: ${result.item.metadata.page}`;\n            }\n            // Include additional score information in development\n            if (true) {\n                sourceInfo += ` (BM25: ${result.bm25Score.toFixed(3)}, Vector: ${result.vectorScore.toFixed(3)}, Combined: ${result.combinedScore.toFixed(3)})`;\n            }\n            return `${result.item.text}\\n\\n${sourceInfo}`;\n        }).join(\"\\n\\n---\\n\\n\");\n        // Create a dynamic system prompt based on query analysis\n        let systemPrompt = `You are an AI assistant for a sales team. Answer the user's question based ONLY on the context provided below.\nIf the answer cannot be determined from the context, say \"I don't have enough information to answer this question\" - do NOT make up information.\nBe concise but thorough. Include all relevant details from the context provided.\nFormat your response clearly with appropriate paragraphs, bullet points, or numbered lists as needed.`;\n        // Adjust system prompt based on query analysis\n        if (queryAnalysis.expectedFormat === \"list\") {\n            systemPrompt += \"\\nUse bullet points for your response when appropriate.\";\n        } else if (queryAnalysis.expectedFormat === \"steps\") {\n            systemPrompt += \"\\nProvide a clear step-by-step explanation.\";\n        }\n        // Add technical level guidance\n        if (queryAnalysis.technicalLevel >= 4) {\n            systemPrompt += \"\\nUse technical language and detailed explanations.\";\n        } else if (queryAnalysis.technicalLevel <= 2) {\n            systemPrompt += \"\\nUse simple language and explain concepts clearly.\";\n        }\n        // Generate response with OpenAI, using our enhanced client\n        const userMessage = `Context:\\n${context}\\n\\nQuestion: ${query}`;\n        const response = await (0,_utils_openaiClient__WEBPACK_IMPORTED_MODULE_0__.generateChatCompletion)(systemPrompt, userMessage, _utils_modelConfig__WEBPACK_IMPORTED_MODULE_3__.AI_SETTINGS.defaultModel);\n        // Prepare result object\n        const result = {\n            answer: response,\n            sources: finalResults.map((result)=>{\n                const resultWithScore = result;\n                return {\n                    source: result.item.metadata?.source || \"Unknown\",\n                    page: result.item.metadata?.page,\n                    relevance: (resultWithScore.finalScore !== undefined ? resultWithScore.finalScore : result.combinedScore).toFixed(2),\n                    // Include more detailed scoring info in development\n                    scores:  true ? {\n                        bm25: result.bm25Score,\n                        vector: result.vectorScore,\n                        combined: result.combinedScore,\n                        boost: result.boost,\n                        final: resultWithScore.finalScore\n                    } : 0\n                };\n            }),\n            metadata: {\n                retrieval: {\n                    method: shouldRerank ? \"hybrid_with_reranking\" : \"hybrid_with_boosting\",\n                    totalResults: retrievalResults.length,\n                    returnedResults: finalResults.length,\n                    urgent: urgent,\n                    queryComplexity: queryAnalysis.complexity,\n                    queryExpansion: expandedQueryResult ? {\n                        applied: expandedQueryResult.expansionType !== \"none\",\n                        type: expandedQueryResult.expansionType,\n                        addedTerms: expandedQueryResult.addedTerms\n                    } : undefined\n                }\n            }\n        };\n        // Cache result for non-urgent queries (1 hour TTL)\n        if (!urgent) {\n            await (0,_utils_caching__WEBPACK_IMPORTED_MODULE_6__.cacheResult)(query, result, 3600);\n        }\n        // Return the response and relevant sources\n        return res.status(200).json(result);\n    } catch (error) {\n        console.error(\"Error in query processing:\", error);\n        // Use our standardized error response\n        const errorResponse = (0,_utils_errorHandling__WEBPACK_IMPORTED_MODULE_2__.standardizeApiErrorResponse)(error);\n        return res.status(500).json(errorResponse);\n    }\n}\n/**\n * Simple boost factor calculation based on query analysis\n */ function calculateBoostFactor(queryAnalysis, item) {\n    let boostFactor = 1.0;\n    // Check for structured information and boost it\n    if (item.metadata?.isStructured) {\n        boostFactor *= 1.5;\n        // If the text has list format and query expects a list, boost it more\n        if (queryAnalysis.expectedFormat === \"list\" && (item.text.includes(\"- \") || item.text.includes(\"• \"))) {\n            boostFactor *= 1.2;\n        }\n    }\n    // Check for technical level match\n    const contentTechLevel = estimateContentTechLevel(item.text);\n    const techLevelDiff = Math.abs(contentTechLevel - queryAnalysis.technicalLevel);\n    if (techLevelDiff <= 1) {\n        boostFactor *= 1.1; // Boost if technical levels are a good match\n    }\n    // Boost on query topic presence in text \n    if (queryAnalysis.topics && queryAnalysis.topics.length > 0) {\n        const lowerText = item.text.toLowerCase();\n        const topicMatches = queryAnalysis.topics.filter((topic)=>lowerText.includes(topic.toLowerCase())).length;\n        if (topicMatches > 0) {\n            boostFactor *= 1.0 + topicMatches * 0.1;\n        }\n    }\n    return boostFactor;\n}\n/**\n * Estimate technical level of content based on simple heuristics\n */ function estimateContentTechLevel(text) {\n    const lowerText = text.toLowerCase();\n    // Simple heuristics to estimate technical level\n    const technicalTerms = [\n        \"algorithm\",\n        \"implementation\",\n        \"architecture\",\n        \"infrastructure\",\n        \"configuration\",\n        \"deployment\",\n        \"integration\",\n        \"protocol\"\n    ];\n    const basicTerms = [\n        \"simple\",\n        \"easy\",\n        \"straightforward\",\n        \"basic\",\n        \"just\",\n        \"simply\"\n    ];\n    const techTermCount = technicalTerms.filter((term)=>lowerText.includes(term)).length;\n    const basicTermCount = basicTerms.filter((term)=>lowerText.includes(term)).length;\n    // Calculate a score from 1 to 5\n    let techLevel = 3; // Default mid-level\n    techLevel += techTermCount * 0.5;\n    techLevel -= basicTermCount * 0.5;\n    // Clamp between 1 and 5\n    return Math.max(1, Math.min(5, techLevel));\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/query.ts\n");

/***/ }),

/***/ "(api)/./utils/advancedDocumentProcessing.ts":
/*!*********************************************!*\
  !*** ./utils/advancedDocumentProcessing.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeDocument: () => (/* binding */ analyzeDocument),\n/* harmony export */   analyzeQuery: () => (/* binding */ analyzeQuery),\n/* harmony export */   calculateContentBoost: () => (/* binding */ calculateContentBoost),\n/* harmony export */   createSmartChunkWithMetadata: () => (/* binding */ createSmartChunkWithMetadata),\n/* harmony export */   createSmartChunks: () => (/* binding */ createSmartChunks),\n/* harmony export */   enhanceChunkMetadata: () => (/* binding */ enhanceChunkMetadata),\n/* harmony export */   extractText: () => (/* binding */ extractText),\n/* harmony export */   generateSummaries: () => (/* binding */ generateSummaries),\n/* harmony export */   identifySections: () => (/* binding */ identifySections),\n/* harmony export */   processDocumentWithUnderstanding: () => (/* binding */ processDocumentWithUnderstanding),\n/* harmony export */   processFileWithUnderstanding: () => (/* binding */ processFileWithUnderstanding),\n/* harmony export */   processTextWithUnderstanding: () => (/* binding */ processTextWithUnderstanding),\n/* harmony export */   splitSectionIntoChunks: () => (/* binding */ splitSectionIntoChunks),\n/* harmony export */   splitTextIntoChunks: () => (/* binding */ splitTextIntoChunks),\n/* harmony export */   storeSmartChunks: () => (/* binding */ storeSmartChunks)\n/* harmony export */ });\n/* harmony import */ var _documentProcessing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./documentProcessing */ \"(api)/./utils/documentProcessing.ts\");\n/* harmony import */ var _vectorStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vectorStore */ \"(api)/./utils/vectorStore.ts\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_2__]);\nopenai__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Initialize OpenAI API client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\n * Use the LLM to analyze the document content\n */ async function analyzeDocument(text) {\n    const analysisPrompt = `\n    Analyze the following document content and provide structured metadata:\n    \n    1. Identify the document title or generate one if not clear\n    2. Identify ALL main topics covered (list of 3-7 topics)\n    3. Extract any key entities:\n       - People mentioned\n       - Products discussed\n       - Features described\n       - Projects referenced\n    4. Identify content type (manual, policy, specs, tutorial, etc.)\n    5. Estimate the technical complexity level (1-5)\n    6. Determine if this contains sensitive/confidential information (true/false)\n    \n    Content: \n    ${text.substring(0, 4000)}\n    \n    Return your analysis as JSON with these fields:\n    {\n      \"title\": \"Document title\",\n      \"topics\": [\"topic1\", \"topic2\", ...],\n      \"entities\": {\n        \"people\": [\"name1\", \"name2\", ...],\n        \"products\": [\"product1\", \"product2\", ...],\n        \"features\": [\"feature1\", \"feature2\", ...],\n        \"projects\": [\"project1\", \"project2\", ...]\n      },\n      \"contentType\": \"manual/policy/specs/etc\",\n      \"technicalLevel\": 1-5,\n      \"containsConfidential\": true/false\n    }\n  `;\n    try {\n        const analysis = await openai.chat.completions.create({\n            model: \"gpt-4\",\n            messages: [\n                {\n                    role: \"user\",\n                    content: analysisPrompt\n                }\n            ]\n        });\n        // Parse and return the analysis\n        const content = analysis.choices[0].message.content || \"{}\";\n        try {\n            return JSON.parse(content);\n        } catch (parseError) {\n            console.warn(\"Failed to parse JSON from analyzeDocument response:\", parseError);\n            // Fallback to basic analysis\n            return {\n                title: extractTitle(content) || \"Untitled Document\",\n                topics: extractTopics(content) || [\n                    \"general\"\n                ],\n                entities: {\n                    people: [],\n                    products: [],\n                    features: [],\n                    projects: []\n                },\n                contentType: extractContentType(content) || \"document\",\n                technicalLevel: extractTechLevel(content) || 3,\n                containsConfidential: false\n            };\n        }\n    } catch (error) {\n        console.error(\"Error analyzing document:\", error);\n        // Return a basic analysis if the LLM analysis fails\n        return {\n            title: \"Untitled Document\",\n            topics: [\n                \"general\"\n            ],\n            entities: {\n                people: [],\n                products: [],\n                features: [],\n                projects: []\n            },\n            contentType: \"document\",\n            technicalLevel: 3,\n            containsConfidential: false\n        };\n    }\n}\n/**\n * Generate multiple layers of document summaries\n */ async function generateSummaries(text, analysis) {\n    const summaryPrompt = `\n    Create the following summaries of this ${analysis.contentType} document:\n    \n    1. One-line summary (15-20 words)\n    2. Paragraph summary (3-5 sentences)\n    3. Detailed summary with section breakdown (300-500 words)\n    4. List of key points (5-10 bullet points)\n    \n    Document:\n    ${text.substring(0, 6000)}\n    \n    Return the summaries in this JSON format:\n    {\n      \"oneLine\": \"One-line summary here\",\n      \"paragraph\": \"Paragraph summary here\",\n      \"detailed\": \"Detailed summary here\",\n      \"keyPoints\": [\"point 1\", \"point 2\", ...]\n    }\n  `;\n    try {\n        const summaryResponse = await openai.chat.completions.create({\n            model: \"gpt-4\",\n            messages: [\n                {\n                    role: \"user\",\n                    content: summaryPrompt\n                }\n            ]\n        });\n        // Parse the summaries from the response\n        const content = summaryResponse.choices[0].message.content || \"{}\";\n        try {\n            return JSON.parse(content);\n        } catch (parseError) {\n            console.warn(\"Failed to parse JSON from generateSummaries response:\", parseError);\n            // Create basic summaries from the response\n            return {\n                oneLine: analysis.title,\n                paragraph: `Document about ${analysis.topics.join(\", \")}.`,\n                detailed: \"No detailed summary available.\",\n                keyPoints: analysis.topics.map((topic)=>`Information about ${topic}`)\n            };\n        }\n    } catch (error) {\n        console.error(\"Error generating summaries:\", error);\n        // Return basic summaries if LLM fails\n        return {\n            oneLine: analysis.title,\n            paragraph: `Document about ${analysis.topics.join(\", \")}.`,\n            detailed: \"No detailed summary available.\",\n            keyPoints: analysis.topics.map((topic)=>`Information about ${topic}`)\n        };\n    }\n}\n/**\n * Identify logical sections within a document\n */ async function identifySections(text) {\n    const sectionPrompt = `\n    Divide the following document into logical sections.\n    For each section, provide:\n    1. A section title\n    2. The section content\n    \n    Document:\n    ${text.substring(0, 8000)}\n    \n    Return the sections in this JSON format:\n    [\n      {\n        \"title\": \"Section title\",\n        \"text\": \"Section content\"\n      },\n      ...\n    ]\n  `;\n    try {\n        const sectionsResponse = await openai.chat.completions.create({\n            model: \"gpt-4\",\n            messages: [\n                {\n                    role: \"user\",\n                    content: sectionPrompt\n                }\n            ]\n        });\n        // Parse the sections from the response\n        const content = sectionsResponse.choices[0].message.content || \"{}\";\n        try {\n            const parsed = JSON.parse(content);\n            // Make sure we have an array of sections\n            if (Array.isArray(parsed)) {\n                return parsed;\n            } else if (parsed.sections && Array.isArray(parsed.sections)) {\n                return parsed.sections;\n            }\n        } catch (parseError) {\n            console.warn(\"Failed to parse JSON from identifySections response:\", parseError);\n        }\n        // If we couldn't parse correctly, return the whole text as one section\n        return [\n            {\n                title: \"Document Content\",\n                text: text\n            }\n        ];\n    } catch (error) {\n        console.error(\"Error identifying sections:\", error);\n        // Return the whole text as one section if LLM fails\n        return [\n            {\n                title: \"Document Content\",\n                text: text\n            }\n        ];\n    }\n}\n/**\n * Split section into smaller chunks for embedding\n */ function splitSectionIntoChunks(sectionText, chunkSize = 500) {\n    const chunks = [];\n    if (sectionText.length <= chunkSize) {\n        return [\n            sectionText\n        ];\n    }\n    let currentIndex = 0;\n    while(currentIndex < sectionText.length){\n        // Get a chunk of approximately the target size\n        let chunk = sectionText.substring(currentIndex, currentIndex + chunkSize);\n        // If we're not at the end of the text, try to break at a natural boundary\n        if (currentIndex + chunkSize < sectionText.length) {\n            // Look for paragraph breaks first (ideal breaking point)\n            const paragraphBreak = chunk.lastIndexOf(\"\\n\\n\");\n            // Then look for the last sentence break in this chunk\n            const sentenceBreaks = [\n                chunk.lastIndexOf(\". \"),\n                chunk.lastIndexOf(\"? \"),\n                chunk.lastIndexOf(\"! \"),\n                chunk.lastIndexOf(\".\\n\"),\n                chunk.lastIndexOf(\"?\\n\"),\n                chunk.lastIndexOf(\"!\\n\")\n            ];\n            const lastSentenceBreak = Math.max(...sentenceBreaks);\n            // Use paragraph break if available and reasonable, otherwise use sentence break\n            if (paragraphBreak > chunkSize * 0.5) {\n                chunk = chunk.substring(0, paragraphBreak);\n            } else if (lastSentenceBreak > chunkSize * 0.3) {\n                // If the sentence break is at least 30% through the chunk\n                const breakType = sentenceBreaks.indexOf(lastSentenceBreak);\n                // Add 2 to include the period and space/newline\n                chunk = chunk.substring(0, lastSentenceBreak + (breakType >= 3 ? 2 : 2));\n            }\n        }\n        chunks.push(chunk.trim());\n        currentIndex += chunk.length;\n        // Add slight overlap for context if needed\n        if (currentIndex < sectionText.length) {\n            // Find the last complete sentence for overlap\n            const lastSentenceMatch = chunk.match(/[^.!?]+[.!?]+\\s*$/);\n            const lastSentence = lastSentenceMatch ? lastSentenceMatch[0] : \"\";\n            if (lastSentence && lastSentence.length < chunkSize * 0.2) {\n                currentIndex -= lastSentence.length;\n            }\n        }\n    }\n    return chunks;\n}\n/**\n * Create smart chunks that maintain document structure\n */ async function createSmartChunks(text, analysis, summaries, sections) {\n    const chunks = [];\n    // Create a chunk for the overall document\n    chunks.push({\n        text: summaries.paragraph,\n        metadata: {\n            source: analysis.title,\n            chunkType: \"document_summary\",\n            topics: analysis.topics,\n            contentType: analysis.contentType,\n            technicalLevel: analysis.technicalLevel\n        }\n    });\n    // Process each section into chunks\n    for (const section of sections){\n        // Generate a summary for this section\n        let sectionSummary = \"\";\n        try {\n            const sectionSummaryPrompt = `\n        Summarize this section in 1-2 sentences:\n        \n        Section Title: ${section.title}\n        Content: ${section.text.substring(0, 2000)}\n      `;\n            const summaryResponse = await openai.chat.completions.create({\n                model: \"gpt-4\",\n                messages: [\n                    {\n                        role: \"user\",\n                        content: sectionSummaryPrompt\n                    }\n                ]\n            });\n            sectionSummary = summaryResponse.choices[0].message.content || \"\";\n        } catch (error) {\n            console.warn(`Error generating summary for section \"${section.title}\":`, error);\n            sectionSummary = `Section about ${section.title}`;\n        }\n        // Add a chunk for the section summary\n        chunks.push({\n            text: sectionSummary,\n            metadata: {\n                source: `${analysis.title} - ${section.title}`,\n                chunkType: \"section_summary\",\n                topics: analysis.topics,\n                contentType: analysis.contentType,\n                technicalLevel: analysis.technicalLevel\n            }\n        });\n        // Split the section content into smaller chunks\n        const contentChunks = splitSectionIntoChunks(section.text, 1000);\n        for(let i = 0; i < contentChunks.length; i++){\n            chunks.push({\n                text: contentChunks[i],\n                metadata: {\n                    source: `${analysis.title} - ${section.title} (Part ${i + 1}/${contentChunks.length})`,\n                    chunkType: \"section_content\",\n                    topics: analysis.topics,\n                    contentType: analysis.contentType,\n                    technicalLevel: analysis.technicalLevel,\n                    sectionTitle: section.title\n                }\n            });\n        }\n    }\n    return chunks;\n}\n/**\n * Enhance chunks with rich metadata\n */ function enhanceChunkMetadata(chunk, analysis, source, page) {\n    const now = new Date().toISOString();\n    return {\n        text: chunk.text,\n        embedding: chunk.embedding || [],\n        metadata: {\n            source,\n            section: chunk.metadata?.sectionTitle,\n            page,\n            topics: analysis.topics,\n            contentType: analysis.contentType,\n            technicalLevel: analysis.technicalLevel,\n            confidentiality: analysis.containsConfidential ? \"confidential\" : \"public\",\n            relatedProducts: analysis.entities.products,\n            relatedProjects: analysis.entities.projects,\n            lastUpdated: now,\n            documentSummary: \"\",\n            sectionSummary: \"\" // Removed reference to nonexistent property\n        }\n    };\n}\n/**\n * Main function to process new document with advanced understanding\n */ async function processDocumentWithUnderstanding(filePath, mimetype, filename) {\n    try {\n        // 1. Extract text from document\n        const text = await (0,_documentProcessing__WEBPACK_IMPORTED_MODULE_0__.extractText)(filePath, mimetype);\n        // 2. Get LLM to analyze the full document\n        const documentAnalysis = await analyzeDocument(text);\n        // 3. Generate multiple document summaries\n        const summaries = await generateSummaries(text, documentAnalysis);\n        // 4. Create smart chunks with nested context\n        const smartChunks = await createSmartChunks(text, documentAnalysis, summaries, await identifySections(text));\n        // 5. Enhance each chunk with rich metadata\n        const enhancedChunks = smartChunks.map((chunk)=>enhanceChunkMetadata(chunk, documentAnalysis, filename));\n        // 6. Generate embeddings for all chunks and add to vector store\n        for (const chunk of enhancedChunks){\n            chunk.embedding = await embedText(chunk.text);\n            (0,_vectorStore__WEBPACK_IMPORTED_MODULE_1__.addToVectorStore)(chunk);\n        }\n        return {\n            analysis: documentAnalysis,\n            chunkCount: enhancedChunks.length\n        };\n    } catch (error) {\n        console.error(\"Error processing document with understanding:\", error);\n        throw new Error(`Failed to process document: ${error instanceof Error ? error.message : String(error)}`);\n    }\n}\n/**\n * Analyze a query to determine its characteristics\n * This helps in optimizing retrieval and answer generation\n */ async function analyzeQuery(query) {\n    const lowerQuery = query.toLowerCase();\n    // Simple rule-based analysis\n    // In a production system, this would be more sophisticated\n    // and potentially use ML models for classification\n    // Determine technical level\n    const technicalTerms = [\n        \"algorithm\",\n        \"architecture\",\n        \"implementation\",\n        \"infrastructure\",\n        \"backend\",\n        \"frontend\",\n        \"api\",\n        \"endpoint\",\n        \"protocol\",\n        \"encryption\",\n        \"schema\",\n        \"database\",\n        \"integration\"\n    ];\n    // Count technical terms\n    const technicalTermCount = technicalTerms.filter((term)=>lowerQuery.includes(term)).length;\n    let technicalLevel = 3; // Default mid-level\n    technicalLevel += technicalTermCount * 0.5;\n    // Check for simple language that would indicate lower technical level\n    if (lowerQuery.includes(\"simple\") || lowerQuery.includes(\"easy\") || lowerQuery.includes(\"basics\")) {\n        technicalLevel -= 1;\n    }\n    // Determine expected response format\n    let expectedFormat = \"text\";\n    if (lowerQuery.includes(\"step\") || lowerQuery.includes(\"guide\") || lowerQuery.includes(\"how to\")) {\n        expectedFormat = \"steps\";\n    } else if (lowerQuery.includes(\"list\") || lowerQuery.match(/what are( the)? (different|various|main|key)/)) {\n        expectedFormat = \"list\";\n    } else if (lowerQuery.includes(\"table\") || lowerQuery.includes(\"compare\") || lowerQuery.includes(\"comparison\")) {\n        expectedFormat = \"table\";\n    }\n    // Determine complexity\n    const complexWords = [\n        \"differences\",\n        \"between\",\n        \"compare\",\n        \"explain\",\n        \"why\",\n        \"how\",\n        \"technical\",\n        \"architecture\",\n        \"detail\",\n        \"versus\"\n    ];\n    const complexWordCount = complexWords.filter((word)=>lowerQuery.includes(word)).length;\n    let complexity = 2; // Default slightly below mid-level\n    complexity += complexWordCount * 0.5;\n    // Simple topic extraction\n    // This is a placeholder for more sophisticated NER/topic modeling\n    const potentialTopics = [\n        \"pricing\",\n        \"features\",\n        \"security\",\n        \"integration\",\n        \"api\",\n        \"comparison\",\n        \"implementation\",\n        \"enterprise\",\n        \"support\",\n        \"demo\",\n        \"trial\",\n        \"contract\",\n        \"discount\",\n        \"competitors\"\n    ];\n    const topics = potentialTopics.filter((topic)=>lowerQuery.includes(topic));\n    // Determine urgency\n    let urgency = 1; // Default low urgency\n    if (lowerQuery.includes(\"urgent\") || lowerQuery.includes(\"asap\") || lowerQuery.includes(\"immediately\")) {\n        urgency = 5;\n    } else if (lowerQuery.includes(\"soon\") || lowerQuery.includes(\"quickly\")) {\n        urgency = 3;\n    }\n    // Normalize scores to intended ranges\n    technicalLevel = Math.max(1, Math.min(5, technicalLevel));\n    complexity = Math.max(1, Math.min(5, complexity));\n    return {\n        technicalLevel,\n        expectedFormat,\n        complexity,\n        topics,\n        urgency\n    };\n}\n// Helper functions to extract information from non-JSON responses\nfunction extractTitle(text) {\n    const titleMatch = text.match(/title:.*?[\"'](.+?)[\"']/i);\n    return titleMatch ? titleMatch[1] : null;\n}\nfunction extractTopics(text) {\n    const topicsMatch = text.match(/topics:.*?\\[(.*?)\\]/i);\n    if (topicsMatch && topicsMatch[1]) {\n        return topicsMatch[1].split(\",\").map((t)=>t.trim().replace(/[\"']/g, \"\"));\n    }\n    return null;\n}\nfunction extractContentType(text) {\n    const typeMatch = text.match(/contentType:.*?[\"'](.+?)[\"']/i);\n    return typeMatch ? typeMatch[1].toLowerCase() : null;\n}\nfunction extractFormat(text) {\n    const formatMatch = text.match(/expectedFormat:.*?[\"']?(list|explanation|steps|step-by-step|comparison|summary|detailed)[\"']?/i);\n    return formatMatch ? formatMatch[1].toLowerCase() : null;\n}\nfunction extractTechLevel(text) {\n    const levelMatch = text.match(/technicalLevel:.*?([1-5])/i);\n    return levelMatch ? parseInt(levelMatch[1]) : null;\n}\n/**\n * Calculate content-based relevance boost factors\n */ function calculateContentBoost(queryAnalysis, chunk) {\n    let boostFactor = 1.0;\n    // Topic overlap\n    const topicOverlap = queryAnalysis.topics.filter((topic)=>chunk.metadata.topics.includes(topic)).length;\n    if (topicOverlap > 0) {\n        boostFactor *= 1.0 + topicOverlap / queryAnalysis.topics.length;\n    }\n    // Technical level match\n    const techLevelDifference = Math.abs(queryAnalysis.technicalLevel - chunk.metadata.technicalLevel);\n    if (techLevelDifference <= 1) {\n        boostFactor *= 1.2; // Boost if technical levels are a good match\n    }\n    // Structured content match\n    if (queryAnalysis.expectedFormat === \"list\" && chunk.text.includes(\"- \")) {\n        boostFactor *= 1.3; // Boost list-like content for list queries\n    }\n    if (queryAnalysis.expectedFormat === \"steps\" && (chunk.text.includes(\"Step \") || chunk.text.includes(\". \"))) {\n        boostFactor *= 1.3; // Boost step-like content for steps queries\n    }\n    // Recency boost\n    const lastUpdated = new Date(chunk.metadata.lastUpdated).getTime();\n    const now = new Date().getTime();\n    const daysSinceUpdate = (now - lastUpdated) / (1000 * 60 * 60 * 24);\n    if (daysSinceUpdate < 30) {\n        boostFactor *= 1.1; // Slight boost for recent content\n    }\n    return boostFactor;\n}\n/**\n * Process a file with full AI understanding\n */ async function processFileWithUnderstanding(file, useDefaultTitle = false) {\n    try {\n        // Extract text from the file\n        const text = await extractText(file);\n        // Process the extracted text\n        return await processTextWithUnderstanding(text, file.originalname, useDefaultTitle);\n    } catch (error) {\n        console.error(\"Error processing file with understanding:\", error);\n        throw error;\n    }\n}\n/**\n * Process text content with full AI understanding\n */ async function processTextWithUnderstanding(text, originalTitle, useDefaultTitle = false) {\n    try {\n        // Analyze the document to extract metadata\n        const analysis = await analyzeDocument(text);\n        // Use the provided title if available and requested\n        if (useDefaultTitle && originalTitle) {\n            analysis.title = originalTitle;\n        }\n        // Make sure we have a safe title for file operations\n        const safeTitle = (analysis.title || originalTitle || \"document\").replace(/[^a-zA-Z0-9-_]/g, \"_\");\n        // Generate summaries\n        const summaries = await generateSummaries(text, analysis);\n        // Identify sections in the document\n        const sections = await identifySections(text);\n        // Create smart chunks that preserve document structure\n        const chunks = await createSmartChunks(text, analysis, summaries, sections);\n        // Store the chunks in the vector store\n        const embeddings = await storeSmartChunks(chunks);\n        return {\n            title: analysis.title || \"Untitled Document\",\n            topics: analysis.topics,\n            contentType: analysis.contentType,\n            summaries,\n            chunks: chunks.length,\n            sections: sections.map((s)=>s.title)\n        };\n    } catch (error) {\n        console.error(\"Error processing text with understanding:\", error);\n        throw error;\n    }\n}\n/**\n * Extract text from a file\n */ async function extractText(file) {\n    // For simplicity, we're just returning the file buffer as text\n    // In a real implementation, you would use libraries like pdf-parse, docx, etc.\n    return file.buffer.toString(\"utf-8\");\n}\n/**\n * Store smart chunks in the vector store\n */ async function storeSmartChunks(chunks) {\n    let storedCount = 0;\n    for (const chunk of chunks){\n        try {\n            // Generate embedding for the chunk text\n            const embedding = await embedText(chunk.text);\n            // Store in vector database\n            (0,_vectorStore__WEBPACK_IMPORTED_MODULE_1__.addToVectorStore)({\n                text: chunk.text,\n                metadata: chunk.metadata,\n                embedding\n            });\n            storedCount++;\n        } catch (error) {\n            console.error(\"Error storing chunk:\", error);\n        }\n    }\n    return storedCount;\n}\n/**\n * Generate embedding for text\n */ async function embedText(text) {\n    try {\n        const response = await openai.embeddings.create({\n            model: \"text-embedding-ada-002\",\n            input: text\n        });\n        return response.data[0].embedding;\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        // Return a dummy embedding for error cases\n        return Array(1536).fill(0);\n    }\n}\n/**\n * Helper function to split text into chunks\n */ function splitTextIntoChunks(text, maxChunkSize = 1000) {\n    // Implement text splitting logic that preserves paragraphs and sentence boundaries\n    const chunks = [];\n    // Simple implementation for now - split by paragraphs then recombine to stay under maxChunkSize\n    const paragraphs = text.split(/\\n\\s*\\n/);\n    let currentChunk = \"\";\n    for (const paragraph of paragraphs){\n        if (currentChunk.length + paragraph.length > maxChunkSize && currentChunk.length > 0) {\n            chunks.push(currentChunk);\n            currentChunk = paragraph;\n        } else {\n            currentChunk += (currentChunk ? \"\\n\\n\" : \"\") + paragraph;\n        }\n    }\n    if (currentChunk) {\n        chunks.push(currentChunk);\n    }\n    return chunks;\n}\n/**\n * Create a smart chunk with metadata\n */ function createSmartChunkWithMetadata(text, section, analysis, partIndex, totalParts) {\n    return {\n        text,\n        metadata: {\n            source: `${analysis.title} - ${section.title} (Part ${partIndex}/${totalParts})`,\n            chunkType: \"section_content\",\n            topics: analysis.topics,\n            contentType: analysis.contentType,\n            technicalLevel: analysis.technicalLevel,\n            sectionTitle: section.title\n        }\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/advancedDocumentProcessing.ts\n");

/***/ }),

/***/ "(api)/./utils/bm25.ts":
/*!***********************!*\
  !*** ./utils/bm25.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BM25_B: () => (/* binding */ BM25_B),\n/* harmony export */   BM25_K1: () => (/* binding */ BM25_K1),\n/* harmony export */   calculateBM25Score: () => (/* binding */ calculateBM25Score),\n/* harmony export */   calculateCorpusStatistics: () => (/* binding */ calculateCorpusStatistics),\n/* harmony export */   combineScores: () => (/* binding */ combineScores),\n/* harmony export */   loadCorpusStatistics: () => (/* binding */ loadCorpusStatistics),\n/* harmony export */   saveCorpusStatistics: () => (/* binding */ saveCorpusStatistics)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _tokenization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokenization */ \"(api)/./utils/tokenization.ts\");\n/**\n * BM25 Implementation for improved document retrieval\n * \n * This file contains the core BM25 implementation for improved document\n * retrieval beyond vector-based similarity search. BM25 is a widely used\n * ranking function that scores documents based on term frequency and\n * inverse document frequency.\n */ \n\n\n// BM25 parameters (can be tuned)\nconst BM25_K1 = 1.2; // Term frequency saturation parameter\nconst BM25_B = 0.75; // Document length normalization parameter\n/**\n * Load corpus statistics from disk\n * These statistics are calculated by the calculate-corpus-stats script\n */ async function loadCorpusStatistics() {\n    try {\n        const statsDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"corpus_stats\");\n        const statsPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(statsDir, \"corpus_statistics.json\");\n        const dfPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(statsDir, \"document_frequency.json\");\n        const docLengthsPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(statsDir, \"document_lengths.json\");\n        // Load main statistics\n        const statsData = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(statsPath, \"utf8\");\n        const stats = JSON.parse(statsData);\n        // Load document frequency\n        const dfData = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(dfPath, \"utf8\");\n        stats.documentFrequency = JSON.parse(dfData);\n        // Load document lengths\n        const docLengthsData = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(docLengthsPath, \"utf8\");\n        stats.documentLengths = JSON.parse(docLengthsData);\n        return stats;\n    } catch (error) {\n        console.error(\"Error loading corpus statistics:\", error);\n        throw new Error(\"Failed to load corpus statistics\");\n    }\n}\n/**\n * Calculate corpus statistics from vector store\n * Used by the calculate-corpus-stats script\n */ async function calculateCorpusStatistics(documents) {\n    // Initialize statistics\n    const stats = {\n        totalDocuments: documents.length,\n        averageDocumentLength: 0,\n        documentFrequency: {},\n        documentLengths: {},\n        termFrequency: {},\n        mostCommonTerms: []\n    };\n    // Process in batches to avoid memory issues\n    const batchSize = 100;\n    let totalLength = 0;\n    console.log(`Processing ${documents.length} documents in increments of ${batchSize}...`);\n    for(let i = 0; i < documents.length; i += batchSize){\n        const batch = documents.slice(i, i + batchSize);\n        console.log(`Processing documents ${i + 1} to ${Math.min(i + batchSize, documents.length)}...`);\n        for (const doc of batch){\n            const docId = doc.metadata?.source || `doc_${i}`;\n            const text = doc.text || \"\";\n            // Calculate document length (number of terms)\n            const docLength = (0,_tokenization__WEBPACK_IMPORTED_MODULE_2__.getDocumentLength)(text);\n            stats.documentLengths[docId] = docLength;\n            totalLength += docLength;\n            // Calculate term frequencies for the document\n            const terms = (0,_tokenization__WEBPACK_IMPORTED_MODULE_2__.tokenize)(text);\n            const uniqueTerms = new Set(terms);\n            // Update document frequency (number of documents containing each term)\n            uniqueTerms.forEach((term)=>{\n                stats.documentFrequency[term] = (stats.documentFrequency[term] || 0) + 1;\n                stats.termFrequency[term] = (stats.termFrequency[term] || 0) + terms.filter((t)=>t === term).length;\n            });\n        }\n    }\n    // Calculate average document length\n    stats.averageDocumentLength = totalLength / documents.length;\n    // Calculate most common terms\n    const termEntries = Object.entries(stats.documentFrequency).map(([term, count])=>({\n            term,\n            count,\n            percentage: count / documents.length * 100\n        })).sort((a, b)=>b.count - a.count).slice(0, 20); // Top 20 terms\n    stats.mostCommonTerms = termEntries;\n    return stats;\n}\n/**\n * Save corpus statistics to disk\n * Used by the calculate-corpus-stats script\n */ async function saveCorpusStatistics(stats) {\n    try {\n        const statsDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"corpus_stats\");\n        // Ensure directory exists\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().mkdir(statsDir, {\n            recursive: true\n        });\n        // Save main statistics\n        const mainStats = {\n            totalDocuments: stats.totalDocuments,\n            averageDocumentLength: stats.averageDocumentLength,\n            uniqueTerms: Object.keys(stats.documentFrequency).length,\n            termFrequencyStats: calculateTermFrequencyStats(stats.termFrequency || {}),\n            mostCommonTerms: stats.mostCommonTerms\n        };\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(path__WEBPACK_IMPORTED_MODULE_1___default().join(statsDir, \"corpus_statistics.json\"), JSON.stringify(mainStats, null, 2));\n        // Save document frequency\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(path__WEBPACK_IMPORTED_MODULE_1___default().join(statsDir, \"document_frequency.json\"), JSON.stringify(stats.documentFrequency, null, 2));\n        // Save document lengths\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(path__WEBPACK_IMPORTED_MODULE_1___default().join(statsDir, \"document_lengths.json\"), JSON.stringify(stats.documentLengths, null, 2));\n        console.log(\"Corpus statistics saved to\", statsDir);\n    } catch (error) {\n        console.error(\"Error saving corpus statistics:\", error);\n        throw new Error(\"Failed to save corpus statistics\");\n    }\n}\n/**\n * Calculate statistics about term frequency\n */ function calculateTermFrequencyStats(termFrequency) {\n    const values = Object.values(termFrequency);\n    if (values.length === 0) {\n        return {\n            min: 0,\n            max: 0,\n            avg: 0\n        };\n    }\n    const min = Math.min(...values);\n    const max = Math.max(...values);\n    const avg = values.reduce((sum, val)=>sum + val, 0) / values.length;\n    return {\n        min,\n        max,\n        avg\n    };\n}\n/**\n * Calculate BM25 score for a document given a query\n */ function calculateBM25Score(query, document, corpusStats) {\n    const queryTerms = (0,_tokenization__WEBPACK_IMPORTED_MODULE_2__.tokenize)(query);\n    const docLength = (0,_tokenization__WEBPACK_IMPORTED_MODULE_2__.getDocumentLength)(document.text);\n    const docId = document.id;\n    let score = 0;\n    // If query or document is empty, return 0\n    if (queryTerms.length === 0 || docLength === 0) {\n        return 0;\n    }\n    // Calculate score for each query term\n    for (const term of queryTerms){\n        // Skip if term not in corpus\n        if (!corpusStats.documentFrequency[term]) {\n            continue;\n        }\n        // Calculate term frequency in the document\n        const tf = (0,_tokenization__WEBPACK_IMPORTED_MODULE_2__.countTermFrequency)(document.text)[term] || 0;\n        // Skip if term not in document\n        if (tf === 0) {\n            continue;\n        }\n        // Calculate inverse document frequency\n        const idf = Math.log((corpusStats.totalDocuments - corpusStats.documentFrequency[term] + 0.5) / (corpusStats.documentFrequency[term] + 0.5));\n        // Prevent negative IDF which can happen in certain edge cases\n        const safeIdf = Math.max(0, idf);\n        // Calculate normalized term frequency\n        const normalizedTf = tf * (BM25_K1 + 1) / (tf + BM25_K1 * (1 - BM25_B + BM25_B * (docLength / corpusStats.averageDocumentLength)));\n        // Add this term's contribution to the total score\n        score += normalizedTf * safeIdf;\n    }\n    return score;\n}\n/**\n * Hybrid search combining BM25 and vector similarity\n * @param bm25Score The BM25 score (0-1)\n * @param vectorScore The vector similarity score (0-1)\n * @param alpha Weight for BM25 (between 0 and 1)\n * @returns Combined score\n */ function combineScores(bm25Score, vectorScore, alpha = 0.5) {\n    return alpha * bm25Score + (1 - alpha) * vectorScore;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUIsY0FBYyxHQUFHO1FBQzlDLE9BQU87SUFDVDtJQUVBLHNDQUFzQztJQUN0QyxLQUFLLE1BQU1LLFFBQVErQixXQUFZO1FBQzdCLDZCQUE2QjtRQUM3QixJQUFJLENBQUNELFlBQVk3RCxpQkFBaUIsQ0FBQytCLEtBQUssRUFBRTtZQUN4QztRQUNGO1FBRUEsMkNBQTJDO1FBQzNDLE1BQU1rQyxLQUFLbkYsaUVBQWtCQSxDQUFDOEUsU0FBU25DLElBQUksQ0FBQyxDQUFDTSxLQUFLLElBQUk7UUFFdEQsK0JBQStCO1FBQy9CLElBQUlrQyxPQUFPLEdBQUc7WUFDWjtRQUNGO1FBRUEsdUNBQXVDO1FBQ3ZDLE1BQU1DLE1BQU0vQyxLQUFLSixHQUFHLENBQ2xCLENBQUM4QyxZQUFZckQsY0FBYyxHQUFHcUQsWUFBWTdELGlCQUFpQixDQUFDK0IsS0FBSyxHQUFHLEdBQUUsSUFDckU4QixDQUFBQSxZQUFZN0QsaUJBQWlCLENBQUMrQixLQUFLLEdBQUcsR0FBRTtRQUczQyw4REFBOEQ7UUFDOUQsTUFBTW9DLFVBQVVoRCxLQUFLa0MsR0FBRyxDQUFDLEdBQUdhO1FBRTVCLHNDQUFzQztRQUN0QyxNQUFNRSxlQUNKLEtBQU9wRixDQUFBQSxVQUFVLEtBQ2hCaUYsQ0FBQUEsS0FBS2pGLFVBQVcsS0FBSUMsU0FBU0EsU0FBVXlDLENBQUFBLFlBQVltQyxZQUFZbkQscUJBQXFCLEVBQUM7UUFFeEYsa0RBQWtEO1FBQ2xEc0QsU0FBU0ksZUFBZUQ7SUFDMUI7SUFFQSxPQUFPSDtBQUNUO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU0ssY0FBY0MsU0FBaUIsRUFBRUMsV0FBbUIsRUFBRUMsUUFBZ0IsR0FBRztJQUN2RixPQUFPQSxRQUFRRixZQUFZLENBQUMsSUFBSUUsS0FBSSxJQUFLRDtBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbGVzLWNoYXQtb3BlbmFpLXJhZy8uL3V0aWxzL2JtMjUudHM/ZjkzNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJNMjUgSW1wbGVtZW50YXRpb24gZm9yIGltcHJvdmVkIGRvY3VtZW50IHJldHJpZXZhbFxuICogXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgdGhlIGNvcmUgQk0yNSBpbXBsZW1lbnRhdGlvbiBmb3IgaW1wcm92ZWQgZG9jdW1lbnRcbiAqIHJldHJpZXZhbCBiZXlvbmQgdmVjdG9yLWJhc2VkIHNpbWlsYXJpdHkgc2VhcmNoLiBCTTI1IGlzIGEgd2lkZWx5IHVzZWRcbiAqIHJhbmtpbmcgZnVuY3Rpb24gdGhhdCBzY29yZXMgZG9jdW1lbnRzIGJhc2VkIG9uIHRlcm0gZnJlcXVlbmN5IGFuZFxuICogaW52ZXJzZSBkb2N1bWVudCBmcmVxdWVuY3kuXG4gKi9cblxuaW1wb3J0IGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgdG9rZW5pemUsIGNvdW50VGVybUZyZXF1ZW5jeSwgZ2V0RG9jdW1lbnRMZW5ndGggfSBmcm9tICcuL3Rva2VuaXphdGlvbic7XG5pbXBvcnQgeyBWZWN0b3JTdG9yZUl0ZW0gfSBmcm9tICcuL3ZlY3RvclN0b3JlJztcblxuLy8gSW50ZXJmYWNlIGZvciBhIGRvY3VtZW50XG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50IHtcbiAgaWQ6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xufVxuXG4vLyBCTTI1IHBhcmFtZXRlcnMgKGNhbiBiZSB0dW5lZClcbmV4cG9ydCBjb25zdCBCTTI1X0sxID0gMS4yOyAgLy8gVGVybSBmcmVxdWVuY3kgc2F0dXJhdGlvbiBwYXJhbWV0ZXJcbmV4cG9ydCBjb25zdCBCTTI1X0IgPSAwLjc1OyAgLy8gRG9jdW1lbnQgbGVuZ3RoIG5vcm1hbGl6YXRpb24gcGFyYW1ldGVyXG5cbi8vIENvcnB1cyBzdGF0aXN0aWNzIGZvciBCTTI1IGNhbGN1bGF0aW9uXG5leHBvcnQgaW50ZXJmYWNlIENvcnB1c1N0YXRpc3RpY3Mge1xuICB0b3RhbERvY3VtZW50czogbnVtYmVyO1xuICBhdmVyYWdlRG9jdW1lbnRMZW5ndGg6IG51bWJlcjtcbiAgZG9jdW1lbnRGcmVxdWVuY3k6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gIGRvY3VtZW50TGVuZ3RoczogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgdGVybUZyZXF1ZW5jeT86IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gIG1vc3RDb21tb25UZXJtcz86IEFycmF5PHsgdGVybTogc3RyaW5nLCBjb3VudDogbnVtYmVyLCBwZXJjZW50YWdlOiBudW1iZXIgfT47XG59XG5cbi8qKlxuICogTG9hZCBjb3JwdXMgc3RhdGlzdGljcyBmcm9tIGRpc2tcbiAqIFRoZXNlIHN0YXRpc3RpY3MgYXJlIGNhbGN1bGF0ZWQgYnkgdGhlIGNhbGN1bGF0ZS1jb3JwdXMtc3RhdHMgc2NyaXB0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkQ29ycHVzU3RhdGlzdGljcygpOiBQcm9taXNlPENvcnB1c1N0YXRpc3RpY3M+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdGF0c0RpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnZGF0YScsICdjb3JwdXNfc3RhdHMnKTtcbiAgICBjb25zdCBzdGF0c1BhdGggPSBwYXRoLmpvaW4oc3RhdHNEaXIsICdjb3JwdXNfc3RhdGlzdGljcy5qc29uJyk7XG4gICAgY29uc3QgZGZQYXRoID0gcGF0aC5qb2luKHN0YXRzRGlyLCAnZG9jdW1lbnRfZnJlcXVlbmN5Lmpzb24nKTtcbiAgICBjb25zdCBkb2NMZW5ndGhzUGF0aCA9IHBhdGguam9pbihzdGF0c0RpciwgJ2RvY3VtZW50X2xlbmd0aHMuanNvbicpO1xuICAgIFxuICAgIC8vIExvYWQgbWFpbiBzdGF0aXN0aWNzXG4gICAgY29uc3Qgc3RhdHNEYXRhID0gYXdhaXQgZnMucmVhZEZpbGUoc3RhdHNQYXRoLCAndXRmOCcpO1xuICAgIGNvbnN0IHN0YXRzID0gSlNPTi5wYXJzZShzdGF0c0RhdGEpIGFzIENvcnB1c1N0YXRpc3RpY3M7XG4gICAgXG4gICAgLy8gTG9hZCBkb2N1bWVudCBmcmVxdWVuY3lcbiAgICBjb25zdCBkZkRhdGEgPSBhd2FpdCBmcy5yZWFkRmlsZShkZlBhdGgsICd1dGY4Jyk7XG4gICAgc3RhdHMuZG9jdW1lbnRGcmVxdWVuY3kgPSBKU09OLnBhcnNlKGRmRGF0YSk7XG4gICAgXG4gICAgLy8gTG9hZCBkb2N1bWVudCBsZW5ndGhzXG4gICAgY29uc3QgZG9jTGVuZ3Roc0RhdGEgPSBhd2FpdCBmcy5yZWFkRmlsZShkb2NMZW5ndGhzUGF0aCwgJ3V0ZjgnKTtcbiAgICBzdGF0cy5kb2N1bWVudExlbmd0aHMgPSBKU09OLnBhcnNlKGRvY0xlbmd0aHNEYXRhKTtcbiAgICBcbiAgICByZXR1cm4gc3RhdHM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBjb3JwdXMgc3RhdGlzdGljczonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCBjb3JwdXMgc3RhdGlzdGljcycpO1xuICB9XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIGNvcnB1cyBzdGF0aXN0aWNzIGZyb20gdmVjdG9yIHN0b3JlXG4gKiBVc2VkIGJ5IHRoZSBjYWxjdWxhdGUtY29ycHVzLXN0YXRzIHNjcmlwdFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2FsY3VsYXRlQ29ycHVzU3RhdGlzdGljcyhkb2N1bWVudHM6IFZlY3RvclN0b3JlSXRlbVtdKTogUHJvbWlzZTxDb3JwdXNTdGF0aXN0aWNzPiB7XG4gIC8vIEluaXRpYWxpemUgc3RhdGlzdGljc1xuICBjb25zdCBzdGF0czogQ29ycHVzU3RhdGlzdGljcyA9IHtcbiAgICB0b3RhbERvY3VtZW50czogZG9jdW1lbnRzLmxlbmd0aCxcbiAgICBhdmVyYWdlRG9jdW1lbnRMZW5ndGg6IDAsXG4gICAgZG9jdW1lbnRGcmVxdWVuY3k6IHt9LFxuICAgIGRvY3VtZW50TGVuZ3Roczoge30sXG4gICAgdGVybUZyZXF1ZW5jeToge30sXG4gICAgbW9zdENvbW1vblRlcm1zOiBbXVxuICB9O1xuICBcbiAgLy8gUHJvY2VzcyBpbiBiYXRjaGVzIHRvIGF2b2lkIG1lbW9yeSBpc3N1ZXNcbiAgY29uc3QgYmF0Y2hTaXplID0gMTAwO1xuICBsZXQgdG90YWxMZW5ndGggPSAwO1xuICBcbiAgY29uc29sZS5sb2coYFByb2Nlc3NpbmcgJHtkb2N1bWVudHMubGVuZ3RofSBkb2N1bWVudHMgaW4gaW5jcmVtZW50cyBvZiAke2JhdGNoU2l6ZX0uLi5gKTtcbiAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jdW1lbnRzLmxlbmd0aDsgaSArPSBiYXRjaFNpemUpIHtcbiAgICBjb25zdCBiYXRjaCA9IGRvY3VtZW50cy5zbGljZShpLCBpICsgYmF0Y2hTaXplKTtcbiAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyBkb2N1bWVudHMgJHtpICsgMX0gdG8gJHtNYXRoLm1pbihpICsgYmF0Y2hTaXplLCBkb2N1bWVudHMubGVuZ3RoKX0uLi5gKTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGRvYyBvZiBiYXRjaCkge1xuICAgICAgY29uc3QgZG9jSWQgPSBkb2MubWV0YWRhdGE/LnNvdXJjZSB8fCBgZG9jXyR7aX1gO1xuICAgICAgY29uc3QgdGV4dCA9IGRvYy50ZXh0IHx8ICcnO1xuICAgICAgXG4gICAgICAvLyBDYWxjdWxhdGUgZG9jdW1lbnQgbGVuZ3RoIChudW1iZXIgb2YgdGVybXMpXG4gICAgICBjb25zdCBkb2NMZW5ndGggPSBnZXREb2N1bWVudExlbmd0aCh0ZXh0KTtcbiAgICAgIHN0YXRzLmRvY3VtZW50TGVuZ3Roc1tkb2NJZF0gPSBkb2NMZW5ndGg7XG4gICAgICB0b3RhbExlbmd0aCArPSBkb2NMZW5ndGg7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGF0ZSB0ZXJtIGZyZXF1ZW5jaWVzIGZvciB0aGUgZG9jdW1lbnRcbiAgICAgIGNvbnN0IHRlcm1zID0gdG9rZW5pemUodGV4dCk7XG4gICAgICBjb25zdCB1bmlxdWVUZXJtcyA9IG5ldyBTZXQodGVybXMpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgZG9jdW1lbnQgZnJlcXVlbmN5IChudW1iZXIgb2YgZG9jdW1lbnRzIGNvbnRhaW5pbmcgZWFjaCB0ZXJtKVxuICAgICAgdW5pcXVlVGVybXMuZm9yRWFjaCh0ZXJtID0+IHtcbiAgICAgICAgc3RhdHMuZG9jdW1lbnRGcmVxdWVuY3lbdGVybV0gPSAoc3RhdHMuZG9jdW1lbnRGcmVxdWVuY3lbdGVybV0gfHwgMCkgKyAxO1xuICAgICAgICBzdGF0cy50ZXJtRnJlcXVlbmN5IVt0ZXJtXSA9IChzdGF0cy50ZXJtRnJlcXVlbmN5IVt0ZXJtXSB8fCAwKSArIHRlcm1zLmZpbHRlcih0ID0+IHQgPT09IHRlcm0pLmxlbmd0aDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gQ2FsY3VsYXRlIGF2ZXJhZ2UgZG9jdW1lbnQgbGVuZ3RoXG4gIHN0YXRzLmF2ZXJhZ2VEb2N1bWVudExlbmd0aCA9IHRvdGFsTGVuZ3RoIC8gZG9jdW1lbnRzLmxlbmd0aDtcbiAgXG4gIC8vIENhbGN1bGF0ZSBtb3N0IGNvbW1vbiB0ZXJtc1xuICBjb25zdCB0ZXJtRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHN0YXRzLmRvY3VtZW50RnJlcXVlbmN5KVxuICAgIC5tYXAoKFt0ZXJtLCBjb3VudF0pID0+ICh7IHRlcm0sIGNvdW50LCBwZXJjZW50YWdlOiAoY291bnQgLyBkb2N1bWVudHMubGVuZ3RoKSAqIDEwMCB9KSlcbiAgICAuc29ydCgoYSwgYikgPT4gYi5jb3VudCAtIGEuY291bnQpXG4gICAgLnNsaWNlKDAsIDIwKTsgLy8gVG9wIDIwIHRlcm1zXG4gIFxuICBzdGF0cy5tb3N0Q29tbW9uVGVybXMgPSB0ZXJtRW50cmllcztcbiAgXG4gIHJldHVybiBzdGF0cztcbn1cblxuLyoqXG4gKiBTYXZlIGNvcnB1cyBzdGF0aXN0aWNzIHRvIGRpc2tcbiAqIFVzZWQgYnkgdGhlIGNhbGN1bGF0ZS1jb3JwdXMtc3RhdHMgc2NyaXB0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlQ29ycHVzU3RhdGlzdGljcyhzdGF0czogQ29ycHVzU3RhdGlzdGljcyk6IFByb21pc2U8dm9pZD4ge1xuICB0cnkge1xuICAgIGNvbnN0IHN0YXRzRGlyID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdkYXRhJywgJ2NvcnB1c19zdGF0cycpO1xuICAgIFxuICAgIC8vIEVuc3VyZSBkaXJlY3RvcnkgZXhpc3RzXG4gICAgYXdhaXQgZnMubWtkaXIoc3RhdHNEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIFxuICAgIC8vIFNhdmUgbWFpbiBzdGF0aXN0aWNzXG4gICAgY29uc3QgbWFpblN0YXRzID0ge1xuICAgICAgdG90YWxEb2N1bWVudHM6IHN0YXRzLnRvdGFsRG9jdW1lbnRzLFxuICAgICAgYXZlcmFnZURvY3VtZW50TGVuZ3RoOiBzdGF0cy5hdmVyYWdlRG9jdW1lbnRMZW5ndGgsXG4gICAgICB1bmlxdWVUZXJtczogT2JqZWN0LmtleXMoc3RhdHMuZG9jdW1lbnRGcmVxdWVuY3kpLmxlbmd0aCxcbiAgICAgIHRlcm1GcmVxdWVuY3lTdGF0czogY2FsY3VsYXRlVGVybUZyZXF1ZW5jeVN0YXRzKHN0YXRzLnRlcm1GcmVxdWVuY3kgfHwge30pLFxuICAgICAgbW9zdENvbW1vblRlcm1zOiBzdGF0cy5tb3N0Q29tbW9uVGVybXNcbiAgICB9O1xuICAgIFxuICAgIGF3YWl0IGZzLndyaXRlRmlsZShcbiAgICAgIHBhdGguam9pbihzdGF0c0RpciwgJ2NvcnB1c19zdGF0aXN0aWNzLmpzb24nKSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KG1haW5TdGF0cywgbnVsbCwgMilcbiAgICApO1xuICAgIFxuICAgIC8vIFNhdmUgZG9jdW1lbnQgZnJlcXVlbmN5XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKFxuICAgICAgcGF0aC5qb2luKHN0YXRzRGlyLCAnZG9jdW1lbnRfZnJlcXVlbmN5Lmpzb24nKSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHN0YXRzLmRvY3VtZW50RnJlcXVlbmN5LCBudWxsLCAyKVxuICAgICk7XG4gICAgXG4gICAgLy8gU2F2ZSBkb2N1bWVudCBsZW5ndGhzXG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKFxuICAgICAgcGF0aC5qb2luKHN0YXRzRGlyLCAnZG9jdW1lbnRfbGVuZ3Rocy5qc29uJyksXG4gICAgICBKU09OLnN0cmluZ2lmeShzdGF0cy5kb2N1bWVudExlbmd0aHMsIG51bGwsIDIpXG4gICAgKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygnQ29ycHVzIHN0YXRpc3RpY3Mgc2F2ZWQgdG8nLCBzdGF0c0Rpcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIGNvcnB1cyBzdGF0aXN0aWNzOicsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGNvcnB1cyBzdGF0aXN0aWNzJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgc3RhdGlzdGljcyBhYm91dCB0ZXJtIGZyZXF1ZW5jeVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVUZXJtRnJlcXVlbmN5U3RhdHModGVybUZyZXF1ZW5jeTogUmVjb3JkPHN0cmluZywgbnVtYmVyPik6IHsgbWluOiBudW1iZXIsIG1heDogbnVtYmVyLCBhdmc6IG51bWJlciB9IHtcbiAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyh0ZXJtRnJlcXVlbmN5KTtcbiAgXG4gIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHsgbWluOiAwLCBtYXg6IDAsIGF2ZzogMCB9O1xuICB9XG4gIFxuICBjb25zdCBtaW4gPSBNYXRoLm1pbiguLi52YWx1ZXMpO1xuICBjb25zdCBtYXggPSBNYXRoLm1heCguLi52YWx1ZXMpO1xuICBjb25zdCBhdmcgPSB2YWx1ZXMucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKSAvIHZhbHVlcy5sZW5ndGg7XG4gIFxuICByZXR1cm4geyBtaW4sIG1heCwgYXZnIH07XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIEJNMjUgc2NvcmUgZm9yIGEgZG9jdW1lbnQgZ2l2ZW4gYSBxdWVyeVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQk0yNVNjb3JlKHF1ZXJ5OiBzdHJpbmcsIGRvY3VtZW50OiBEb2N1bWVudCwgY29ycHVzU3RhdHM6IENvcnB1c1N0YXRpc3RpY3MpOiBudW1iZXIge1xuICBjb25zdCBxdWVyeVRlcm1zID0gdG9rZW5pemUocXVlcnkpO1xuICBjb25zdCBkb2NMZW5ndGggPSBnZXREb2N1bWVudExlbmd0aChkb2N1bWVudC50ZXh0KTtcbiAgY29uc3QgZG9jSWQgPSBkb2N1bWVudC5pZDtcbiAgXG4gIGxldCBzY29yZSA9IDA7XG4gIFxuICAvLyBJZiBxdWVyeSBvciBkb2N1bWVudCBpcyBlbXB0eSwgcmV0dXJuIDBcbiAgaWYgKHF1ZXJ5VGVybXMubGVuZ3RoID09PSAwIHx8IGRvY0xlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIFxuICAvLyBDYWxjdWxhdGUgc2NvcmUgZm9yIGVhY2ggcXVlcnkgdGVybVxuICBmb3IgKGNvbnN0IHRlcm0gb2YgcXVlcnlUZXJtcykge1xuICAgIC8vIFNraXAgaWYgdGVybSBub3QgaW4gY29ycHVzXG4gICAgaWYgKCFjb3JwdXNTdGF0cy5kb2N1bWVudEZyZXF1ZW5jeVt0ZXJtXSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIFxuICAgIC8vIENhbGN1bGF0ZSB0ZXJtIGZyZXF1ZW5jeSBpbiB0aGUgZG9jdW1lbnRcbiAgICBjb25zdCB0ZiA9IGNvdW50VGVybUZyZXF1ZW5jeShkb2N1bWVudC50ZXh0KVt0ZXJtXSB8fCAwO1xuICAgIFxuICAgIC8vIFNraXAgaWYgdGVybSBub3QgaW4gZG9jdW1lbnRcbiAgICBpZiAodGYgPT09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgaW52ZXJzZSBkb2N1bWVudCBmcmVxdWVuY3lcbiAgICBjb25zdCBpZGYgPSBNYXRoLmxvZyhcbiAgICAgIChjb3JwdXNTdGF0cy50b3RhbERvY3VtZW50cyAtIGNvcnB1c1N0YXRzLmRvY3VtZW50RnJlcXVlbmN5W3Rlcm1dICsgMC41KSAvXG4gICAgICAoY29ycHVzU3RhdHMuZG9jdW1lbnRGcmVxdWVuY3lbdGVybV0gKyAwLjUpXG4gICAgKTtcbiAgICBcbiAgICAvLyBQcmV2ZW50IG5lZ2F0aXZlIElERiB3aGljaCBjYW4gaGFwcGVuIGluIGNlcnRhaW4gZWRnZSBjYXNlc1xuICAgIGNvbnN0IHNhZmVJZGYgPSBNYXRoLm1heCgwLCBpZGYpO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBub3JtYWxpemVkIHRlcm0gZnJlcXVlbmN5XG4gICAgY29uc3Qgbm9ybWFsaXplZFRmID0gXG4gICAgICAodGYgKiAoQk0yNV9LMSArIDEpKSAvIFxuICAgICAgKHRmICsgQk0yNV9LMSAqICgxIC0gQk0yNV9CICsgQk0yNV9CICogKGRvY0xlbmd0aCAvIGNvcnB1c1N0YXRzLmF2ZXJhZ2VEb2N1bWVudExlbmd0aCkpKTtcbiAgICBcbiAgICAvLyBBZGQgdGhpcyB0ZXJtJ3MgY29udHJpYnV0aW9uIHRvIHRoZSB0b3RhbCBzY29yZVxuICAgIHNjb3JlICs9IG5vcm1hbGl6ZWRUZiAqIHNhZmVJZGY7XG4gIH1cbiAgXG4gIHJldHVybiBzY29yZTtcbn1cblxuLyoqXG4gKiBIeWJyaWQgc2VhcmNoIGNvbWJpbmluZyBCTTI1IGFuZCB2ZWN0b3Igc2ltaWxhcml0eVxuICogQHBhcmFtIGJtMjVTY29yZSBUaGUgQk0yNSBzY29yZSAoMC0xKVxuICogQHBhcmFtIHZlY3RvclNjb3JlIFRoZSB2ZWN0b3Igc2ltaWxhcml0eSBzY29yZSAoMC0xKVxuICogQHBhcmFtIGFscGhhIFdlaWdodCBmb3IgQk0yNSAoYmV0d2VlbiAwIGFuZCAxKVxuICogQHJldHVybnMgQ29tYmluZWQgc2NvcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVTY29yZXMoYm0yNVNjb3JlOiBudW1iZXIsIHZlY3RvclNjb3JlOiBudW1iZXIsIGFscGhhOiBudW1iZXIgPSAwLjUpOiBudW1iZXIge1xuICByZXR1cm4gYWxwaGEgKiBibTI1U2NvcmUgKyAoMSAtIGFscGhhKSAqIHZlY3RvclNjb3JlO1xufSAiXSwibmFtZXMiOlsiZnMiLCJwYXRoIiwidG9rZW5pemUiLCJjb3VudFRlcm1GcmVxdWVuY3kiLCJnZXREb2N1bWVudExlbmd0aCIsIkJNMjVfSzEiLCJCTTI1X0IiLCJsb2FkQ29ycHVzU3RhdGlzdGljcyIsInN0YXRzRGlyIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJzdGF0c1BhdGgiLCJkZlBhdGgiLCJkb2NMZW5ndGhzUGF0aCIsInN0YXRzRGF0YSIsInJlYWRGaWxlIiwic3RhdHMiLCJKU09OIiwicGFyc2UiLCJkZkRhdGEiLCJkb2N1bWVudEZyZXF1ZW5jeSIsImRvY0xlbmd0aHNEYXRhIiwiZG9jdW1lbnRMZW5ndGhzIiwiZXJyb3IiLCJjb25zb2xlIiwiRXJyb3IiLCJjYWxjdWxhdGVDb3JwdXNTdGF0aXN0aWNzIiwiZG9jdW1lbnRzIiwidG90YWxEb2N1bWVudHMiLCJsZW5ndGgiLCJhdmVyYWdlRG9jdW1lbnRMZW5ndGgiLCJ0ZXJtRnJlcXVlbmN5IiwibW9zdENvbW1vblRlcm1zIiwiYmF0Y2hTaXplIiwidG90YWxMZW5ndGgiLCJsb2ciLCJpIiwiYmF0Y2giLCJzbGljZSIsIk1hdGgiLCJtaW4iLCJkb2MiLCJkb2NJZCIsIm1ldGFkYXRhIiwic291cmNlIiwidGV4dCIsImRvY0xlbmd0aCIsInRlcm1zIiwidW5pcXVlVGVybXMiLCJTZXQiLCJmb3JFYWNoIiwidGVybSIsImZpbHRlciIsInQiLCJ0ZXJtRW50cmllcyIsIk9iamVjdCIsImVudHJpZXMiLCJtYXAiLCJjb3VudCIsInBlcmNlbnRhZ2UiLCJzb3J0IiwiYSIsImIiLCJzYXZlQ29ycHVzU3RhdGlzdGljcyIsIm1rZGlyIiwicmVjdXJzaXZlIiwibWFpblN0YXRzIiwia2V5cyIsInRlcm1GcmVxdWVuY3lTdGF0cyIsImNhbGN1bGF0ZVRlcm1GcmVxdWVuY3lTdGF0cyIsIndyaXRlRmlsZSIsInN0cmluZ2lmeSIsInZhbHVlcyIsIm1heCIsImF2ZyIsInJlZHVjZSIsInN1bSIsInZhbCIsImNhbGN1bGF0ZUJNMjVTY29yZSIsInF1ZXJ5IiwiZG9jdW1lbnQiLCJjb3JwdXNTdGF0cyIsInF1ZXJ5VGVybXMiLCJpZCIsInNjb3JlIiwidGYiLCJpZGYiLCJzYWZlSWRmIiwibm9ybWFsaXplZFRmIiwiY29tYmluZVNjb3JlcyIsImJtMjVTY29yZSIsInZlY3RvclNjb3JlIiwiYWxwaGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./utils/bm25.ts\n");

/***/ }),

/***/ "(api)/./utils/caching.ts":
/*!**************************!*\
  !*** ./utils/caching.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheResult: () => (/* binding */ cacheResult),\n/* harmony export */   clearCache: () => (/* binding */ clearCache),\n/* harmony export */   generateCacheKey: () => (/* binding */ generateCacheKey),\n/* harmony export */   getCacheStats: () => (/* binding */ getCacheStats),\n/* harmony export */   getCachedResult: () => (/* binding */ getCachedResult)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Simple caching utilities for the RAG system\n * \n * Provides in-memory caching functionality for query results\n * to improve performance for repeated queries.\n */ \n// Simple in-memory cache\nconst cache = {};\n/**\n * Generate a cache key for a query\n */ function generateCacheKey(query) {\n    return `query:${crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha256\").update(query).digest(\"hex\")}`;\n}\n/**\n * Check if a query result is cached\n */ async function getCachedResult(query) {\n    try {\n        const cacheKey = generateCacheKey(query);\n        const entry = cache[cacheKey];\n        if (entry && entry.expiresAt > Date.now()) {\n            console.log(\"Cache hit for query:\", query);\n            return entry.data;\n        }\n        if (entry) {\n            // Expired entry, clean up\n            console.log(\"Cache entry expired for query:\", query);\n            delete cache[cacheKey];\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error retrieving from cache:\", error);\n        return null;\n    }\n}\n/**\n * Cache a query result\n */ async function cacheResult(query, result, ttlSeconds = 3600) {\n    try {\n        const cacheKey = generateCacheKey(query);\n        const expiresAt = Date.now() + ttlSeconds * 1000;\n        cache[cacheKey] = {\n            data: result,\n            expiresAt\n        };\n        console.log(`Cached result for query \"${query}\" (expires in ${ttlSeconds}s)`);\n        // Cleanup old entries every 100 cache operations\n        if (Math.random() < 0.01) {\n            cleanupExpiredEntries();\n        }\n    } catch (error) {\n        console.error(\"Error caching result:\", error);\n    }\n}\n/**\n * Remove all expired entries from the cache\n */ function cleanupExpiredEntries() {\n    const now = Date.now();\n    let cleanedCount = 0;\n    Object.keys(cache).forEach((key)=>{\n        if (cache[key].expiresAt < now) {\n            delete cache[key];\n            cleanedCount++;\n        }\n    });\n    if (cleanedCount > 0) {\n        console.log(`Cleaned up ${cleanedCount} expired cache entries`);\n    }\n}\n/**\n * Get cache statistics\n */ function getCacheStats() {\n    const now = Date.now();\n    const keys = Object.keys(cache);\n    const activeEntries = keys.filter((key)=>cache[key].expiresAt >= now).length;\n    return {\n        size: keys.length,\n        activeEntries,\n        expiredEntries: keys.length - activeEntries\n    };\n}\n/**\n * Clear the entire cache\n */ function clearCache() {\n    const count = Object.keys(cache).length;\n    Object.keys(cache).forEach((key)=>delete cache[key]);\n    console.log(`Cleared ${count} entries from cache`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q25EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FsZXMtY2hhdC1vcGVuYWktcmFnLy4vdXRpbHMvY2FjaGluZy50cz8xNmJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2ltcGxlIGNhY2hpbmcgdXRpbGl0aWVzIGZvciB0aGUgUkFHIHN5c3RlbVxuICogXG4gKiBQcm92aWRlcyBpbi1tZW1vcnkgY2FjaGluZyBmdW5jdGlvbmFsaXR5IGZvciBxdWVyeSByZXN1bHRzXG4gKiB0byBpbXByb3ZlIHBlcmZvcm1hbmNlIGZvciByZXBlYXRlZCBxdWVyaWVzLlxuICovXG5cbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuLy8gSW4tbWVtb3J5IGNhY2hlIHN0b3JhZ2VcbmludGVyZmFjZSBDYWNoZUVudHJ5IHtcbiAgZGF0YTogYW55O1xuICBleHBpcmVzQXQ6IG51bWJlcjtcbn1cblxuLy8gU2ltcGxlIGluLW1lbW9yeSBjYWNoZVxuY29uc3QgY2FjaGU6IFJlY29yZDxzdHJpbmcsIENhY2hlRW50cnk+ID0ge307XG5cbi8qKlxuICogR2VuZXJhdGUgYSBjYWNoZSBrZXkgZm9yIGEgcXVlcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQ2FjaGVLZXkocXVlcnk6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgcXVlcnk6JHtjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHF1ZXJ5KS5kaWdlc3QoJ2hleCcpfWA7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBxdWVyeSByZXN1bHQgaXMgY2FjaGVkXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYWNoZWRSZXN1bHQocXVlcnk6IHN0cmluZyk6IFByb21pc2U8YW55IHwgbnVsbD4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gZ2VuZXJhdGVDYWNoZUtleShxdWVyeSk7XG4gICAgY29uc3QgZW50cnkgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgXG4gICAgaWYgKGVudHJ5ICYmIGVudHJ5LmV4cGlyZXNBdCA+IERhdGUubm93KCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDYWNoZSBoaXQgZm9yIHF1ZXJ5OicsIHF1ZXJ5KTtcbiAgICAgIHJldHVybiBlbnRyeS5kYXRhO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIC8vIEV4cGlyZWQgZW50cnksIGNsZWFuIHVwXG4gICAgICBjb25zb2xlLmxvZygnQ2FjaGUgZW50cnkgZXhwaXJlZCBmb3IgcXVlcnk6JywgcXVlcnkpO1xuICAgICAgZGVsZXRlIGNhY2hlW2NhY2hlS2V5XTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmV0cmlldmluZyBmcm9tIGNhY2hlOicsIGVycm9yKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIENhY2hlIGEgcXVlcnkgcmVzdWx0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYWNoZVJlc3VsdChcbiAgcXVlcnk6IHN0cmluZywgXG4gIHJlc3VsdDogYW55LCBcbiAgdHRsU2Vjb25kczogbnVtYmVyID0gMzYwMFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBnZW5lcmF0ZUNhY2hlS2V5KHF1ZXJ5KTtcbiAgICBjb25zdCBleHBpcmVzQXQgPSBEYXRlLm5vdygpICsgKHR0bFNlY29uZHMgKiAxMDAwKTtcbiAgICBcbiAgICBjYWNoZVtjYWNoZUtleV0gPSB7XG4gICAgICBkYXRhOiByZXN1bHQsXG4gICAgICBleHBpcmVzQXRcbiAgICB9O1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBDYWNoZWQgcmVzdWx0IGZvciBxdWVyeSBcIiR7cXVlcnl9XCIgKGV4cGlyZXMgaW4gJHt0dGxTZWNvbmRzfXMpYCk7XG4gICAgXG4gICAgLy8gQ2xlYW51cCBvbGQgZW50cmllcyBldmVyeSAxMDAgY2FjaGUgb3BlcmF0aW9uc1xuICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC4wMSkge1xuICAgICAgY2xlYW51cEV4cGlyZWRFbnRyaWVzKCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNhY2hpbmcgcmVzdWx0OicsIGVycm9yKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBhbGwgZXhwaXJlZCBlbnRyaWVzIGZyb20gdGhlIGNhY2hlXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBFeHBpcmVkRW50cmllcygpOiB2b2lkIHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgbGV0IGNsZWFuZWRDb3VudCA9IDA7XG4gIFxuICBPYmplY3Qua2V5cyhjYWNoZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChjYWNoZVtrZXldLmV4cGlyZXNBdCA8IG5vdykge1xuICAgICAgZGVsZXRlIGNhY2hlW2tleV07XG4gICAgICBjbGVhbmVkQ291bnQrKztcbiAgICB9XG4gIH0pO1xuICBcbiAgaWYgKGNsZWFuZWRDb3VudCA+IDApIHtcbiAgICBjb25zb2xlLmxvZyhgQ2xlYW5lZCB1cCAke2NsZWFuZWRDb3VudH0gZXhwaXJlZCBjYWNoZSBlbnRyaWVzYCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgY2FjaGUgc3RhdGlzdGljc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGVTdGF0cygpOiB7XG4gIHNpemU6IG51bWJlcjtcbiAgYWN0aXZlRW50cmllczogbnVtYmVyO1xuICBleHBpcmVkRW50cmllczogbnVtYmVyO1xufSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjYWNoZSk7XG4gIGNvbnN0IGFjdGl2ZUVudHJpZXMgPSBrZXlzLmZpbHRlcihrZXkgPT4gY2FjaGVba2V5XS5leHBpcmVzQXQgPj0gbm93KS5sZW5ndGg7XG4gIFxuICByZXR1cm4ge1xuICAgIHNpemU6IGtleXMubGVuZ3RoLFxuICAgIGFjdGl2ZUVudHJpZXMsXG4gICAgZXhwaXJlZEVudHJpZXM6IGtleXMubGVuZ3RoIC0gYWN0aXZlRW50cmllc1xuICB9O1xufVxuXG4vKipcbiAqIENsZWFyIHRoZSBlbnRpcmUgY2FjaGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQ2FjaGUoKTogdm9pZCB7XG4gIGNvbnN0IGNvdW50ID0gT2JqZWN0LmtleXMoY2FjaGUpLmxlbmd0aDtcbiAgT2JqZWN0LmtleXMoY2FjaGUpLmZvckVhY2goa2V5ID0+IGRlbGV0ZSBjYWNoZVtrZXldKTtcbiAgY29uc29sZS5sb2coYENsZWFyZWQgJHtjb3VudH0gZW50cmllcyBmcm9tIGNhY2hlYCk7XG59ICJdLCJuYW1lcyI6WyJjcnlwdG8iLCJjYWNoZSIsImdlbmVyYXRlQ2FjaGVLZXkiLCJxdWVyeSIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJnZXRDYWNoZWRSZXN1bHQiLCJjYWNoZUtleSIsImVudHJ5IiwiZXhwaXJlc0F0IiwiRGF0ZSIsIm5vdyIsImNvbnNvbGUiLCJsb2ciLCJkYXRhIiwiZXJyb3IiLCJjYWNoZVJlc3VsdCIsInJlc3VsdCIsInR0bFNlY29uZHMiLCJNYXRoIiwicmFuZG9tIiwiY2xlYW51cEV4cGlyZWRFbnRyaWVzIiwiY2xlYW5lZENvdW50IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJnZXRDYWNoZVN0YXRzIiwiYWN0aXZlRW50cmllcyIsImZpbHRlciIsImxlbmd0aCIsInNpemUiLCJleHBpcmVkRW50cmllcyIsImNsZWFyQ2FjaGUiLCJjb3VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./utils/caching.ts\n");

/***/ }),

/***/ "(api)/./utils/documentProcessing.ts":
/*!*************************************!*\
  !*** ./utils/documentProcessing.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectStructuredInfo: () => (/* binding */ detectStructuredInfo),\n/* harmony export */   extractText: () => (/* binding */ extractText),\n/* harmony export */   splitIntoChunks: () => (/* binding */ splitIntoChunks)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mammoth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mammoth */ \"mammoth\");\n/* harmony import */ var mammoth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mammoth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pdf-parse */ \"pdf-parse\");\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pdf_parse__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n/**\n * Extract text content from various document formats\n * @param filePath Path to the file\n * @param mimetype MIME type of the file\n * @returns Extracted text content\n */ async function extractText(filePath, mimetype) {\n    try {\n        if (mimetype === \"application/pdf\") {\n            const dataBuffer = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath);\n            const result = await pdf_parse__WEBPACK_IMPORTED_MODULE_2___default()(dataBuffer);\n            return result.text;\n        } else if (mimetype === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n            const result = await extractTextFromDoc(filePath);\n            return result;\n        } else if (mimetype === \"text/plain\") {\n            return fs__WEBPACK_IMPORTED_MODULE_0___default().promises.readFile(filePath, \"utf-8\");\n        } else {\n            throw new Error(`Unsupported file type: ${mimetype}`);\n        }\n    } catch (error) {\n        console.error(\"Error extracting text:\", error);\n        throw new Error(`Failed to extract text from document: ${error instanceof Error ? error.message : String(error)}`);\n    }\n}\nasync function extractTextFromDoc(filePath) {\n    try {\n        // Read the file as a buffer\n        const fileBuffer = await fs__WEBPACK_IMPORTED_MODULE_0___default().promises.readFile(filePath);\n        // Use the buffer directly instead of the path\n        const result = await mammoth__WEBPACK_IMPORTED_MODULE_1___default().extractRawText(fileBuffer);\n        return result.value;\n    } catch (error) {\n        console.error(\"Error extracting text from DOCX:\", error);\n        throw new Error(`Failed to extract text from DOCX file: ${error.message || \"Unknown error\"}`);\n    }\n}\n/**\n * Detect if text contains structured information like company values, investors,\n * leadership, pricing, or sales-related content\n */ function detectStructuredInfo(text) {\n    const textLower = text.toLowerCase();\n    // Detect company values\n    const hasCompanyValues = textLower.includes(\"our values\") || textLower.includes(\"company values\") || textLower.includes(\"core values\") || textLower.includes(\"our culture\") || textLower.includes(\"culture\") || textLower.includes(\"mission statement\") || textLower.includes(\"vision statement\") || textLower.includes(\"what we believe\") || textLower.includes(\"our beliefs\") || textLower.includes(\"our mission\") || textLower.includes(\"our vision\");\n    // Detect investor information\n    const hasInvestors = textLower.includes(\"investor\") || textLower.includes(\"investors\") || textLower.includes(\"funding\") || textLower.includes(\"backed by\") || textLower.includes(\"investment\") || textLower.includes(\"venture capital\") || textLower.includes(\"series \") || textLower.includes(\"financing\") || textLower.includes(\"raised\");\n    // Detect leadership information\n    const hasLeadership = textLower.includes(\"founder\") || textLower.includes(\"founders\") || textLower.includes(\"ceo\") || textLower.includes(\"cto\") || textLower.includes(\"cfo\") || textLower.includes(\"chief\") || textLower.includes(\"president\") || textLower.includes(\"executive\") || textLower.includes(\"director\") || textLower.includes(\"head of\") || textLower.includes(\"lead\") || textLower.includes(\"manager\") || textLower.includes(\"management team\") || textLower.includes(\"leadership team\");\n    // Detect pricing information\n    const hasPricing = textLower.includes(\"pricing\") || textLower.includes(\"price\") || textLower.includes(\"cost\") || textLower.includes(\"subscription\") || textLower.includes(\"tier\") || textLower.includes(\"plan\") || textLower.includes(\"package\") || textLower.includes(\"fee\") || textLower.includes(\"$ \") || textLower.includes(\"dollar\") || textLower.includes(\"per month\") || textLower.includes(\"per year\") || textLower.includes(\"monthly\") || textLower.includes(\"annually\") || textLower.includes(\"free trial\");\n    // Detect product features\n    const hasProductFeatures = textLower.includes(\"feature\") || textLower.includes(\"benefits\") || textLower.includes(\"capabilities\") || textLower.includes(\"functionality\") || textLower.includes(\"module\") || textLower.includes(\"component\") || textLower.includes(\"how it works\") || textLower.includes(\"what it does\") || textLower.includes(\"our product\") || textLower.includes(\"platform\");\n    // Detect sales-specific information\n    const hasSalesInfo = textLower.includes(\"sales pitch\") || textLower.includes(\"pitch deck\") || textLower.includes(\"value proposition\") || textLower.includes(\"why choose us\") || textLower.includes(\"competitor\") || textLower.includes(\"vs.\") || textLower.includes(\"versus\") || textLower.includes(\"comparison\") || textLower.includes(\"case study\") || textLower.includes(\"success story\") || textLower.includes(\"testimonial\") || textLower.includes(\"roi\") || textLower.includes(\"return on investment\");\n    return {\n        hasCompanyValues,\n        hasInvestors,\n        hasLeadership,\n        hasPricing,\n        hasProductFeatures,\n        hasSalesInfo\n    };\n}\n/**\n * Split text into chunks of approximately the specified size\n * Enhanced to preserve context and structured information\n * @param text Text to split\n * @param chunkSize Target size for each chunk\n * @param source Optional source metadata for context-aware chunking\n * @returns Array of text chunks with metadata\n */ function splitIntoChunks(text, chunkSize = 500, source) {\n    // Remove excess whitespace\n    const cleanedText = text.replace(/\\s+/g, \" \").trim();\n    if (cleanedText.length <= chunkSize) {\n        // For small text, check if it contains structured information\n        const structuredInfo = detectStructuredInfo(cleanedText);\n        const metadata = {};\n        if (structuredInfo.hasCompanyValues || structuredInfo.hasInvestors || structuredInfo.hasLeadership || structuredInfo.hasPricing || structuredInfo.hasProductFeatures || structuredInfo.hasSalesInfo) {\n            metadata.isStructured = true;\n            if (structuredInfo.hasCompanyValues) {\n                metadata.infoType = \"company_values\";\n            } else if (structuredInfo.hasInvestors) {\n                metadata.infoType = \"investors\";\n            } else if (structuredInfo.hasLeadership) {\n                metadata.infoType = \"leadership\";\n            } else if (structuredInfo.hasPricing) {\n                metadata.infoType = \"pricing\";\n            } else if (structuredInfo.hasProductFeatures) {\n                metadata.infoType = \"product_features\";\n            } else if (structuredInfo.hasSalesInfo) {\n                metadata.infoType = \"sales_info\";\n            }\n        }\n        return [\n            {\n                text: cleanedText,\n                metadata\n            }\n        ];\n    }\n    // If this is a careers or about page, we may need special handling\n    const isAboutPage = source?.includes(\"/about\") || source?.toLowerCase().includes(\"about us\");\n    const isCareersPage = source?.includes(\"/careers\") || source?.toLowerCase().includes(\"careers\");\n    // For career and about pages, try to locate sections for special handling\n    if (isAboutPage || isCareersPage) {\n        return splitStructuredContent(cleanedText, chunkSize, source);\n    }\n    // Standard chunking for other content\n    return splitRegularContent(cleanedText, chunkSize);\n}\n/**\n * Split potentially structured content like about pages and careers pages\n * Preserves sections related to company information\n */ function splitStructuredContent(text, chunkSize, source) {\n    const chunks = [];\n    // Try to identify sections in the text\n    const sections = identifySections(text);\n    // If we identified structured sections, process them specially\n    if (sections.length > 0) {\n        for (const section of sections){\n            const structuredInfo = detectStructuredInfo(section.text);\n            const metadata = {};\n            if (structuredInfo.hasCompanyValues) {\n                metadata.isStructured = true;\n                metadata.infoType = \"company_values\";\n            } else if (structuredInfo.hasInvestors) {\n                metadata.isStructured = true;\n                metadata.infoType = \"investors\";\n            } else if (structuredInfo.hasLeadership) {\n                metadata.isStructured = true;\n                metadata.infoType = \"leadership\";\n            } else if (structuredInfo.hasPricing) {\n                metadata.isStructured = true;\n                metadata.infoType = \"pricing\";\n            } else if (structuredInfo.hasProductFeatures) {\n                metadata.isStructured = true;\n                metadata.infoType = \"product_features\";\n            } else if (structuredInfo.hasSalesInfo) {\n                metadata.isStructured = true;\n                metadata.infoType = \"sales_info\";\n            }\n            // If this is a structured section, try to keep it intact if possible\n            if (metadata.isStructured && section.text.length <= chunkSize * 1.5) {\n                chunks.push({\n                    text: section.text,\n                    metadata\n                });\n            } else {\n                // If too large, split but preserve the metadata\n                const sectionChunks = splitRegularContent(section.text, chunkSize);\n                for (const chunk of sectionChunks){\n                    if (metadata.isStructured) {\n                        chunk.metadata = {\n                            ...metadata\n                        };\n                    }\n                    chunks.push(chunk);\n                }\n            }\n        }\n        return chunks;\n    }\n    // If we couldn't identify structured sections, fall back to regular chunking\n    return splitRegularContent(text, chunkSize);\n}\n/**\n * Identify potential sections in text based on headings and patterns\n */ function identifySections(text) {\n    const sections = [];\n    // Common section indicators\n    const sectionIndicators = [\n        \"our values\",\n        \"company values\",\n        \"our investors\",\n        \"our mission\",\n        \"leadership\",\n        \"team\",\n        \"about us\",\n        \"our story\",\n        \"vision\",\n        \"what we do\",\n        \"who we are\",\n        \"our investors\"\n    ];\n    // Try to split by common headings and indicators\n    let remainingText = text;\n    // First pass: Look for section headings\n    for (const indicator of sectionIndicators){\n        const indicatorRegex = new RegExp(`(^|\\\\s)${indicator}[:\\\\s]`, \"i\");\n        const match = remainingText.match(indicatorRegex);\n        if (match && match.index !== undefined) {\n            // Find the next section indicator after this one\n            let nextIndex = remainingText.length;\n            for (const nextIndicator of sectionIndicators){\n                if (nextIndicator === indicator) continue;\n                const nextRegex = new RegExp(`(^|\\\\s)${nextIndicator}[:\\\\s]`, \"i\");\n                const nextMatch = remainingText.slice(match.index + indicator.length).match(nextRegex);\n                if (nextMatch && nextMatch.index !== undefined) {\n                    nextIndex = Math.min(nextIndex, match.index + indicator.length + nextMatch.index);\n                }\n            }\n            // Extract this section\n            const sectionText = remainingText.slice(Math.max(0, match.index - 20), nextIndex + 20 // Include some context after\n            ).trim();\n            if (sectionText.length > 50) {\n                sections.push({\n                    text: sectionText,\n                    type: indicator\n                });\n            }\n        }\n    }\n    // If we didn't find sections, try another approach with paragraph breaks\n    if (sections.length === 0) {\n        const paragraphs = text.split(/\\n\\s*\\n/);\n        let currentSection = \"\";\n        let currentType = undefined;\n        for (const paragraph of paragraphs){\n            if (paragraph.trim().length < 10) continue; // Skip very short paragraphs\n            // Check if this paragraph starts a new section\n            let foundNewSection = false;\n            for (const indicator of sectionIndicators){\n                if (paragraph.toLowerCase().includes(indicator)) {\n                    // If we have a current section, add it before starting a new one\n                    if (currentSection.length > 0) {\n                        sections.push({\n                            text: currentSection,\n                            type: currentType\n                        });\n                    }\n                    // Start a new section\n                    currentSection = paragraph;\n                    currentType = indicator;\n                    foundNewSection = true;\n                    break;\n                }\n            }\n            // If not a new section, add to current section\n            if (!foundNewSection) {\n                if (currentSection.length > 0) {\n                    currentSection += \"\\n\\n\" + paragraph;\n                } else {\n                    currentSection = paragraph;\n                }\n            }\n        }\n        // Add the final section if it exists\n        if (currentSection.length > 0) {\n            sections.push({\n                text: currentSection,\n                type: currentType\n            });\n        }\n    }\n    // If we still don't have sections, create one for the whole text\n    if (sections.length === 0) {\n        sections.push({\n            text\n        });\n    }\n    return sections;\n}\n/**\n * Split text using the standard chunking algorithm\n * @param text Text to split\n * @param chunkSize Target size for each chunk\n * @returns Array of text chunks\n */ function splitRegularContent(text, chunkSize) {\n    const chunks = [];\n    let currentIndex = 0;\n    while(currentIndex < text.length){\n        // Get a chunk of approximately the target size\n        let chunk = text.substring(currentIndex, currentIndex + chunkSize);\n        // If we're not at the end of the text, try to break at a natural boundary\n        if (currentIndex + chunkSize < text.length) {\n            // Look for paragraph breaks first (ideal breaking point)\n            const paragraphBreak = chunk.lastIndexOf(\"\\n\\n\");\n            // Then look for the last sentence break in this chunk\n            const sentenceBreaks = [\n                chunk.lastIndexOf(\". \"),\n                chunk.lastIndexOf(\"? \"),\n                chunk.lastIndexOf(\"! \"),\n                chunk.lastIndexOf(\".\\n\"),\n                chunk.lastIndexOf(\"?\\n\"),\n                chunk.lastIndexOf(\"!\\n\")\n            ];\n            const lastSentenceBreak = Math.max(...sentenceBreaks);\n            // Use paragraph break if available and reasonable, otherwise use sentence break\n            if (paragraphBreak > chunkSize * 0.5) {\n                chunk = chunk.substring(0, paragraphBreak);\n            } else if (lastSentenceBreak > chunkSize * 0.3) {\n                // If the sentence break is at least 30% through the chunk\n                const breakType = sentenceBreaks.indexOf(lastSentenceBreak);\n                // Add 2 to include the period and space/newline\n                chunk = chunk.substring(0, lastSentenceBreak + (breakType >= 3 ? 2 : 2));\n            }\n        }\n        // Create chunkObj with proper type that includes optional metadata\n        const chunkObj = {\n            text: chunk.trim()\n        };\n        const structuredInfo = detectStructuredInfo(chunk);\n        if (structuredInfo.hasCompanyValues || structuredInfo.hasInvestors || structuredInfo.hasLeadership || structuredInfo.hasPricing || structuredInfo.hasProductFeatures || structuredInfo.hasSalesInfo) {\n            const metadata = {\n                isStructured: true\n            };\n            if (structuredInfo.hasCompanyValues) {\n                metadata.infoType = \"company_values\";\n            } else if (structuredInfo.hasInvestors) {\n                metadata.infoType = \"investors\";\n            } else if (structuredInfo.hasLeadership) {\n                metadata.infoType = \"leadership\";\n            } else if (structuredInfo.hasPricing) {\n                metadata.infoType = \"pricing\";\n            } else if (structuredInfo.hasProductFeatures) {\n                metadata.infoType = \"product_features\";\n            } else if (structuredInfo.hasSalesInfo) {\n                metadata.infoType = \"sales_info\";\n            }\n            chunkObj.metadata = metadata;\n        }\n        chunks.push(chunkObj);\n        currentIndex += chunk.length;\n        // Add slight overlap for context if needed\n        if (currentIndex < text.length) {\n            const lastSentence = findLastSentence(chunk);\n            if (lastSentence && lastSentence.length < chunkSize * 0.2) {\n                currentIndex -= lastSentence.length;\n            }\n        }\n    }\n    return chunks;\n}\n/**\n * Find the last complete sentence in a text\n */ function findLastSentence(text) {\n    const sentences = text.match(/[^.!?]+[.!?]+/g);\n    if (sentences && sentences.length > 0) {\n        return sentences[sentences.length - 1];\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/documentProcessing.ts\n");

/***/ }),

/***/ "(api)/./utils/enhancedRetrieval.ts":
/*!************************************!*\
  !*** ./utils/enhancedRetrieval.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ENHANCED_RETRIEVAL_CONFIG: () => (/* binding */ DEFAULT_ENHANCED_RETRIEVAL_CONFIG),\n/* harmony export */   EnhancedRetrieval: () => (/* binding */ EnhancedRetrieval)\n/* harmony export */ });\n/* harmony import */ var _bm25__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bm25 */ \"(api)/./utils/bm25.ts\");\n/* harmony import */ var _vectorStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vectorStore */ \"(api)/./utils/vectorStore.ts\");\n/* harmony import */ var _tokenization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokenization */ \"(api)/./utils/tokenization.ts\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_4__);\n/**\n * Enhanced Retrieval System\n * \n * This module integrates BM25 with vector-based similarity search\n * to create a hybrid retrieval approach that improves result quality.\n */ \n\n\n\n\n/**\n * Default configuration for enhanced retrieval\n */ const DEFAULT_ENHANCED_RETRIEVAL_CONFIG = {\n    bm25Weight: 0.3,\n    minBM25Score: 0.01,\n    minVectorScore: 0.6,\n    normalizeScores: true,\n    maxResults: 5,\n    debug: false\n};\n/**\n * Enhanced retrieval system that combines BM25 and vector-based search\n */ class EnhancedRetrieval {\n    /**\n   * Create a new enhanced retrieval system\n   */ constructor(config = {}){\n        this.vectorStore = [];\n        this.corpusStats = null;\n        this.isInitialized = false;\n        this.config = {\n            ...DEFAULT_ENHANCED_RETRIEVAL_CONFIG,\n            ...config\n        };\n    }\n    /**\n   * Load vector store from disk\n   */ async loadVectorStore() {\n        try {\n            const filePath = path__WEBPACK_IMPORTED_MODULE_4___default().join(process.cwd(), \"data\", \"vectorStore.json\");\n            const fileData = await fs_promises__WEBPACK_IMPORTED_MODULE_3___default().readFile(filePath, \"utf8\");\n            const parsedData = JSON.parse(fileData);\n            if (Array.isArray(parsedData)) {\n                return parsedData;\n            } else if (parsedData.items && Array.isArray(parsedData.items)) {\n                return parsedData.items;\n            }\n            return [];\n        } catch (error) {\n            console.error(\"Error loading vector store:\", error);\n            return [];\n        }\n    }\n    /**\n   * Initialize the retrieval system\n   * Loads corpus statistics and vector store\n   */ async initialize() {\n        if (this.isInitialized) {\n            return;\n        }\n        try {\n            console.log(\"Initializing enhanced retrieval system...\");\n            // Load corpus statistics for BM25 scoring\n            this.corpusStats = await (0,_bm25__WEBPACK_IMPORTED_MODULE_0__.loadCorpusStatistics)();\n            console.log(`Loaded corpus statistics with ${Object.keys(this.corpusStats.documentFrequency).length} unique terms`);\n            // Load vector store\n            this.vectorStore = await this.loadVectorStore();\n            console.log(`Loaded vector store with ${this.vectorStore.length} items`);\n            this.isInitialized = true;\n            console.log(\"Enhanced retrieval system initialized\");\n        } catch (error) {\n            console.error(\"Error initializing enhanced retrieval system:\", error);\n            throw new Error(\"Failed to initialize enhanced retrieval system\");\n        }\n    }\n    /**\n   * Find similar documents using vector search\n   */ async findSimilarItems(query, options) {\n        // Implement a simplified version of vector search\n        // In a real implementation, this would use embedding API\n        // This is a mock implementation as we can't directly call the existing function\n        // Replace this with the actual embedding and vector search in production\n        const results = (0,_vectorStore__WEBPACK_IMPORTED_MODULE_1__.getSimilarItems)(// Mock embedding - in production, get this from OpenAI API\n        Array(1536).fill(0).map(()=>Math.random() - 0.5), options.maxResults, query);\n        return results.map((result)=>({\n                item: result,\n                score: result.score\n            }));\n    }\n    /**\n   * Find documents using the enhanced retrieval approach\n   */ async findSimilarDocuments(query, options = {}) {\n        // Ensure system is initialized\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n        // Apply options to config\n        const config = {\n            ...this.config,\n            ...options\n        };\n        if (config.debug) {\n            console.log(`Searching for: \"${query}\"`);\n            console.log(`Tokenized query: [${(0,_tokenization__WEBPACK_IMPORTED_MODULE_2__.tokenize)(query).join(\", \")}]`);\n        }\n        // Step 1: Get vector search results\n        const vectorResults = await this.findSimilarItems(query, {\n            minSimilarity: config.minVectorScore,\n            maxResults: config.maxResults * 2 // Get more results initially for re-ranking\n        });\n        if (config.debug) {\n            console.log(`Vector search returned ${vectorResults.length} results`);\n        }\n        // If no vector results or BM25 weight is 0, return vector results\n        if (vectorResults.length === 0 || config.bm25Weight === 0) {\n            return vectorResults.map((result)=>({\n                    item: result.item,\n                    bm25Score: 0,\n                    vectorScore: result.score,\n                    combinedScore: result.score\n                })).slice(0, config.maxResults);\n        }\n        // Step 2: Calculate BM25 scores for vector results\n        const enhancedResults = [];\n        for (const result of vectorResults){\n            const document = {\n                id: result.item.metadata?.source || \"unknown\",\n                text: result.item.text\n            };\n            const bm25Score = (0,_bm25__WEBPACK_IMPORTED_MODULE_0__.calculateBM25Score)(query, document, this.corpusStats);\n            // Skip if BM25 score is below threshold\n            if (bm25Score < config.minBM25Score && config.bm25Weight > 0) {\n                continue;\n            }\n            // Normalize scores if enabled\n            let normalizedBM25 = bm25Score;\n            let normalizedVector = result.score;\n            // Calculate combined score\n            const combinedScore = (0,_bm25__WEBPACK_IMPORTED_MODULE_0__.combineScores)(normalizedBM25, normalizedVector, config.bm25Weight);\n            enhancedResults.push({\n                item: result.item,\n                bm25Score,\n                vectorScore: result.score,\n                combinedScore\n            });\n        }\n        // Sort by combined score\n        enhancedResults.sort((a, b)=>b.combinedScore - a.combinedScore);\n        // Apply maximum results limit\n        const finalResults = enhancedResults.slice(0, config.maxResults);\n        if (config.debug) {\n            console.log(`Enhanced retrieval returned ${finalResults.length} results`);\n            finalResults.forEach((result, i)=>{\n                console.log(`Result ${i + 1}: Combined score ${result.combinedScore.toFixed(4)} (Vector: ${result.vectorScore.toFixed(4)}, BM25: ${result.bm25Score.toFixed(4)})`);\n            });\n        }\n        return finalResults;\n    }\n    /**\n   * Get document text from results for context generation\n   */ async getContextFromResults(results) {\n        return results.map((result)=>{\n            // Include metadata if available\n            const source = result.item.metadata?.source ? `Source: ${result.item.metadata.source}\\n` : \"\";\n            // Return formatted context\n            return `${source}${result.item.text}\\n\\n`;\n        }).join(\"---\\n\\n\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/enhancedRetrieval.ts\n");

/***/ }),

/***/ "(api)/./utils/errorHandling.ts":
/*!********************************!*\
  !*** ./utils/errorHandling.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIModelError: () => (/* binding */ AIModelError),\n/* harmony export */   DocumentProcessingError: () => (/* binding */ DocumentProcessingError),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   QueryProcessingError: () => (/* binding */ QueryProcessingError),\n/* harmony export */   VectorStoreError: () => (/* binding */ VectorStoreError),\n/* harmony export */   createError: () => (/* binding */ createError),\n/* harmony export */   createFallbackResponse: () => (/* binding */ createFallbackResponse),\n/* harmony export */   formatValidationError: () => (/* binding */ formatValidationError),\n/* harmony export */   handleError: () => (/* binding */ handleError),\n/* harmony export */   handleOpenAIError: () => (/* binding */ handleOpenAIError),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   safeExecute: () => (/* binding */ safeExecute),\n/* harmony export */   standardizeApiErrorResponse: () => (/* binding */ standardizeApiErrorResponse)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__]);\nopenai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Custom error classes for better error identification\nclass DocumentProcessingError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"DocumentProcessingError\";\n    }\n}\nclass AIModelError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"AIModelError\";\n    }\n}\nclass VectorStoreError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"VectorStoreError\";\n    }\n}\nclass NetworkError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"NetworkError\";\n    }\n}\nclass QueryProcessingError extends Error {\n    constructor(message, originalError){\n        super(message);\n        this.originalError = originalError;\n        this.name = \"QueryProcessingError\";\n    }\n}\n// Error handler for OpenAI API errors\nfunction handleOpenAIError(error) {\n    if (error instanceof openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI.APIError) {\n        if (error.status === 400) {\n            return new AIModelError(`Invalid request to OpenAI: ${error.message}`, error);\n        } else if (error.status === 401) {\n            return new AIModelError(\"Authentication error with OpenAI API. Check your API key.\", error);\n        } else if (error.status === 429) {\n            return new AIModelError(\"Rate limit exceeded with OpenAI API. Please try again later.\", error);\n        } else if (error.status >= 500) {\n            return new AIModelError(\"OpenAI service is currently unavailable. Please try again later.\", error);\n        }\n    }\n    return new AIModelError(`Unexpected error with OpenAI: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error : undefined);\n}\n// General purpose error handler\nfunction handleError(error, context) {\n    // Log the error for debugging\n    console.error(`Error in ${context}:`, error);\n    // Specific handling based on error type\n    if (error instanceof openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI.APIError) {\n        return handleOpenAIError(error);\n    }\n    if (error instanceof DocumentProcessingError || error instanceof AIModelError || error instanceof VectorStoreError || error instanceof NetworkError || error instanceof QueryProcessingError) {\n        return error; // Already a custom error, return as is\n    }\n    // Generic error handling\n    const message = error instanceof Error ? error.message : String(error);\n    return new Error(`Error in ${context}: ${message}`);\n}\n// Helper for fallback response creation\nfunction createFallbackResponse(defaultValue) {\n    return defaultValue;\n}\n// Type-safe try/catch wrapper for async functions\nasync function safeExecute(operation, context, fallback) {\n    try {\n        return await operation();\n    } catch (error) {\n        handleError(error, context);\n        return fallback;\n    }\n}\n/**\n * Standardize error responses for API endpoints\n * This ensures consistent error formatting across the application\n */ function standardizeApiErrorResponse(error) {\n    console.error(\"Error details:\", error);\n    // Handle OpenAI API errors\n    if (error.name === \"OpenAIError\" || error.response && error.response.headers && error.response.headers.get(\"x-request-id\")) {\n        return {\n            error: {\n                message: \"Error processing your request with the language model\",\n                code: \"OPENAI_API_ERROR\",\n                details:  true ? {\n                    message: error.message,\n                    type: error.type,\n                    statusCode: error.status || error.statusCode\n                } : 0\n            }\n        };\n    }\n    // Handle vector store errors\n    if (error.message && error.message.includes(\"vector store\")) {\n        return {\n            error: {\n                message: \"Error retrieving information from knowledge base\",\n                code: \"VECTOR_STORE_ERROR\",\n                details:  true ? {\n                    message: error.message\n                } : 0\n            }\n        };\n    }\n    // Handle timeout errors\n    if (error.name === \"AbortError\" || error.code === \"ETIMEDOUT\" || error.message?.includes(\"timeout\")) {\n        return {\n            error: {\n                message: \"Request timed out. Please try again.\",\n                code: \"TIMEOUT_ERROR\",\n                details:  true ? {\n                    message: error.message\n                } : 0\n            }\n        };\n    }\n    // Default error response\n    return {\n        error: {\n            message: \"An unexpected error occurred\",\n            code: \"INTERNAL_SERVER_ERROR\",\n            details:  true ? {\n                message: error.message || \"Unknown error\"\n            } : 0\n        }\n    };\n}\n/**\n * Format validation errors consistently\n */ function formatValidationError(message, fieldErrors) {\n    return {\n        error: {\n            message: message || \"Validation error\",\n            code: \"VALIDATION_ERROR\",\n            details: fieldErrors\n        }\n    };\n}\n/**\n * Log error with standardized format for easier debugging\n */ function logError(error, context) {\n    const timestamp = new Date().toISOString();\n    const contextInfo = context ? `[${context}] ` : \"\";\n    console.error(`${timestamp} ${contextInfo}Error: ${error.message}`);\n    if (error.stack && \"development\" !== \"production\") {\n        console.error(`Stack trace: ${error.stack}`);\n    }\n    // Log additional details if available\n    if (error.response) {\n        console.error(\"Response data:\", error.response.data);\n        console.error(\"Response status:\", error.response.status);\n    }\n}\n/**\n * Create a simple error with additional context\n */ function createError(message, code, additionalDetails) {\n    const error = new Error(message);\n    if (code) error.code = code;\n    if (additionalDetails) error.details = additionalDetails;\n    return error;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFDN0IsSUFBSXlCLE1BQU1qQixNQUFNaUIsSUFBSSxHQUFHQTtJQUN2QixJQUFJZ0IsbUJBQW1CakMsTUFBTWtCLE9BQU8sR0FBR2U7SUFDdkMsT0FBT2pDO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYWxlcy1jaGF0LW9wZW5haS1yYWcvLi91dGlscy9lcnJvckhhbmRsaW5nLnRzPzdiZWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BlbkFJIH0gZnJvbSAnb3BlbmFpJztcblxuLy8gQ3VzdG9tIGVycm9yIGNsYXNzZXMgZm9yIGJldHRlciBlcnJvciBpZGVudGlmaWNhdGlvblxuZXhwb3J0IGNsYXNzIERvY3VtZW50UHJvY2Vzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBvcmlnaW5hbEVycm9yPzogRXJyb3IpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnRG9jdW1lbnRQcm9jZXNzaW5nRXJyb3InO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBSU1vZGVsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgcHVibGljIHJlYWRvbmx5IG9yaWdpbmFsRXJyb3I/OiBFcnJvcikge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdBSU1vZGVsRXJyb3InO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWZWN0b3JTdG9yZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBvcmlnaW5hbEVycm9yPzogRXJyb3IpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnVmVjdG9yU3RvcmVFcnJvcic7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5ldHdvcmtFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBwdWJsaWMgcmVhZG9ubHkgb3JpZ2luYWxFcnJvcj86IEVycm9yKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ05ldHdvcmtFcnJvcic7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFF1ZXJ5UHJvY2Vzc2luZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBvcmlnaW5hbEVycm9yPzogRXJyb3IpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnUXVlcnlQcm9jZXNzaW5nRXJyb3InO1xuICB9XG59XG5cbi8vIEVycm9yIGhhbmRsZXIgZm9yIE9wZW5BSSBBUEkgZXJyb3JzXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlT3BlbkFJRXJyb3IoZXJyb3I6IHVua25vd24pOiBBSU1vZGVsRXJyb3Ige1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBPcGVuQUkuQVBJRXJyb3IpIHtcbiAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDApIHtcbiAgICAgIHJldHVybiBuZXcgQUlNb2RlbEVycm9yKGBJbnZhbGlkIHJlcXVlc3QgdG8gT3BlbkFJOiAke2Vycm9yLm1lc3NhZ2V9YCwgZXJyb3IpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgIHJldHVybiBuZXcgQUlNb2RlbEVycm9yKCdBdXRoZW50aWNhdGlvbiBlcnJvciB3aXRoIE9wZW5BSSBBUEkuIENoZWNrIHlvdXIgQVBJIGtleS4nLCBlcnJvcik7XG4gICAgfSBlbHNlIGlmIChlcnJvci5zdGF0dXMgPT09IDQyOSkge1xuICAgICAgcmV0dXJuIG5ldyBBSU1vZGVsRXJyb3IoJ1JhdGUgbGltaXQgZXhjZWVkZWQgd2l0aCBPcGVuQUkgQVBJLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsIGVycm9yKTtcbiAgICB9IGVsc2UgaWYgKGVycm9yLnN0YXR1cyA+PSA1MDApIHtcbiAgICAgIHJldHVybiBuZXcgQUlNb2RlbEVycm9yKCdPcGVuQUkgc2VydmljZSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJywgZXJyb3IpO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIG5ldyBBSU1vZGVsRXJyb3IoYFVuZXhwZWN0ZWQgZXJyb3Igd2l0aCBPcGVuQUk6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWAsIFxuICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IHVuZGVmaW5lZCk7XG59XG5cbi8vIEdlbmVyYWwgcHVycG9zZSBlcnJvciBoYW5kbGVyXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3I6IHVua25vd24sIGNvbnRleHQ6IHN0cmluZyk6IEVycm9yIHtcbiAgLy8gTG9nIHRoZSBlcnJvciBmb3IgZGVidWdnaW5nXG4gIGNvbnNvbGUuZXJyb3IoYEVycm9yIGluICR7Y29udGV4dH06YCwgZXJyb3IpO1xuICBcbiAgLy8gU3BlY2lmaWMgaGFuZGxpbmcgYmFzZWQgb24gZXJyb3IgdHlwZVxuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBPcGVuQUkuQVBJRXJyb3IpIHtcbiAgICByZXR1cm4gaGFuZGxlT3BlbkFJRXJyb3IoZXJyb3IpO1xuICB9XG4gIFxuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBEb2N1bWVudFByb2Nlc3NpbmdFcnJvciB8fCBcbiAgICAgIGVycm9yIGluc3RhbmNlb2YgQUlNb2RlbEVycm9yIHx8IFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBWZWN0b3JTdG9yZUVycm9yIHx8XG4gICAgICBlcnJvciBpbnN0YW5jZW9mIE5ldHdvcmtFcnJvciB8fFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBRdWVyeVByb2Nlc3NpbmdFcnJvcikge1xuICAgIHJldHVybiBlcnJvcjsgLy8gQWxyZWFkeSBhIGN1c3RvbSBlcnJvciwgcmV0dXJuIGFzIGlzXG4gIH1cbiAgXG4gIC8vIEdlbmVyaWMgZXJyb3IgaGFuZGxpbmdcbiAgY29uc3QgbWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKTtcbiAgcmV0dXJuIG5ldyBFcnJvcihgRXJyb3IgaW4gJHtjb250ZXh0fTogJHttZXNzYWdlfWApO1xufVxuXG4vLyBIZWxwZXIgZm9yIGZhbGxiYWNrIHJlc3BvbnNlIGNyZWF0aW9uXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmFsbGJhY2tSZXNwb25zZTxUPihkZWZhdWx0VmFsdWU6IFQpOiBUIHtcbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn1cblxuLy8gVHlwZS1zYWZlIHRyeS9jYXRjaCB3cmFwcGVyIGZvciBhc3luYyBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYWZlRXhlY3V0ZTxUPihcbiAgb3BlcmF0aW9uOiAoKSA9PiBQcm9taXNlPFQ+LFxuICBjb250ZXh0OiBzdHJpbmcsXG4gIGZhbGxiYWNrOiBUXG4pOiBQcm9taXNlPFQ+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgb3BlcmF0aW9uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IsIGNvbnRleHQpO1xuICAgIHJldHVybiBmYWxsYmFjaztcbiAgfVxufVxuXG4vKipcbiAqIFN0YW5kYXJkIEFQSSBlcnJvciByZXNwb25zZSBmb3JtYXRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcGlFcnJvclJlc3BvbnNlIHtcbiAgZXJyb3I6IHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuICAgIGRldGFpbHM/OiBhbnk7XG4gIH07XG59XG5cbi8qKlxuICogU3RhbmRhcmRpemUgZXJyb3IgcmVzcG9uc2VzIGZvciBBUEkgZW5kcG9pbnRzXG4gKiBUaGlzIGVuc3VyZXMgY29uc2lzdGVudCBlcnJvciBmb3JtYXR0aW5nIGFjcm9zcyB0aGUgYXBwbGljYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YW5kYXJkaXplQXBpRXJyb3JSZXNwb25zZShlcnJvcjogYW55KTogQXBpRXJyb3JSZXNwb25zZSB7XG4gIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRldGFpbHM6JywgZXJyb3IpO1xuICBcbiAgLy8gSGFuZGxlIE9wZW5BSSBBUEkgZXJyb3JzXG4gIGlmIChlcnJvci5uYW1lID09PSAnT3BlbkFJRXJyb3InIHx8IChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5oZWFkZXJzICYmIGVycm9yLnJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlcXVlc3QtaWQnKSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHtcbiAgICAgICAgbWVzc2FnZTogJ0Vycm9yIHByb2Nlc3NpbmcgeW91ciByZXF1ZXN0IHdpdGggdGhlIGxhbmd1YWdlIG1vZGVsJyxcbiAgICAgICAgY29kZTogJ09QRU5BSV9BUElfRVJST1InLFxuICAgICAgICBkZXRhaWxzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgdHlwZTogZXJyb3IudHlwZSxcbiAgICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMgfHwgZXJyb3Iuc3RhdHVzQ29kZVxuICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBcbiAgLy8gSGFuZGxlIHZlY3RvciBzdG9yZSBlcnJvcnNcbiAgaWYgKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygndmVjdG9yIHN0b3JlJykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHtcbiAgICAgICAgbWVzc2FnZTogJ0Vycm9yIHJldHJpZXZpbmcgaW5mb3JtYXRpb24gZnJvbSBrbm93bGVkZ2UgYmFzZScsXG4gICAgICAgIGNvZGU6ICdWRUNUT1JfU1RPUkVfRVJST1InLFxuICAgICAgICBkZXRhaWxzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgXG4gIC8vIEhhbmRsZSB0aW1lb3V0IGVycm9yc1xuICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InIHx8IGVycm9yLmNvZGUgPT09ICdFVElNRURPVVQnIHx8IGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCd0aW1lb3V0JykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHtcbiAgICAgICAgbWVzc2FnZTogJ1JlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLicsXG4gICAgICAgIGNvZGU6ICdUSU1FT1VUX0VSUk9SJyxcbiAgICAgICAgZGV0YWlsczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gICAgICAgIH0gOiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIFxuICAvLyBEZWZhdWx0IGVycm9yIHJlc3BvbnNlXG4gIHJldHVybiB7XG4gICAgZXJyb3I6IHtcbiAgICAgIG1lc3NhZ2U6ICdBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkJyxcbiAgICAgIGNvZGU6ICdJTlRFUk5BTF9TRVJWRVJfRVJST1InLFxuICAgICAgZGV0YWlsczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCAnVW5rbm93biBlcnJvcidcbiAgICAgIH0gOiB1bmRlZmluZWRcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogRm9ybWF0IHZhbGlkYXRpb24gZXJyb3JzIGNvbnNpc3RlbnRseVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VmFsaWRhdGlvbkVycm9yKG1lc3NhZ2U6IHN0cmluZywgZmllbGRFcnJvcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogQXBpRXJyb3JSZXNwb25zZSB7XG4gIHJldHVybiB7XG4gICAgZXJyb3I6IHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgJ1ZhbGlkYXRpb24gZXJyb3InLFxuICAgICAgY29kZTogJ1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgZGV0YWlsczogZmllbGRFcnJvcnNcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogTG9nIGVycm9yIHdpdGggc3RhbmRhcmRpemVkIGZvcm1hdCBmb3IgZWFzaWVyIGRlYnVnZ2luZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gbG9nRXJyb3IoZXJyb3I6IGFueSwgY29udGV4dD86IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gIGNvbnN0IGNvbnRleHRJbmZvID0gY29udGV4dCA/IGBbJHtjb250ZXh0fV0gYCA6ICcnO1xuICBcbiAgY29uc29sZS5lcnJvcihgJHt0aW1lc3RhbXB9ICR7Y29udGV4dEluZm99RXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgXG4gIGlmIChlcnJvci5zdGFjayAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihgU3RhY2sgdHJhY2U6ICR7ZXJyb3Iuc3RhY2t9YCk7XG4gIH1cbiAgXG4gIC8vIExvZyBhZGRpdGlvbmFsIGRldGFpbHMgaWYgYXZhaWxhYmxlXG4gIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Jlc3BvbnNlIGRhdGE6JywgZXJyb3IucmVzcG9uc2UuZGF0YSk7XG4gICAgY29uc29sZS5lcnJvcignUmVzcG9uc2Ugc3RhdHVzOicsIGVycm9yLnJlc3BvbnNlLnN0YXR1cyk7XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBzaW1wbGUgZXJyb3Igd2l0aCBhZGRpdGlvbmFsIGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2U6IHN0cmluZywgY29kZT86IHN0cmluZywgYWRkaXRpb25hbERldGFpbHM/OiBhbnkpOiBFcnJvciB7XG4gIGNvbnN0IGVycm9yOiBhbnkgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIGlmIChjb2RlKSBlcnJvci5jb2RlID0gY29kZTtcbiAgaWYgKGFkZGl0aW9uYWxEZXRhaWxzKSBlcnJvci5kZXRhaWxzID0gYWRkaXRpb25hbERldGFpbHM7XG4gIHJldHVybiBlcnJvcjtcbn0gIl0sIm5hbWVzIjpbIk9wZW5BSSIsIkRvY3VtZW50UHJvY2Vzc2luZ0Vycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJvcmlnaW5hbEVycm9yIiwibmFtZSIsIkFJTW9kZWxFcnJvciIsIlZlY3RvclN0b3JlRXJyb3IiLCJOZXR3b3JrRXJyb3IiLCJRdWVyeVByb2Nlc3NpbmdFcnJvciIsImhhbmRsZU9wZW5BSUVycm9yIiwiZXJyb3IiLCJBUElFcnJvciIsInN0YXR1cyIsIlN0cmluZyIsInVuZGVmaW5lZCIsImhhbmRsZUVycm9yIiwiY29udGV4dCIsImNvbnNvbGUiLCJjcmVhdGVGYWxsYmFja1Jlc3BvbnNlIiwiZGVmYXVsdFZhbHVlIiwic2FmZUV4ZWN1dGUiLCJvcGVyYXRpb24iLCJmYWxsYmFjayIsInN0YW5kYXJkaXplQXBpRXJyb3JSZXNwb25zZSIsInJlc3BvbnNlIiwiaGVhZGVycyIsImdldCIsImNvZGUiLCJkZXRhaWxzIiwicHJvY2VzcyIsInR5cGUiLCJzdGF0dXNDb2RlIiwiaW5jbHVkZXMiLCJmb3JtYXRWYWxpZGF0aW9uRXJyb3IiLCJmaWVsZEVycm9ycyIsImxvZ0Vycm9yIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY29udGV4dEluZm8iLCJzdGFjayIsImRhdGEiLCJjcmVhdGVFcnJvciIsImFkZGl0aW9uYWxEZXRhaWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./utils/errorHandling.ts\n");

/***/ }),

/***/ "(api)/./utils/modelConfig.ts":
/*!******************************!*\
  !*** ./utils/modelConfig.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_SETTINGS: () => (/* binding */ AI_SETTINGS),\n/* harmony export */   SYSTEM_PROMPTS: () => (/* binding */ SYSTEM_PROMPTS),\n/* harmony export */   getSystemPromptForQuery: () => (/* binding */ getSystemPromptForQuery)\n/* harmony export */ });\n/**\n * AI model configuration settings for the RAG system\n * This provides centralized configuration for all AI model settings\n */ /**\n * Interface for model settings\n */ /**\n * Application AI settings\n */ const AI_SETTINGS = {\n    // Default model for standard operations\n    defaultModel: process.env.DEFAULT_LLM_MODEL || \"gpt-4\",\n    // Fallback model when primary is unavailable or for less critical operations\n    fallbackModel: process.env.FALLBACK_LLM_MODEL || \"gpt-3.5-turbo-1106\",\n    // Embedding model for vector operations\n    embeddingModel: process.env.EMBEDDING_MODEL || \"text-embedding-ada-002\",\n    // Default max tokens for generation\n    maxTokens: 1000,\n    // Default temperature for most operations\n    temperature: 0.7,\n    // Default system prompt for RAG queries\n    systemPrompt: `You are an AI assistant for the sales team. \nAnswer the question based ONLY on the context provided. \nIf the answer cannot be determined from the context, say \"I don't have enough information to answer this question.\"\nDo not make up or infer information that is not in the context.\nProvide concise, accurate responses with all relevant details from the context.`\n};\n/**\n * Different preset system prompts for various use cases\n */ const SYSTEM_PROMPTS = {\n    standard: AI_SETTINGS.systemPrompt,\n    technical: `You are an AI assistant for the sales team specializing in technical questions.\nAnswer the question based ONLY on the context provided.\nUse technical language and be precise in your explanations.\nIf the answer cannot be determined from the context, say \"I don't have enough information to answer this question.\"\nDo not make up or infer information that is not in the context.`,\n    sales: `You are an AI assistant for the sales team specializing in sales queries.\nAnswer the question based ONLY on the context provided.\nFocus on value propositions, competitive advantages, and addressing customer pain points.\nIf the answer cannot be determined from the context, say \"I don't have enough information to answer this question.\"\nDo not make up or infer information that is not in the context.`,\n    pricing: `You are an AI assistant for the sales team specializing in pricing questions.\nAnswer the question based ONLY on the context provided.\nBe very precise about pricing details, plans, and subscription options.\nIf the answer cannot be determined from the context, say \"I don't have enough information to answer this question.\"\nDo not make up or infer information that is not in the context.`\n};\n/**\n * Get system prompt based on query type\n */ function getSystemPromptForQuery(query) {\n    const lowerQuery = query.toLowerCase();\n    if (lowerQuery.includes(\"price\") || lowerQuery.includes(\"cost\") || lowerQuery.includes(\"subscription\") || lowerQuery.includes(\"plan\")) {\n        return SYSTEM_PROMPTS.pricing;\n    }\n    if (lowerQuery.includes(\"technical\") || lowerQuery.includes(\"architecture\") || lowerQuery.includes(\"infrastructure\") || lowerQuery.includes(\"integration\")) {\n        return SYSTEM_PROMPTS.technical;\n    }\n    if (lowerQuery.includes(\"competitor\") || lowerQuery.includes(\"comparison\") || lowerQuery.includes(\"vs\") || lowerQuery.includes(\"pitch\") || lowerQuery.includes(\"sell\")) {\n        return SYSTEM_PROMPTS.sales;\n    }\n    return SYSTEM_PROMPTS.standard;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi91dGlscy9tb2RlbENvbmZpZy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0NBR0MsR0FFRDs7Q0FFQyxHQVVEOztDQUVDLEdBQ00sTUFBTUEsY0FBNkI7SUFDeEMsd0NBQXdDO0lBQ3hDQyxjQUFjQyxRQUFRQyxHQUFHLENBQUNDLGlCQUFpQixJQUFJO0lBRS9DLDZFQUE2RTtJQUM3RUMsZUFBZUgsUUFBUUMsR0FBRyxDQUFDRyxrQkFBa0IsSUFBSTtJQUVqRCx3Q0FBd0M7SUFDeENDLGdCQUFnQkwsUUFBUUMsR0FBRyxDQUFDSyxlQUFlLElBQUk7SUFFL0Msb0NBQW9DO0lBQ3BDQyxXQUFXO0lBRVgsMENBQTBDO0lBQzFDQyxhQUFhO0lBRWIsd0NBQXdDO0lBQ3hDQyxjQUFjLENBQUM7Ozs7K0VBSThELENBQUM7QUFDaEYsRUFBRTtBQUVGOztDQUVDLEdBQ00sTUFBTUMsaUJBQWlCO0lBQzVCQyxVQUFVYixZQUFZVyxZQUFZO0lBRWxDRyxXQUFXLENBQUM7Ozs7K0RBSWlELENBQUM7SUFFOURDLE9BQU8sQ0FBQzs7OzsrREFJcUQsQ0FBQztJQUU5REMsU0FBUyxDQUFDOzs7OytEQUltRCxDQUFDO0FBQ2hFLEVBQUU7QUFFRjs7Q0FFQyxHQUNNLFNBQVNDLHdCQUF3QkMsS0FBYTtJQUNuRCxNQUFNQyxhQUFhRCxNQUFNRSxXQUFXO0lBRXBDLElBQUlELFdBQVdFLFFBQVEsQ0FBQyxZQUNwQkYsV0FBV0UsUUFBUSxDQUFDLFdBQ3BCRixXQUFXRSxRQUFRLENBQUMsbUJBQ3BCRixXQUFXRSxRQUFRLENBQUMsU0FBUztRQUMvQixPQUFPVCxlQUFlSSxPQUFPO0lBQy9CO0lBRUEsSUFBSUcsV0FBV0UsUUFBUSxDQUFDLGdCQUNwQkYsV0FBV0UsUUFBUSxDQUFDLG1CQUNwQkYsV0FBV0UsUUFBUSxDQUFDLHFCQUNwQkYsV0FBV0UsUUFBUSxDQUFDLGdCQUFnQjtRQUN0QyxPQUFPVCxlQUFlRSxTQUFTO0lBQ2pDO0lBRUEsSUFBSUssV0FBV0UsUUFBUSxDQUFDLGlCQUNwQkYsV0FBV0UsUUFBUSxDQUFDLGlCQUNwQkYsV0FBV0UsUUFBUSxDQUFDLFNBQ3BCRixXQUFXRSxRQUFRLENBQUMsWUFDcEJGLFdBQVdFLFFBQVEsQ0FBQyxTQUFTO1FBQy9CLE9BQU9ULGVBQWVHLEtBQUs7SUFDN0I7SUFFQSxPQUFPSCxlQUFlQyxRQUFRO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FsZXMtY2hhdC1vcGVuYWktcmFnLy4vdXRpbHMvbW9kZWxDb25maWcudHM/MjY4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFJIG1vZGVsIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIHRoZSBSQUcgc3lzdGVtXG4gKiBUaGlzIHByb3ZpZGVzIGNlbnRyYWxpemVkIGNvbmZpZ3VyYXRpb24gZm9yIGFsbCBBSSBtb2RlbCBzZXR0aW5nc1xuICovXG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBtb2RlbCBzZXR0aW5nc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsU2V0dGluZ3Mge1xuICBkZWZhdWx0TW9kZWw6IHN0cmluZzsgICAgICAvLyBEZWZhdWx0IG1vZGVsIHRvIHVzZSBmb3IgbW9zdCBvcGVyYXRpb25zXG4gIGZhbGxiYWNrTW9kZWw6IHN0cmluZzsgICAgIC8vIEZhbGxiYWNrIG1vZGVsIGlmIHRoZSBkZWZhdWx0IGlzIHVuYXZhaWxhYmxlXG4gIGVtYmVkZGluZ01vZGVsOiBzdHJpbmc7ICAgIC8vIE1vZGVsIHRvIHVzZSBmb3IgdGV4dCBlbWJlZGRpbmdzXG4gIG1heFRva2VuczogbnVtYmVyOyAgICAgICAgIC8vIE1heGltdW0gdG9rZW5zIHRvIGdlbmVyYXRlIGluIHJlc3BvbnNlc1xuICB0ZW1wZXJhdHVyZTogbnVtYmVyOyAgICAgICAvLyBEZWZhdWx0IHRlbXBlcmF0dXJlIGZvciBnZW5lcmF0aW9uXG4gIHN5c3RlbVByb21wdDogc3RyaW5nOyAgICAgIC8vIERlZmF1bHQgc3lzdGVtIHByb21wdCBmb3IgUkFHIHF1ZXJpZXNcbn1cblxuLyoqXG4gKiBBcHBsaWNhdGlvbiBBSSBzZXR0aW5nc1xuICovXG5leHBvcnQgY29uc3QgQUlfU0VUVElOR1M6IE1vZGVsU2V0dGluZ3MgPSB7XG4gIC8vIERlZmF1bHQgbW9kZWwgZm9yIHN0YW5kYXJkIG9wZXJhdGlvbnNcbiAgZGVmYXVsdE1vZGVsOiBwcm9jZXNzLmVudi5ERUZBVUxUX0xMTV9NT0RFTCB8fCAnZ3B0LTQnLFxuICBcbiAgLy8gRmFsbGJhY2sgbW9kZWwgd2hlbiBwcmltYXJ5IGlzIHVuYXZhaWxhYmxlIG9yIGZvciBsZXNzIGNyaXRpY2FsIG9wZXJhdGlvbnNcbiAgZmFsbGJhY2tNb2RlbDogcHJvY2Vzcy5lbnYuRkFMTEJBQ0tfTExNX01PREVMIHx8ICdncHQtMy41LXR1cmJvLTExMDYnLFxuICBcbiAgLy8gRW1iZWRkaW5nIG1vZGVsIGZvciB2ZWN0b3Igb3BlcmF0aW9uc1xuICBlbWJlZGRpbmdNb2RlbDogcHJvY2Vzcy5lbnYuRU1CRURESU5HX01PREVMIHx8ICd0ZXh0LWVtYmVkZGluZy1hZGEtMDAyJyxcbiAgXG4gIC8vIERlZmF1bHQgbWF4IHRva2VucyBmb3IgZ2VuZXJhdGlvblxuICBtYXhUb2tlbnM6IDEwMDAsXG4gIFxuICAvLyBEZWZhdWx0IHRlbXBlcmF0dXJlIGZvciBtb3N0IG9wZXJhdGlvbnNcbiAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgXG4gIC8vIERlZmF1bHQgc3lzdGVtIHByb21wdCBmb3IgUkFHIHF1ZXJpZXNcbiAgc3lzdGVtUHJvbXB0OiBgWW91IGFyZSBhbiBBSSBhc3Npc3RhbnQgZm9yIHRoZSBzYWxlcyB0ZWFtLiBcbkFuc3dlciB0aGUgcXVlc3Rpb24gYmFzZWQgT05MWSBvbiB0aGUgY29udGV4dCBwcm92aWRlZC4gXG5JZiB0aGUgYW5zd2VyIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGZyb20gdGhlIGNvbnRleHQsIHNheSBcIkkgZG9uJ3QgaGF2ZSBlbm91Z2ggaW5mb3JtYXRpb24gdG8gYW5zd2VyIHRoaXMgcXVlc3Rpb24uXCJcbkRvIG5vdCBtYWtlIHVwIG9yIGluZmVyIGluZm9ybWF0aW9uIHRoYXQgaXMgbm90IGluIHRoZSBjb250ZXh0LlxuUHJvdmlkZSBjb25jaXNlLCBhY2N1cmF0ZSByZXNwb25zZXMgd2l0aCBhbGwgcmVsZXZhbnQgZGV0YWlscyBmcm9tIHRoZSBjb250ZXh0LmBcbn07XG5cbi8qKlxuICogRGlmZmVyZW50IHByZXNldCBzeXN0ZW0gcHJvbXB0cyBmb3IgdmFyaW91cyB1c2UgY2FzZXNcbiAqL1xuZXhwb3J0IGNvbnN0IFNZU1RFTV9QUk9NUFRTID0ge1xuICBzdGFuZGFyZDogQUlfU0VUVElOR1Muc3lzdGVtUHJvbXB0LFxuICBcbiAgdGVjaG5pY2FsOiBgWW91IGFyZSBhbiBBSSBhc3Npc3RhbnQgZm9yIHRoZSBzYWxlcyB0ZWFtIHNwZWNpYWxpemluZyBpbiB0ZWNobmljYWwgcXVlc3Rpb25zLlxuQW5zd2VyIHRoZSBxdWVzdGlvbiBiYXNlZCBPTkxZIG9uIHRoZSBjb250ZXh0IHByb3ZpZGVkLlxuVXNlIHRlY2huaWNhbCBsYW5ndWFnZSBhbmQgYmUgcHJlY2lzZSBpbiB5b3VyIGV4cGxhbmF0aW9ucy5cbklmIHRoZSBhbnN3ZXIgY2Fubm90IGJlIGRldGVybWluZWQgZnJvbSB0aGUgY29udGV4dCwgc2F5IFwiSSBkb24ndCBoYXZlIGVub3VnaCBpbmZvcm1hdGlvbiB0byBhbnN3ZXIgdGhpcyBxdWVzdGlvbi5cIlxuRG8gbm90IG1ha2UgdXAgb3IgaW5mZXIgaW5mb3JtYXRpb24gdGhhdCBpcyBub3QgaW4gdGhlIGNvbnRleHQuYCxcbiAgXG4gIHNhbGVzOiBgWW91IGFyZSBhbiBBSSBhc3Npc3RhbnQgZm9yIHRoZSBzYWxlcyB0ZWFtIHNwZWNpYWxpemluZyBpbiBzYWxlcyBxdWVyaWVzLlxuQW5zd2VyIHRoZSBxdWVzdGlvbiBiYXNlZCBPTkxZIG9uIHRoZSBjb250ZXh0IHByb3ZpZGVkLlxuRm9jdXMgb24gdmFsdWUgcHJvcG9zaXRpb25zLCBjb21wZXRpdGl2ZSBhZHZhbnRhZ2VzLCBhbmQgYWRkcmVzc2luZyBjdXN0b21lciBwYWluIHBvaW50cy5cbklmIHRoZSBhbnN3ZXIgY2Fubm90IGJlIGRldGVybWluZWQgZnJvbSB0aGUgY29udGV4dCwgc2F5IFwiSSBkb24ndCBoYXZlIGVub3VnaCBpbmZvcm1hdGlvbiB0byBhbnN3ZXIgdGhpcyBxdWVzdGlvbi5cIlxuRG8gbm90IG1ha2UgdXAgb3IgaW5mZXIgaW5mb3JtYXRpb24gdGhhdCBpcyBub3QgaW4gdGhlIGNvbnRleHQuYCxcbiAgXG4gIHByaWNpbmc6IGBZb3UgYXJlIGFuIEFJIGFzc2lzdGFudCBmb3IgdGhlIHNhbGVzIHRlYW0gc3BlY2lhbGl6aW5nIGluIHByaWNpbmcgcXVlc3Rpb25zLlxuQW5zd2VyIHRoZSBxdWVzdGlvbiBiYXNlZCBPTkxZIG9uIHRoZSBjb250ZXh0IHByb3ZpZGVkLlxuQmUgdmVyeSBwcmVjaXNlIGFib3V0IHByaWNpbmcgZGV0YWlscywgcGxhbnMsIGFuZCBzdWJzY3JpcHRpb24gb3B0aW9ucy5cbklmIHRoZSBhbnN3ZXIgY2Fubm90IGJlIGRldGVybWluZWQgZnJvbSB0aGUgY29udGV4dCwgc2F5IFwiSSBkb24ndCBoYXZlIGVub3VnaCBpbmZvcm1hdGlvbiB0byBhbnN3ZXIgdGhpcyBxdWVzdGlvbi5cIlxuRG8gbm90IG1ha2UgdXAgb3IgaW5mZXIgaW5mb3JtYXRpb24gdGhhdCBpcyBub3QgaW4gdGhlIGNvbnRleHQuYFxufTtcblxuLyoqXG4gKiBHZXQgc3lzdGVtIHByb21wdCBiYXNlZCBvbiBxdWVyeSB0eXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTeXN0ZW1Qcm9tcHRGb3JRdWVyeShxdWVyeTogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgbG93ZXJRdWVyeSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCk7XG4gIFxuICBpZiAobG93ZXJRdWVyeS5pbmNsdWRlcygncHJpY2UnKSB8fCBcbiAgICAgIGxvd2VyUXVlcnkuaW5jbHVkZXMoJ2Nvc3QnKSB8fCBcbiAgICAgIGxvd2VyUXVlcnkuaW5jbHVkZXMoJ3N1YnNjcmlwdGlvbicpIHx8XG4gICAgICBsb3dlclF1ZXJ5LmluY2x1ZGVzKCdwbGFuJykpIHtcbiAgICByZXR1cm4gU1lTVEVNX1BST01QVFMucHJpY2luZztcbiAgfVxuICBcbiAgaWYgKGxvd2VyUXVlcnkuaW5jbHVkZXMoJ3RlY2huaWNhbCcpIHx8IFxuICAgICAgbG93ZXJRdWVyeS5pbmNsdWRlcygnYXJjaGl0ZWN0dXJlJykgfHwgXG4gICAgICBsb3dlclF1ZXJ5LmluY2x1ZGVzKCdpbmZyYXN0cnVjdHVyZScpIHx8XG4gICAgICBsb3dlclF1ZXJ5LmluY2x1ZGVzKCdpbnRlZ3JhdGlvbicpKSB7XG4gICAgcmV0dXJuIFNZU1RFTV9QUk9NUFRTLnRlY2huaWNhbDtcbiAgfVxuICBcbiAgaWYgKGxvd2VyUXVlcnkuaW5jbHVkZXMoJ2NvbXBldGl0b3InKSB8fCBcbiAgICAgIGxvd2VyUXVlcnkuaW5jbHVkZXMoJ2NvbXBhcmlzb24nKSB8fCBcbiAgICAgIGxvd2VyUXVlcnkuaW5jbHVkZXMoJ3ZzJykgfHxcbiAgICAgIGxvd2VyUXVlcnkuaW5jbHVkZXMoJ3BpdGNoJykgfHxcbiAgICAgIGxvd2VyUXVlcnkuaW5jbHVkZXMoJ3NlbGwnKSkge1xuICAgIHJldHVybiBTWVNURU1fUFJPTVBUUy5zYWxlcztcbiAgfVxuICBcbiAgcmV0dXJuIFNZU1RFTV9QUk9NUFRTLnN0YW5kYXJkO1xufSAiXSwibmFtZXMiOlsiQUlfU0VUVElOR1MiLCJkZWZhdWx0TW9kZWwiLCJwcm9jZXNzIiwiZW52IiwiREVGQVVMVF9MTE1fTU9ERUwiLCJmYWxsYmFja01vZGVsIiwiRkFMTEJBQ0tfTExNX01PREVMIiwiZW1iZWRkaW5nTW9kZWwiLCJFTUJFRERJTkdfTU9ERUwiLCJtYXhUb2tlbnMiLCJ0ZW1wZXJhdHVyZSIsInN5c3RlbVByb21wdCIsIlNZU1RFTV9QUk9NUFRTIiwic3RhbmRhcmQiLCJ0ZWNobmljYWwiLCJzYWxlcyIsInByaWNpbmciLCJnZXRTeXN0ZW1Qcm9tcHRGb3JRdWVyeSIsInF1ZXJ5IiwibG93ZXJRdWVyeSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./utils/modelConfig.ts\n");

/***/ }),

/***/ "(api)/./utils/openaiClient.ts":
/*!*******************************!*\
  !*** ./utils/openaiClient.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchProcessPrompts: () => (/* binding */ batchProcessPrompts),\n/* harmony export */   embedText: () => (/* binding */ embedText),\n/* harmony export */   generateChatCompletion: () => (/* binding */ generateChatCompletion),\n/* harmony export */   generateStructuredResponse: () => (/* binding */ generateStructuredResponse),\n/* harmony export */   openai: () => (/* binding */ openai),\n/* harmony export */   rankTextsForQuery: () => (/* binding */ rankTextsForQuery)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var _modelConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modelConfig */ \"(api)/./utils/modelConfig.ts\");\n/* harmony import */ var _errorHandling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errorHandling */ \"(api)/./utils/errorHandling.ts\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dotenv */ \"dotenv\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, _errorHandling__WEBPACK_IMPORTED_MODULE_2__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, _errorHandling__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * OpenAI client utility for the RAG system\n * Handles API interactions with OpenAI including embeddings and chat completions\n */ \n\n\n\n// Load environment variables\ndotenv__WEBPACK_IMPORTED_MODULE_3__.config();\n// Initialize OpenAI client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\n * Generate embeddings for text using OpenAI\n * Used for vector similarity search\n */ async function embedText(text) {\n    try {\n        // Clean and prepare text\n        const cleanedText = text.trim().replace(/\\n+/g, \" \");\n        // Get embedding from OpenAI\n        const response = await openai.embeddings.create({\n            model: _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.embeddingModel,\n            input: cleanedText\n        });\n        // Return the embedding vector\n        return response.data[0].embedding;\n    } catch (error) {\n        (0,_errorHandling__WEBPACK_IMPORTED_MODULE_2__.logError)(error, \"embedText\");\n        // In case of error, return a zero vector as fallback\n        // This should be handled by the calling function\n        console.error(\"Error generating embedding:\", error);\n        return Array(1536).fill(0);\n    }\n}\n/**\n * Generate a chat completion using OpenAI\n */ async function generateChatCompletion(systemPrompt, userPrompt, model = _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.defaultModel, jsonMode = false) {\n    try {\n        const messages = [\n            {\n                role: \"system\",\n                content: systemPrompt\n            },\n            {\n                role: \"user\",\n                content: userPrompt\n            }\n        ];\n        // If model isn't specified, use default\n        const modelToUse = model || _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.defaultModel;\n        // Only include response_format if jsonMode is true and we're using a compatible model (GPT-4 and above)\n        const supportsJsonMode = modelToUse.includes(\"gpt-4\") || modelToUse.includes(\"gpt-3.5-turbo-16k\") || modelToUse.includes(\"gpt-3.5-turbo-1106\");\n        // Call OpenAI API\n        const response = await openai.chat.completions.create({\n            model: modelToUse,\n            messages,\n            temperature: _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.temperature,\n            max_tokens: _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.maxTokens,\n            response_format: jsonMode && supportsJsonMode ? {\n                type: \"json_object\"\n            } : undefined\n        });\n        // Extract and return the response text\n        return response.choices[0].message.content || \"\";\n    } catch (error) {\n        console.error(\"Error generating chat completion:\", error);\n        // Try fallback model if primary fails\n        if (model === _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.defaultModel) {\n            console.log(\"Attempting with fallback model...\");\n            return generateChatCompletion(systemPrompt, userPrompt, _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.fallbackModel, jsonMode);\n        }\n        // If fallback also fails, return error message\n        return \"I apologize, but I encountered an issue processing your request. Please try again later.\";\n    }\n}\n/**\n * Generate a structured response with JSON output\n */ async function generateStructuredResponse(systemPrompt, userPrompt, responseSchema, model = _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.defaultModel) {\n    try {\n        // Append schema information to system prompt\n        const schemaPrompt = `${systemPrompt}\n    \nReturn your response in the following JSON format:\n${JSON.stringify(responseSchema, null, 2)}\n\nYour response MUST be a valid JSON object with no additional text, explanations, or formatting.`;\n        // Generate completion with JSON mode enabled if the model supports it\n        const response = await generateChatCompletion(schemaPrompt, userPrompt, model, true);\n        try {\n            // Try to parse JSON response\n            return JSON.parse(response);\n        } catch (jsonError) {\n            // If JSON parsing fails, try to extract JSON from the response\n            // This can happen with models that don't support jsonMode\n            const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                return JSON.parse(jsonMatch[0]);\n            }\n            console.error(\"Failed to parse JSON response:\", jsonError);\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error generating structured response:\", error);\n        return null;\n    }\n}\n/**\n * Batch process multiple prompts with a single API call \n * Useful for re-ranking to save on API calls\n */ async function batchProcessPrompts(systemPrompt, userPrompts, model = _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.defaultModel, options = {}) {\n    // Set a timeout\n    const timeoutMs = options.timeoutMs || 10000;\n    try {\n        // Create a Promise for the API call\n        const apiPromise = Promise.all(userPrompts.map((userPrompt)=>generateChatCompletion(systemPrompt, userPrompt, model, options.jsonMode || false)));\n        // Create a timeout Promise\n        const timeoutPromise = new Promise((_, reject)=>{\n            setTimeout(()=>{\n                reject(new Error(`Batch processing timed out after ${timeoutMs}ms`));\n            }, timeoutMs);\n        });\n        // Race the API call against the timeout\n        return await Promise.race([\n            apiPromise,\n            timeoutPromise\n        ]);\n    } catch (error) {\n        (0,_errorHandling__WEBPACK_IMPORTED_MODULE_2__.logError)(error, \"batchProcessPrompts\");\n        // Return empty results on error\n        return userPrompts.map(()=>\"\");\n    }\n}\n/**\n * Process a batch of texts with an LLM for re-ranking\n * Specialized function for re-ranking that processes multiple documents\n * with a single API call for efficiency\n */ async function rankTextsForQuery(query, texts, model = _modelConfig__WEBPACK_IMPORTED_MODULE_1__.AI_SETTINGS.fallbackModel, options = {}) {\n    try {\n        // Create the system prompt for re-ranking\n        const systemPrompt = `You are a document relevance judge. Rate how relevant each document is to the query on a scale of 0-10 where:\n- 10: Perfect match with specific details answering the query\n- 7-9: Highly relevant with key information related to the query\n- 4-6: Somewhat relevant but lacks specific details\n- 1-3: Only tangentially related to the query\n- 0: Not relevant at all\n\nReturn a JSON object with only scores in this format:\n{\"scores\": [score1, score2, ...]}\n\nYour response MUST be a valid JSON object with no additional text, explanations, or formatting.`;\n        // Create a single user prompt with all texts\n        const userPrompt = `Query: ${query}\n\n${texts.map((text, i)=>`DOCUMENT ${i + 1}:\n${text.substring(0, 600)}${text.length > 600 ? \"...\" : \"\"}`).join(\"\\n\\n\")}\n\nProvide a relevance score from 0-10 for each document based on how well it answers the query.`;\n        // Generate the ranking with a timeout\n        const timeoutMs = options.timeoutMs || 15000;\n        const rankingPromise = generateStructuredResponse(systemPrompt, userPrompt, {\n            scores: []\n        }, model);\n        // Create a timeout Promise\n        const timeoutPromise = new Promise((_, reject)=>{\n            setTimeout(()=>{\n                reject(new Error(`Re-ranking timed out after ${timeoutMs}ms`));\n            }, timeoutMs);\n        });\n        // Race the API call against the timeout\n        const response = await Promise.race([\n            rankingPromise,\n            timeoutPromise\n        ]);\n        // Return scores\n        if (response && Array.isArray(response.scores)) {\n            return response.scores;\n        } else {\n            console.warn(\"Invalid scores format received, using default scores\");\n            return texts.map(()=>5); // Default to middle score if failed\n        }\n    } catch (error) {\n        console.error(\"Error in rankTextsForQuery:\", error);\n        return texts.map(()=>5); // Default score on error\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/openaiClient.ts\n");

/***/ }),

/***/ "(api)/./utils/queryExpansion.ts":
/*!*********************************!*\
  !*** ./utils/queryExpansion.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_EXPANSION_OPTIONS: () => (/* binding */ DEFAULT_EXPANSION_OPTIONS),\n/* harmony export */   analyzeQuery: () => (/* binding */ analyzeQuery),\n/* harmony export */   expandQuery: () => (/* binding */ expandQuery),\n/* harmony export */   keywordQueryExpansion: () => (/* binding */ keywordQueryExpansion),\n/* harmony export */   semanticQueryExpansion: () => (/* binding */ semanticQueryExpansion)\n/* harmony export */ });\n/* harmony import */ var _openaiClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./openaiClient */ \"(api)/./utils/openaiClient.ts\");\n/* harmony import */ var _tokenization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokenization */ \"(api)/./utils/tokenization.ts\");\n/* harmony import */ var _errorHandling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errorHandling */ \"(api)/./utils/errorHandling.ts\");\n/* harmony import */ var _caching__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./caching */ \"(api)/./utils/caching.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_openaiClient__WEBPACK_IMPORTED_MODULE_0__, _errorHandling__WEBPACK_IMPORTED_MODULE_2__]);\n([_openaiClient__WEBPACK_IMPORTED_MODULE_0__, _errorHandling__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * Query Expansion Module\n * \n * This module provides functionality to expand user queries with related terms\n * to improve retrieval performance, especially for complex or ambiguous queries.\n */ \n\n\n\n/**\n * Default options for query expansion\n */ const DEFAULT_EXPANSION_OPTIONS = {\n    maxExpandedTerms: 4,\n    model: \"gpt-3.5-turbo\",\n    useSemanticExpansion: true,\n    useKeywordExpansion: true,\n    semanticWeight: 0.7,\n    includeMetadata: true,\n    timeoutMs: 2000,\n    enableCaching: true,\n    cacheTtlSeconds: 86400,\n    debug: false\n};\n/**\n * Expand a query using semantic techniques (LLM-based)\n * \n * This approach uses language models to understand query intent\n * and generate related terms.\n */ async function semanticQueryExpansion(query, options = {}) {\n    const config = {\n        ...DEFAULT_EXPANSION_OPTIONS,\n        ...options\n    };\n    const startTime = Date.now();\n    // Try to get cached result if caching is enabled\n    if (config.enableCaching) {\n        const cacheKey = `semantic_expansion:${query}`;\n        const cachedResult = await (0,_caching__WEBPACK_IMPORTED_MODULE_3__.getCachedResult)(cacheKey);\n        if (cachedResult) {\n            if (config.debug) {\n                console.log(`Cache hit for semantic expansion of query: \"${query}\"`);\n            }\n            return cachedResult;\n        }\n    }\n    try {\n        // Create system prompt for semantic expansion\n        // More targeted prompt based on query type to improve relevance\n        const systemPrompt = `You are an expert in information retrieval helping to improve search quality.\nYour task is to expand the user's query with related terms to improve search results.\nFocus on adding precise, targeted phrases that might appear in relevant documents.\nThe phrases should be concise (2-5 words) and directly related to the original query.\nDo NOT change the original meaning or intent of the query.\nReturn ONLY a JSON array of additional search terms (no explanations).\nLimit your response to the most effective expansion terms.`;\n        // Create user prompt - using better instruction for more focused expansion\n        const userPrompt = `Original Query: ${query}\n    \nPlease provide up to ${config.maxExpandedTerms} additional phrases that would be effective for retrieving relevant documents.\nConsider:\n- Alternative terminology experts might use\n- Specific phrases likely to appear in authoritative sources\n- Terms that clarify ambiguous aspects of the query\n- Focus on precision over recall\n\nReturn as a JSON array of strings.`;\n        // Set up timeout for semantic expansion\n        const expansionPromise = (0,_openaiClient__WEBPACK_IMPORTED_MODULE_0__.generateStructuredResponse)(systemPrompt, userPrompt, [], config.model);\n        // Add timeout using AbortController instead of Promise.race for cleaner cancellation\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), config.timeoutMs);\n        try {\n            // Try structured response first (most reliable)\n            const result = await expansionPromise;\n            clearTimeout(timeoutId);\n            if (Array.isArray(result)) {\n                const validTerms = result.filter((term)=>typeof term === \"string\" && term.length > 0 && term.length < 60 && // Reasonable length limit\n                    !query.toLowerCase().includes(term.toLowerCase())).slice(0, config.maxExpandedTerms);\n                // Cache the result if caching is enabled\n                if (config.enableCaching && validTerms.length > 0) {\n                    const cacheKey = `semantic_expansion:${query}`;\n                    await (0,_caching__WEBPACK_IMPORTED_MODULE_3__.cacheResult)(cacheKey, validTerms, config.cacheTtlSeconds);\n                }\n                return validTerms;\n            }\n        } catch (structuredError) {\n            // If structured response fails, try fallback\n            if (config.debug) {\n                console.log(`Structured expansion failed for \"${query}\". Using fallback.`);\n            }\n        }\n        // Fallback to simpler expansion if structured response fails\n        try {\n            const fallbackResponse = await (0,_openaiClient__WEBPACK_IMPORTED_MODULE_0__.generateChatCompletion)(\"You are a search query expansion expert. Provide only related search terms, no explanations.\", `Generate ${config.maxExpandedTerms} search terms related to: \"${query}\"\\nReturn one term per line, no numbering or bullets.`, config.model, false);\n            // Parse the response to extract terms (one per line)\n            const terms = fallbackResponse.split(\"\\n\").map((line)=>line.trim().replace(/^[•\\-\\d.\\s]+/, \"\")) // Remove bullets, numbers\n            .filter((line)=>line && !line.startsWith(\"-\") && line.length > 2 && line.length < 60 && !query.toLowerCase().includes(line.toLowerCase())).slice(0, config.maxExpandedTerms);\n            // Cache the result if caching is enabled\n            if (config.enableCaching && terms.length > 0) {\n                const cacheKey = `semantic_expansion:${query}`;\n                await (0,_caching__WEBPACK_IMPORTED_MODULE_3__.cacheResult)(cacheKey, terms, config.cacheTtlSeconds);\n            }\n            return terms;\n        } catch (fallbackError) {\n            (0,_errorHandling__WEBPACK_IMPORTED_MODULE_2__.logError)(fallbackError, \"semanticQueryExpansion:fallback\");\n            return []; // Return empty array if all methods fail\n        }\n    } catch (error) {\n        (0,_errorHandling__WEBPACK_IMPORTED_MODULE_2__.logError)(error, \"semanticQueryExpansion\");\n        return []; // Return empty array on error\n    } finally{\n        if (config.debug) {\n            const duration = Date.now() - startTime;\n            console.log(`Semantic expansion took ${duration}ms for query: \"${query}\"`);\n        }\n    }\n}\n/**\n * Expand a query using keyword-based techniques\n * \n * This simpler approach uses word forms, common synonyms, and\n * domain-specific transformations.\n */ function keywordQueryExpansion(query, options = {}) {\n    const config = {\n        ...DEFAULT_EXPANSION_OPTIONS,\n        ...options\n    };\n    const startTime = Date.now();\n    // Try to get cached result if caching is enabled\n    if (config.enableCaching) {\n        const cacheKey = `keyword_expansion:${query}`;\n        const cachedResult = (0,_caching__WEBPACK_IMPORTED_MODULE_3__.getCachedResult)(cacheKey);\n        if (cachedResult && Array.isArray(cachedResult)) {\n            if (config.debug) {\n                console.log(`Cache hit for keyword expansion of query: \"${query}\"`);\n            }\n            return cachedResult;\n        }\n    }\n    try {\n        // Tokenize the query\n        const tokens = (0,_tokenization__WEBPACK_IMPORTED_MODULE_1__.tokenize)(query);\n        const expandedTerms = [];\n        const queryLower = query.toLowerCase();\n        // Common business terms synonyms/related terms - expanded with more relevant terms\n        const synonymMap = {\n            \"price\": [\n                \"cost\",\n                \"pricing\",\n                \"fee\",\n                \"subscription\",\n                \"pricing plans\"\n            ],\n            \"pricing\": [\n                \"price\",\n                \"cost\",\n                \"fee\",\n                \"subscription\",\n                \"rate card\"\n            ],\n            \"cost\": [\n                \"price\",\n                \"pricing\",\n                \"expense\",\n                \"fee\",\n                \"budget\"\n            ],\n            \"discount\": [\n                \"offer\",\n                \"deal\",\n                \"promotion\",\n                \"reduced\",\n                \"savings\",\n                \"special offer\"\n            ],\n            \"feature\": [\n                \"capability\",\n                \"functionality\",\n                \"option\",\n                \"service\",\n                \"tool\"\n            ],\n            \"security\": [\n                \"protection\",\n                \"privacy\",\n                \"secure\",\n                \"encryption\",\n                \"data protection\"\n            ],\n            \"support\": [\n                \"help\",\n                \"assistance\",\n                \"service\",\n                \"customer service\",\n                \"technical support\"\n            ],\n            \"compare\": [\n                \"comparison\",\n                \"versus\",\n                \"vs\",\n                \"difference\",\n                \"competitive analysis\"\n            ],\n            \"competitor\": [\n                \"competition\",\n                \"alternative\",\n                \"rival\",\n                \"industry peer\",\n                \"market competitor\"\n            ],\n            \"enterprise\": [\n                \"business\",\n                \"corporate\",\n                \"company\",\n                \"organization\",\n                \"large company\"\n            ],\n            \"plan\": [\n                \"package\",\n                \"tier\",\n                \"subscription\",\n                \"offering\",\n                \"service level\"\n            ],\n            \"basic\": [\n                \"starter\",\n                \"standard\",\n                \"entry-level\",\n                \"fundamental\",\n                \"essential\"\n            ],\n            \"professional\": [\n                \"premium\",\n                \"advanced\",\n                \"expert\",\n                \"pro\",\n                \"business level\"\n            ],\n            \"upgrade\": [\n                \"enhance\",\n                \"improve\",\n                \"advance\",\n                \"move up\",\n                \"switch plans\"\n            ],\n            \"team\": [\n                \"group\",\n                \"staff\",\n                \"employees\",\n                \"workforce\",\n                \"personnel\"\n            ],\n            \"user\": [\n                \"account\",\n                \"seat\",\n                \"license\",\n                \"member\",\n                \"individual\"\n            ]\n        };\n        // Domain-specific transformations - more focused on query type\n        // Pricing queries\n        if (queryLower.includes(\"price\") || queryLower.includes(\"cost\") || queryLower.includes(\"pricing\")) {\n            expandedTerms.push(\"pricing plans\");\n            expandedTerms.push(\"subscription options\");\n            if (queryLower.includes(\"enterprise\") || queryLower.includes(\"business\") || queryLower.includes(\"corporate\")) {\n                expandedTerms.push(\"enterprise pricing\");\n                expandedTerms.push(\"business rates\");\n            }\n            if (queryLower.includes(\"basic\") || queryLower.includes(\"standard\")) {\n                expandedTerms.push(\"basic plan pricing\");\n                expandedTerms.push(\"standard tier cost\");\n            }\n        }\n        // Compare/competitor queries\n        if (queryLower.includes(\"compare\") || queryLower.includes(\"competitor\") || queryLower.includes(\"vs\")) {\n            expandedTerms.push(\"versus competitors\");\n            expandedTerms.push(\"competitive advantage\");\n            expandedTerms.push(\"product comparison\");\n        }\n        // Discount queries\n        if (queryLower.includes(\"discount\") || queryLower.includes(\"offer\")) {\n            expandedTerms.push(\"special pricing\");\n            expandedTerms.push(\"promotional discount\");\n            expandedTerms.push(\"volume discount\");\n            if (queryLower.includes(\"education\") || queryLower.includes(\"student\") || queryLower.includes(\"school\")) {\n                expandedTerms.push(\"educational discount\");\n                expandedTerms.push(\"academic pricing\");\n            }\n        }\n        // Feature queries\n        if (queryLower.includes(\"feature\") || queryLower.includes(\"include\") || queryLower.includes(\"offer\")) {\n            expandedTerms.push(\"product features\");\n            expandedTerms.push(\"included capabilities\");\n            expandedTerms.push(\"service offerings\");\n        }\n        // Add synonyms for each token\n        for (const token of tokens){\n            const lowerToken = token.toLowerCase();\n            if (synonymMap[lowerToken]) {\n                // Add relevant synonyms\n                expandedTerms.push(...synonymMap[lowerToken]);\n            }\n        }\n        // Remove duplicates and limit to max terms\n        const uniqueTerms = [\n            ...new Set(expandedTerms)\n        ].filter((term)=>!queryLower.includes(term.toLowerCase())).slice(0, config.maxExpandedTerms);\n        // Cache the result if caching is enabled\n        if (config.enableCaching && uniqueTerms.length > 0) {\n            const cacheKey = `keyword_expansion:${query}`;\n            (0,_caching__WEBPACK_IMPORTED_MODULE_3__.cacheResult)(cacheKey, uniqueTerms, config.cacheTtlSeconds);\n        }\n        if (config.debug) {\n            const duration = Date.now() - startTime;\n            console.log(`Keyword expansion took ${duration}ms for query: \"${query}\"`);\n        }\n        return uniqueTerms;\n    } catch (error) {\n        (0,_errorHandling__WEBPACK_IMPORTED_MODULE_2__.logError)(error, \"keywordQueryExpansion\");\n        return []; // Return empty array on error\n    }\n}\n/**\n * Analyze query to determine domain context and technical level\n */ async function analyzeQuery(query) {\n    try {\n        // Try to get cached result\n        const cacheKey = `query_analysis:${query}`;\n        const cachedResult = await (0,_caching__WEBPACK_IMPORTED_MODULE_3__.getCachedResult)(cacheKey);\n        if (cachedResult) {\n            return cachedResult;\n        }\n        const systemPrompt = `You are an expert query analyzer. Analyze the given query and determine:\n1. Technical level (1-5 scale where 1=basic, 5=highly technical)\n2. Domain context (single word: pricing, technical, support, feature, comparison, general)\n3. Complexity (1-5 scale where 1=simple, 5=complex)`;\n        const userPrompt = `Query: ${query}\n    \nPlease analyze this query and return a JSON object with technicalLevel (number 1-5), domainContext (string), and complexity (number 1-5).`;\n        const result = await (0,_openaiClient__WEBPACK_IMPORTED_MODULE_0__.generateStructuredResponse)(systemPrompt, userPrompt, {\n            technicalLevel: 1,\n            domainContext: \"general\",\n            complexity: 1\n        }, \"gpt-3.5-turbo\");\n        const analysis = {\n            technicalLevel: result?.technicalLevel || 1,\n            domainContext: result?.domainContext || \"general\",\n            complexity: result?.complexity || 1\n        };\n        // Cache the result\n        await (0,_caching__WEBPACK_IMPORTED_MODULE_3__.cacheResult)(cacheKey, analysis, 86400); // 24 hours TTL\n        return analysis;\n    } catch (error) {\n        (0,_errorHandling__WEBPACK_IMPORTED_MODULE_2__.logError)(error, \"analyzeQuery\");\n        return {\n            technicalLevel: 1,\n            domainContext: \"general\",\n            complexity: 1\n        };\n    }\n}\n/**\n * Main function to expand a query using multiple techniques\n */ async function expandQuery(query, options = {}) {\n    const config = {\n        ...DEFAULT_EXPANSION_OPTIONS,\n        ...options\n    };\n    let expansionType = \"none\";\n    let addedTerms = [];\n    const startTime = Date.now();\n    try {\n        if (config.debug) {\n            console.log(`Expanding query: \"${query}\"`);\n        }\n        // Try to get cached full expansion result\n        if (config.enableCaching) {\n            const cacheKey = `full_expansion:${query}:${config.useSemanticExpansion}:${config.useKeywordExpansion}:${config.maxExpandedTerms}`;\n            const cachedResult = await (0,_caching__WEBPACK_IMPORTED_MODULE_3__.getCachedResult)(cacheKey);\n            if (cachedResult) {\n                if (config.debug) {\n                    console.log(`Cache hit for full expansion of query: \"${query}\"`);\n                }\n                return {\n                    ...cachedResult,\n                    processingTimeMs: 0 // Cached result has no processing time\n                };\n            }\n        }\n        // Get query analysis to determine expansion strategy\n        let analysis = {\n            technicalLevel: 1,\n            domainContext: \"general\",\n            complexity: 1\n        };\n        if (config.includeMetadata || config.debug) {\n            analysis = await analyzeQuery(query);\n        }\n        // Adjust semantic/keyword weights based on query characteristics\n        let dynamicSemanticWeight = config.semanticWeight;\n        // More complex or technical queries benefit from semantic expansion\n        if (analysis.complexity > 3 || analysis.technicalLevel > 3) {\n            dynamicSemanticWeight = Math.min(0.9, dynamicSemanticWeight + 0.2);\n        }\n        // Simple pricing or feature queries often do well with keyword expansion\n        if (analysis.complexity < 2 && (analysis.domainContext === \"pricing\" || analysis.domainContext === \"feature\")) {\n            dynamicSemanticWeight = Math.max(0.3, dynamicSemanticWeight - 0.2);\n        }\n        if (config.debug) {\n            console.log(`Query analysis: level=${analysis.technicalLevel}, domain=${analysis.domainContext}, complexity=${analysis.complexity}`);\n            console.log(`Using semantic weight: ${dynamicSemanticWeight}`);\n        }\n        // Start with an empty set of added terms\n        addedTerms = [];\n        // Try semantic expansion if enabled\n        const semanticTerms = [];\n        if (config.useSemanticExpansion) {\n            const semResults = await semanticQueryExpansion(query, {\n                ...config,\n                maxExpandedTerms: Math.ceil(config.maxExpandedTerms * dynamicSemanticWeight)\n            });\n            if (semResults.length > 0) {\n                semanticTerms.push(...semResults);\n                expansionType = \"semantic\";\n            }\n        }\n        // Add keyword-based expansion if enabled\n        const keywordTerms = [];\n        if (config.useKeywordExpansion) {\n            const kwResults = keywordQueryExpansion(query, {\n                ...config,\n                maxExpandedTerms: Math.ceil(config.maxExpandedTerms * (1 - dynamicSemanticWeight))\n            });\n            if (kwResults.length > 0) {\n                keywordTerms.push(...kwResults);\n                expansionType = semanticTerms.length > 0 ? \"hybrid\" : \"keyword\";\n            }\n        }\n        // Combine results based on weights\n        if (semanticTerms.length > 0 && keywordTerms.length > 0) {\n            // Calculate how many terms to take from each source\n            const semanticCount = Math.min(semanticTerms.length, Math.max(1, Math.round(config.maxExpandedTerms * dynamicSemanticWeight)));\n            const keywordCount = Math.min(keywordTerms.length, config.maxExpandedTerms - semanticCount);\n            addedTerms = [\n                ...semanticTerms.slice(0, semanticCount),\n                ...keywordTerms.slice(0, keywordCount)\n            ];\n            expansionType = \"hybrid\";\n        } else {\n            // Just add whatever we have\n            addedTerms = [\n                ...semanticTerms,\n                ...keywordTerms\n            ];\n        }\n        // Remove duplicates and filter out terms already in the query\n        addedTerms = [\n            ...new Set(addedTerms)\n        ].filter((term)=>!query.toLowerCase().includes(term.toLowerCase())).slice(0, config.maxExpandedTerms);\n        // Create expanded query by combining original with added terms\n        const expandedQuery = addedTerms.length > 0 ? `${query} ${addedTerms.join(\" \")}` : query;\n        if (config.debug) {\n            console.log(`Original query: \"${query}\"`);\n            console.log(`Expanded query: \"${expandedQuery}\"`);\n            console.log(`Added terms: ${addedTerms.join(\", \")}`);\n            console.log(`Expansion type: ${expansionType}`);\n        }\n        const result = {\n            originalQuery: query,\n            expandedQuery,\n            addedTerms,\n            expansionType,\n            technicalLevel: analysis.technicalLevel,\n            domainContext: analysis.domainContext,\n            processingTimeMs: Date.now() - startTime\n        };\n        // Cache the result\n        if (config.enableCaching && addedTerms.length > 0) {\n            const cacheKey = `full_expansion:${query}:${config.useSemanticExpansion}:${config.useKeywordExpansion}:${config.maxExpandedTerms}`;\n            await (0,_caching__WEBPACK_IMPORTED_MODULE_3__.cacheResult)(cacheKey, result, config.cacheTtlSeconds);\n        }\n        return result;\n    } catch (error) {\n        (0,_errorHandling__WEBPACK_IMPORTED_MODULE_2__.logError)(error, \"expandQuery\");\n        const processingTime = Date.now() - startTime;\n        // Return original query on error\n        return {\n            originalQuery: query,\n            expandedQuery: query,\n            addedTerms: [],\n            expansionType: \"none\",\n            processingTimeMs: processingTime\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/queryExpansion.ts\n");

/***/ }),

/***/ "(api)/./utils/reranking.ts":
/*!****************************!*\
  !*** ./utils/reranking.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RERANKING_OPTIONS: () => (/* binding */ DEFAULT_RERANKING_OPTIONS),\n/* harmony export */   rerankResults: () => (/* binding */ rerankResults),\n/* harmony export */   rerankResultsWithExplanations: () => (/* binding */ rerankResultsWithExplanations)\n/* harmony export */ });\n/* harmony import */ var _openaiClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./openaiClient */ \"(api)/./utils/openaiClient.ts\");\n/* harmony import */ var _errorHandling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errorHandling */ \"(api)/./utils/errorHandling.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_openaiClient__WEBPACK_IMPORTED_MODULE_0__, _errorHandling__WEBPACK_IMPORTED_MODULE_1__]);\n([_openaiClient__WEBPACK_IMPORTED_MODULE_0__, _errorHandling__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * Re-ranking Module\n * \n * This module provides LLM-based re-ranking functionality for search results,\n * improving result relevance by using AI to judge the quality of each result\n * in relation to the user's query.\n */ \n\n/**\n * Default re-ranking options\n */ const DEFAULT_RERANKING_OPTIONS = {\n    returnTopN: 5,\n    model: \"gpt-3.5-turbo\",\n    parallelBatching: true,\n    timeoutMs: 10000,\n    batchSize: 5,\n    debug: false\n};\n/**\n * Re-rank search results using LLM relevance judgments\n * \n * This function takes the results from hybrid search and uses an LLM to\n * evaluate how relevant each document is to the original query.\n */ async function rerankResults(query, results, options = {}) {\n    // Apply default options\n    const config = {\n        ...DEFAULT_RERANKING_OPTIONS,\n        ...options\n    };\n    if (config.debug) {\n        console.log(`Re-ranking ${results.length} results for query: \"${query}\"`);\n    }\n    // Early return if no results\n    if (!results || results.length === 0) {\n        return [];\n    }\n    try {\n        // Split results into batches to avoid context limits\n        const batches = [];\n        for(let i = 0; i < results.length; i += config.batchSize){\n            batches.push(results.slice(i, i + config.batchSize));\n        }\n        if (config.debug) {\n            console.log(`Created ${batches.length} batches for re-ranking`);\n        }\n        // Process each batch either in parallel or sequentially\n        let rerankedResults = [];\n        if (config.parallelBatching) {\n            // Process batches in parallel with timeout protection\n            const batchPromises = batches.map((batch, idx)=>processReRankingBatch(query, batch, idx, config));\n            // Wait for all batches with timeout\n            const batchesWithTimeout = await Promise.all(batchPromises.map((promise)=>Promise.race([\n                    promise,\n                    new Promise((resolve)=>setTimeout(()=>resolve([]), config.timeoutMs))\n                ])));\n            // Flatten batch results\n            rerankedResults = batchesWithTimeout.flat();\n        } else {\n            // Process batches sequentially\n            for(let i = 0; i < batches.length; i++){\n                const batchResults = await processReRankingBatch(query, batches[i], i, config);\n                rerankedResults = [\n                    ...rerankedResults,\n                    ...batchResults\n                ];\n            }\n        }\n        // Sort by final score (descending) and limit to top N\n        const sortedResults = rerankedResults.sort((a, b)=>b.finalScore - a.finalScore).slice(0, config.returnTopN);\n        if (config.debug) {\n            console.log(`Re-ranking complete. Returning top ${sortedResults.length} results`);\n            sortedResults.forEach((result, i)=>{\n                console.log(`[${i + 1}] Final score: ${result.finalScore.toFixed(3)} (BM25: ${result.originalResult.bm25Score.toFixed(3)}, Vector: ${result.originalResult.vectorScore.toFixed(3)}, Rerank: ${result.rerankScore.toFixed(3)})`);\n            });\n        }\n        return sortedResults;\n    } catch (error) {\n        (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.logError)(error, \"rerankResults\");\n        // Fall back to original results on error\n        const fallbackResults = results.map((result)=>({\n                originalResult: result,\n                rerankScore: result.combinedScore * 10,\n                finalScore: result.combinedScore\n            }));\n        return fallbackResults.sort((a, b)=>b.finalScore - a.finalScore).slice(0, config.returnTopN);\n    }\n}\n/**\n * Process a batch of results for re-ranking\n */ async function processReRankingBatch(query, batch, batchIndex, config) {\n    try {\n        // Create a system prompt that explains how to judge relevance\n        const systemPrompt = `You are a document relevance judge. Your task is to evaluate how relevant each document is to the given query on a scale of 0-10, where:\n- 10: Perfect match that directly and completely answers the query with specific details\n- 7-9: Highly relevant with most key information related to the query\n- 4-6: Somewhat relevant but lacks specific details or only partially addresses the query\n- 1-3: Only tangentially related to the query\n- 0: Not relevant at all\n\nFocus on how well the document answers the specific information need in the query.\nReturn a JSON object with your numerical scores in this format:\n{\"scores\": [number, number, ...]}`;\n        // Create a user prompt with the query and documents to score\n        const userPrompt = `Query: ${query}\n\n${batch.map((result, i)=>`DOCUMENT ${batchIndex * config.batchSize + i + 1}:\n${result.item.text.substring(0, 600)}${result.item.text.length > 600 ? \"...\" : \"\"}`).join(\"\\n\\n\")}\n\nProvide a relevance score from 0-10 for each document based on how well it answers the query.`;\n        // Generate scores using the LLM\n        const response = await (0,_openaiClient__WEBPACK_IMPORTED_MODULE_0__.generateStructuredResponse)(systemPrompt, userPrompt, {\n            scores: []\n        }, config.model);\n        // Extract scores from the response\n        const scores = response?.scores || [];\n        if (config.debug) {\n            console.log(`Batch ${batchIndex + 1} re-ranking scores:`, scores);\n        }\n        // Map scores to results\n        return batch.map((result, idx)=>{\n            const rerankScore = scores[idx] !== undefined ? scores[idx] : 5; // Default to middle score if missing\n            // Calculate final score - weighted combination of original score and rerank score\n            // Original score is typically 0-1, rerank score is 0-10, so normalize\n            const vectorWeight = 0.3;\n            const bm25Weight = 0.2;\n            const rerankWeight = 0.5; // Higher weight for LLM judgment\n            const finalScore = vectorWeight * result.vectorScore + bm25Weight * result.bm25Score + rerankWeight * (rerankScore / 10);\n            return {\n                originalResult: result,\n                rerankScore,\n                finalScore\n            };\n        });\n    } catch (error) {\n        (0,_errorHandling__WEBPACK_IMPORTED_MODULE_1__.logError)(error, `processReRankingBatch_${batchIndex}`);\n        // Fallback - use original scores\n        return batch.map((result)=>({\n                originalResult: result,\n                rerankScore: result.combinedScore * 10,\n                finalScore: result.combinedScore\n            }));\n    }\n}\n/**\n * Enhanced version of reranking that provides explanation for each score\n * Useful for debugging and understanding why results were ranked as they were\n */ async function rerankResultsWithExplanations(query, results, options = {}) {\n    const config = {\n        ...DEFAULT_RERANKING_OPTIONS,\n        ...options\n    };\n    // Process just the top result for detailed analysis\n    const topResult = results.length > 0 ? results[0] : null;\n    if (!topResult) {\n        return [];\n    }\n    try {\n        // Get the text of the top result for the LLM to evaluate\n        const documentText = topResult.item.text.substring(0, 800);\n        // Create a system prompt for explaining relevance (without requiring JSON)\n        const systemPrompt = `You are a document relevance judge. \nYour task is to evaluate how relevant a document is to a user query on a scale of 0-10.\nProvide your evaluation in the following format:\nScore: [NUMBER]/10\nExplanation: [YOUR EXPLANATION]\n\nBe specific about why the document is or isn't relevant to the query.`;\n        // Create a detailed user prompt\n        const userPrompt = `Query: \"${query}\"\n\nDocument:\n${documentText}\n\nEvaluate the relevance of this document to the query. Score it from 0-10 and explain your reasoning in 1-2 sentences.`;\n        // Generate response without requiring JSON format\n        const response = await (0,_openaiClient__WEBPACK_IMPORTED_MODULE_0__.generateChatCompletion)(systemPrompt, userPrompt, config.model, false // Don't use JSON mode\n        );\n        // Parse the response to extract score and explanation\n        const scoreRegex = /Score:\\s*(\\d+(?:\\.\\d+)?)\\s*\\/\\s*10/i;\n        const explanationRegex = /Explanation:\\s*(.*?)(?:\\n|$)/is;\n        const scoreMatch = response.match(scoreRegex);\n        const explanationMatch = response.match(explanationRegex);\n        const score = scoreMatch ? parseFloat(scoreMatch[1]) : 5;\n        const explanation = explanationMatch ? explanationMatch[1].trim() : response;\n        // Return the result with explanation\n        return [\n            {\n                originalResult: topResult,\n                rerankScore: score,\n                finalScore: 0.5 * (score / 10) + 0.5 * topResult.combinedScore,\n                explanation: explanation || \"No explanation provided\"\n            }\n        ];\n    } catch (error) {\n        console.error(\"Error in rerankResultsWithExplanations:\", error);\n        // Try with fallback model if main model fails\n        try {\n            const fallbackModel = config.model === \"gpt-4\" ? \"gpt-3.5-turbo\" : \"gpt-3.5-turbo\";\n            const fallbackSystemPrompt = `You are evaluating document relevance. Rate the document's relevance to the query from 0-10 and explain why.`;\n            const fallbackUserPrompt = `Query: ${query}\\n\\nDocument: ${topResult.item.text.substring(0, 400)}`;\n            const fallbackResponse = await (0,_openaiClient__WEBPACK_IMPORTED_MODULE_0__.generateChatCompletion)(fallbackSystemPrompt, fallbackUserPrompt, fallbackModel, false);\n            // Extract a score if possible\n            const scoreMatch = fallbackResponse.match(/(\\d+(?:\\.\\d+)?)\\s*\\/\\s*10/);\n            const score = scoreMatch ? parseFloat(scoreMatch[1]) : 5;\n            return [\n                {\n                    originalResult: topResult,\n                    rerankScore: score,\n                    finalScore: topResult.combinedScore,\n                    explanation: fallbackResponse\n                }\n            ];\n        } catch (fallbackError) {\n            // Final fallback with default values\n            return [\n                {\n                    originalResult: topResult,\n                    rerankScore: 5,\n                    finalScore: topResult.combinedScore,\n                    explanation: \"Unable to generate explanation due to an error.\"\n                }\n            ];\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/reranking.ts\n");

/***/ }),

/***/ "(api)/./utils/tokenization.ts":
/*!*******************************!*\
  !*** ./utils/tokenization.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   countTermFrequency: () => (/* binding */ countTermFrequency),\n/* harmony export */   getDocumentLength: () => (/* binding */ getDocumentLength),\n/* harmony export */   getTermFrequencies: () => (/* binding */ getTermFrequencies),\n/* harmony export */   getUniqueTerms: () => (/* binding */ getUniqueTerms),\n/* harmony export */   getWordCount: () => (/* binding */ getWordCount),\n/* harmony export */   normalizedTermFrequency: () => (/* binding */ normalizedTermFrequency),\n/* harmony export */   porterStem: () => (/* binding */ porterStem),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n/**\n * Text tokenization utilities for BM25 implementation\n * Handles text normalization, stopword removal, and stemming\n */ // Common English stopwords to filter out\nconst STOP_WORDS = new Set([\n    \"a\",\n    \"an\",\n    \"and\",\n    \"are\",\n    \"as\",\n    \"at\",\n    \"be\",\n    \"but\",\n    \"by\",\n    \"for\",\n    \"if\",\n    \"in\",\n    \"into\",\n    \"is\",\n    \"it\",\n    \"no\",\n    \"not\",\n    \"of\",\n    \"on\",\n    \"or\",\n    \"such\",\n    \"that\",\n    \"the\",\n    \"their\",\n    \"then\",\n    \"there\",\n    \"these\",\n    \"they\",\n    \"this\",\n    \"to\",\n    \"was\",\n    \"will\",\n    \"with\"\n]);\n/**\n * Simple Porter stemming algorithm implementation\n * Reduces words to their root form (e.g., \"running\" -> \"run\")\n */ function porterStem(word) {\n    // This is a simplified stemmer - in production, use the 'natural' NPM package\n    // Convert to lowercase\n    word = word.toLowerCase();\n    // Handle basic plurals and past tense\n    if (word.endsWith(\"ies\") && word.length > 3) {\n        return word.slice(0, -3) + \"y\";\n    }\n    if (word.endsWith(\"es\") && word.length > 3) {\n        return word.slice(0, -2);\n    }\n    if (word.endsWith(\"s\") && !word.endsWith(\"ss\") && word.length > 2) {\n        return word.slice(0, -1);\n    }\n    if (word.endsWith(\"ed\") && word.length > 3) {\n        return word.slice(0, -2);\n    }\n    if (word.endsWith(\"ing\") && word.length > 4) {\n        return word.slice(0, -3);\n    }\n    return word;\n}\n/**\n * Tokenizes a text string into an array of terms\n * Performs basic text normalization:\n * - Convert to lowercase\n * - Remove punctuation\n * - Split on whitespace\n * - Remove stopwords\n * - Remove very short tokens\n * \n * @param text The text to tokenize\n * @returns Array of tokenized terms\n */ function tokenize(text) {\n    if (!text || typeof text !== \"string\") {\n        return [];\n    }\n    // Convert to lowercase\n    const lowercased = text.toLowerCase();\n    // Replace punctuation with spaces\n    const noPunctuation = lowercased.replace(/[^\\w\\s]|_/g, \" \");\n    // Split on whitespace\n    const tokens = noPunctuation.split(/\\s+/).filter((token)=>token.length > 0);\n    // Filter out stopwords and very short tokens\n    return tokens.filter((token)=>token.length > 1 && !STOP_WORDS.has(token));\n}\n/**\n * Count term frequency in a text\n * \n * @param text The text to analyze\n * @returns Object mapping each term to its frequency\n */ function countTermFrequency(text) {\n    const tokens = tokenize(text);\n    const termFrequency = {};\n    for (const token of tokens){\n        termFrequency[token] = (termFrequency[token] || 0) + 1;\n    }\n    return termFrequency;\n}\n/**\n * Get the total number of terms in a document (excluding stopwords)\n * \n * @param text The text to analyze\n * @returns The number of terms in the document\n */ function getDocumentLength(text) {\n    return tokenize(text).length;\n}\n/**\n * Count term frequencies in a text\n * Returns a map of terms to their frequency\n */ function getTermFrequencies(text) {\n    const terms = tokenize(text);\n    const frequencies = {};\n    terms.forEach((term)=>{\n        frequencies[term] = (frequencies[term] || 0) + 1;\n    });\n    return frequencies;\n}\n/**\n * Get unique terms from a text\n * Returns a Set of unique terms\n */ function getUniqueTerms(text) {\n    return new Set(tokenize(text));\n}\n/**\n * Calculate the term frequency normalized by document length\n */ function normalizedTermFrequency(term, text) {\n    const terms = tokenize(text);\n    const termCount = terms.filter((t)=>t === term).length;\n    return termCount / terms.length;\n}\n/**\n * Get word count for a given text\n * Used for document length calculations\n */ function getWordCount(text) {\n    return text.split(/\\s+/).filter((word)=>word.length > 0).length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0NBR0MsR0FDTSxTQUFTRyxlQUFlakIsSUFBWTtJQUN6QyxPQUFPLElBQUlSLElBQUlPLFNBQVNDO0FBQzFCO0FBRUE7O0NBRUMsR0FDTSxTQUFTa0Isd0JBQXdCRixJQUFZLEVBQUVoQixJQUFZO0lBQ2hFLE1BQU1hLFFBQVFkLFNBQVNDO0lBQ3ZCLE1BQU1tQixZQUFZTixNQUFNUCxNQUFNLENBQUNjLENBQUFBLElBQUtBLE1BQU1KLE1BQU1uQixNQUFNO0lBQ3RELE9BQU9zQixZQUFZTixNQUFNaEIsTUFBTTtBQUNqQztBQUVBOzs7Q0FHQyxHQUNNLFNBQVN3QixhQUFhckIsSUFBWTtJQUN2QyxPQUFPQSxLQUFLSyxLQUFLLENBQUMsT0FBT0MsTUFBTSxDQUFDWixDQUFBQSxPQUFRQSxLQUFLRyxNQUFNLEdBQUcsR0FBR0EsTUFBTTtBQUNqRSIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbGVzLWNoYXQtb3BlbmFpLXJhZy8uL3V0aWxzL3Rva2VuaXphdGlvbi50cz9iMWMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGV4dCB0b2tlbml6YXRpb24gdXRpbGl0aWVzIGZvciBCTTI1IGltcGxlbWVudGF0aW9uXG4gKiBIYW5kbGVzIHRleHQgbm9ybWFsaXphdGlvbiwgc3RvcHdvcmQgcmVtb3ZhbCwgYW5kIHN0ZW1taW5nXG4gKi9cblxuLy8gQ29tbW9uIEVuZ2xpc2ggc3RvcHdvcmRzIHRvIGZpbHRlciBvdXRcbmNvbnN0IFNUT1BfV09SRFMgPSBuZXcgU2V0KFtcbiAgJ2EnLCAnYW4nLCAnYW5kJywgJ2FyZScsICdhcycsICdhdCcsICdiZScsICdidXQnLCAnYnknLCAnZm9yJywgJ2lmJywgJ2luJywgXG4gICdpbnRvJywgJ2lzJywgJ2l0JywgJ25vJywgJ25vdCcsICdvZicsICdvbicsICdvcicsICdzdWNoJywgJ3RoYXQnLCAndGhlJywgXG4gICd0aGVpcicsICd0aGVuJywgJ3RoZXJlJywgJ3RoZXNlJywgJ3RoZXknLCAndGhpcycsICd0bycsICd3YXMnLCAnd2lsbCcsICd3aXRoJ1xuXSk7XG5cbi8qKlxuICogU2ltcGxlIFBvcnRlciBzdGVtbWluZyBhbGdvcml0aG0gaW1wbGVtZW50YXRpb25cbiAqIFJlZHVjZXMgd29yZHMgdG8gdGhlaXIgcm9vdCBmb3JtIChlLmcuLCBcInJ1bm5pbmdcIiAtPiBcInJ1blwiKVxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9ydGVyU3RlbSh3b3JkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyBUaGlzIGlzIGEgc2ltcGxpZmllZCBzdGVtbWVyIC0gaW4gcHJvZHVjdGlvbiwgdXNlIHRoZSAnbmF0dXJhbCcgTlBNIHBhY2thZ2VcbiAgXG4gIC8vIENvbnZlcnQgdG8gbG93ZXJjYXNlXG4gIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gIFxuICAvLyBIYW5kbGUgYmFzaWMgcGx1cmFscyBhbmQgcGFzdCB0ZW5zZVxuICBpZiAod29yZC5lbmRzV2l0aCgnaWVzJykgJiYgd29yZC5sZW5ndGggPiAzKSB7XG4gICAgcmV0dXJuIHdvcmQuc2xpY2UoMCwgLTMpICsgJ3knO1xuICB9XG4gIGlmICh3b3JkLmVuZHNXaXRoKCdlcycpICYmIHdvcmQubGVuZ3RoID4gMykge1xuICAgIHJldHVybiB3b3JkLnNsaWNlKDAsIC0yKTtcbiAgfVxuICBpZiAod29yZC5lbmRzV2l0aCgncycpICYmICF3b3JkLmVuZHNXaXRoKCdzcycpICYmIHdvcmQubGVuZ3RoID4gMikge1xuICAgIHJldHVybiB3b3JkLnNsaWNlKDAsIC0xKTtcbiAgfVxuICBpZiAod29yZC5lbmRzV2l0aCgnZWQnKSAmJiB3b3JkLmxlbmd0aCA+IDMpIHtcbiAgICByZXR1cm4gd29yZC5zbGljZSgwLCAtMik7XG4gIH1cbiAgaWYgKHdvcmQuZW5kc1dpdGgoJ2luZycpICYmIHdvcmQubGVuZ3RoID4gNCkge1xuICAgIHJldHVybiB3b3JkLnNsaWNlKDAsIC0zKTtcbiAgfVxuICBcbiAgcmV0dXJuIHdvcmQ7XG59XG5cbi8qKlxuICogVG9rZW5pemVzIGEgdGV4dCBzdHJpbmcgaW50byBhbiBhcnJheSBvZiB0ZXJtc1xuICogUGVyZm9ybXMgYmFzaWMgdGV4dCBub3JtYWxpemF0aW9uOlxuICogLSBDb252ZXJ0IHRvIGxvd2VyY2FzZVxuICogLSBSZW1vdmUgcHVuY3R1YXRpb25cbiAqIC0gU3BsaXQgb24gd2hpdGVzcGFjZVxuICogLSBSZW1vdmUgc3RvcHdvcmRzXG4gKiAtIFJlbW92ZSB2ZXJ5IHNob3J0IHRva2Vuc1xuICogXG4gKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byB0b2tlbml6ZVxuICogQHJldHVybnMgQXJyYXkgb2YgdG9rZW5pemVkIHRlcm1zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGlmICghdGV4dCB8fCB0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgXG4gIC8vIENvbnZlcnQgdG8gbG93ZXJjYXNlXG4gIGNvbnN0IGxvd2VyY2FzZWQgPSB0ZXh0LnRvTG93ZXJDYXNlKCk7XG4gIFxuICAvLyBSZXBsYWNlIHB1bmN0dWF0aW9uIHdpdGggc3BhY2VzXG4gIGNvbnN0IG5vUHVuY3R1YXRpb24gPSBsb3dlcmNhc2VkLnJlcGxhY2UoL1teXFx3XFxzXXxfL2csICcgJyk7XG4gIFxuICAvLyBTcGxpdCBvbiB3aGl0ZXNwYWNlXG4gIGNvbnN0IHRva2VucyA9IG5vUHVuY3R1YXRpb24uc3BsaXQoL1xccysvKS5maWx0ZXIodG9rZW4gPT4gdG9rZW4ubGVuZ3RoID4gMCk7XG4gIFxuICAvLyBGaWx0ZXIgb3V0IHN0b3B3b3JkcyBhbmQgdmVyeSBzaG9ydCB0b2tlbnNcbiAgcmV0dXJuIHRva2Vucy5maWx0ZXIodG9rZW4gPT4gXG4gICAgdG9rZW4ubGVuZ3RoID4gMSAmJiAhU1RPUF9XT1JEUy5oYXModG9rZW4pXG4gICk7XG59XG5cbi8qKlxuICogQ291bnQgdGVybSBmcmVxdWVuY3kgaW4gYSB0ZXh0XG4gKiBcbiAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRvIGFuYWx5emVcbiAqIEByZXR1cm5zIE9iamVjdCBtYXBwaW5nIGVhY2ggdGVybSB0byBpdHMgZnJlcXVlbmN5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3VudFRlcm1GcmVxdWVuY3kodGV4dDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XG4gIGNvbnN0IHRva2VucyA9IHRva2VuaXplKHRleHQpO1xuICBjb25zdCB0ZXJtRnJlcXVlbmN5OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gIFxuICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgIHRlcm1GcmVxdWVuY3lbdG9rZW5dID0gKHRlcm1GcmVxdWVuY3lbdG9rZW5dIHx8IDApICsgMTtcbiAgfVxuICBcbiAgcmV0dXJuIHRlcm1GcmVxdWVuY3k7XG59XG5cbi8qKlxuICogR2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgdGVybXMgaW4gYSBkb2N1bWVudCAoZXhjbHVkaW5nIHN0b3B3b3JkcylcbiAqIFxuICogQHBhcmFtIHRleHQgVGhlIHRleHQgdG8gYW5hbHl6ZVxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiB0ZXJtcyBpbiB0aGUgZG9jdW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERvY3VtZW50TGVuZ3RoKHRleHQ6IHN0cmluZyk6IG51bWJlciB7XG4gIHJldHVybiB0b2tlbml6ZSh0ZXh0KS5sZW5ndGg7XG59XG5cbi8qKlxuICogQ291bnQgdGVybSBmcmVxdWVuY2llcyBpbiBhIHRleHRcbiAqIFJldHVybnMgYSBtYXAgb2YgdGVybXMgdG8gdGhlaXIgZnJlcXVlbmN5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtRnJlcXVlbmNpZXModGV4dDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XG4gIGNvbnN0IHRlcm1zID0gdG9rZW5pemUodGV4dCk7XG4gIGNvbnN0IGZyZXF1ZW5jaWVzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gIFxuICB0ZXJtcy5mb3JFYWNoKHRlcm0gPT4ge1xuICAgIGZyZXF1ZW5jaWVzW3Rlcm1dID0gKGZyZXF1ZW5jaWVzW3Rlcm1dIHx8IDApICsgMTtcbiAgfSk7XG4gIFxuICByZXR1cm4gZnJlcXVlbmNpZXM7XG59XG5cbi8qKlxuICogR2V0IHVuaXF1ZSB0ZXJtcyBmcm9tIGEgdGV4dFxuICogUmV0dXJucyBhIFNldCBvZiB1bmlxdWUgdGVybXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXF1ZVRlcm1zKHRleHQ6IHN0cmluZyk6IFNldDxzdHJpbmc+IHtcbiAgcmV0dXJuIG5ldyBTZXQodG9rZW5pemUodGV4dCkpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgdGVybSBmcmVxdWVuY3kgbm9ybWFsaXplZCBieSBkb2N1bWVudCBsZW5ndGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUZXJtRnJlcXVlbmN5KHRlcm06IHN0cmluZywgdGV4dDogc3RyaW5nKTogbnVtYmVyIHtcbiAgY29uc3QgdGVybXMgPSB0b2tlbml6ZSh0ZXh0KTtcbiAgY29uc3QgdGVybUNvdW50ID0gdGVybXMuZmlsdGVyKHQgPT4gdCA9PT0gdGVybSkubGVuZ3RoO1xuICByZXR1cm4gdGVybUNvdW50IC8gdGVybXMubGVuZ3RoO1xufVxuXG4vKipcbiAqIEdldCB3b3JkIGNvdW50IGZvciBhIGdpdmVuIHRleHRcbiAqIFVzZWQgZm9yIGRvY3VtZW50IGxlbmd0aCBjYWxjdWxhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdvcmRDb3VudCh0ZXh0OiBzdHJpbmcpOiBudW1iZXIge1xuICByZXR1cm4gdGV4dC5zcGxpdCgvXFxzKy8pLmZpbHRlcih3b3JkID0+IHdvcmQubGVuZ3RoID4gMCkubGVuZ3RoO1xufSAiXSwibmFtZXMiOlsiU1RPUF9XT1JEUyIsIlNldCIsInBvcnRlclN0ZW0iLCJ3b3JkIiwidG9Mb3dlckNhc2UiLCJlbmRzV2l0aCIsImxlbmd0aCIsInNsaWNlIiwidG9rZW5pemUiLCJ0ZXh0IiwibG93ZXJjYXNlZCIsIm5vUHVuY3R1YXRpb24iLCJyZXBsYWNlIiwidG9rZW5zIiwic3BsaXQiLCJmaWx0ZXIiLCJ0b2tlbiIsImhhcyIsImNvdW50VGVybUZyZXF1ZW5jeSIsInRlcm1GcmVxdWVuY3kiLCJnZXREb2N1bWVudExlbmd0aCIsImdldFRlcm1GcmVxdWVuY2llcyIsInRlcm1zIiwiZnJlcXVlbmNpZXMiLCJmb3JFYWNoIiwidGVybSIsImdldFVuaXF1ZVRlcm1zIiwibm9ybWFsaXplZFRlcm1GcmVxdWVuY3kiLCJ0ZXJtQ291bnQiLCJ0IiwiZ2V0V29yZENvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./utils/tokenization.ts\n");

/***/ }),

/***/ "(api)/./utils/vectorStore.ts":
/*!******************************!*\
  !*** ./utils/vectorStore.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToVectorStore: () => (/* binding */ addToVectorStore),\n/* harmony export */   clearVectorStore: () => (/* binding */ clearVectorStore),\n/* harmony export */   cosineSimilarity: () => (/* binding */ cosineSimilarity),\n/* harmony export */   getAllVectorStoreItems: () => (/* binding */ getAllVectorStoreItems),\n/* harmony export */   getSimilarItems: () => (/* binding */ getSimilarItems),\n/* harmony export */   getVectorStoreSize: () => (/* binding */ getVectorStoreSize),\n/* harmony export */   vectorStore: () => (/* binding */ vectorStore)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Constants for batch processing\nconst VECTOR_STORE_DIR = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"vector_batches\");\nconst BATCH_INDEX_FILE = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"batch_index.json\");\nconst MAX_BATCH_SIZE = 1000; // Maximum items per batch file\n// In-memory vector store (now loads from multiple files)\nlet vectorStore = [];\nlet activeBatches = [];\n// Initialize vector store directory\nfunction initVectorStore() {\n    // Ensure data directory exists\n    const dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\");\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dataDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dataDir, {\n            recursive: true\n        });\n    }\n    // Ensure vector_batches directory exists\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(VECTOR_STORE_DIR)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(VECTOR_STORE_DIR, {\n            recursive: true\n        });\n    }\n    // Create batch index if it doesn't exist\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(BATCH_INDEX_FILE)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(BATCH_INDEX_FILE, JSON.stringify({\n            activeBatches: [],\n            lastUpdated: Date.now()\n        }));\n    }\n}\n// Load vector store index and all active batches\nfunction loadVectorStore() {\n    try {\n        initVectorStore();\n        console.log(\"Loading vector store batches...\");\n        // Read the batch index\n        const indexData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(BATCH_INDEX_FILE, \"utf-8\"));\n        activeBatches = indexData.activeBatches || [];\n        // Load each active batch\n        vectorStore = [];\n        let totalLoaded = 0;\n        for (const batchId of activeBatches){\n            const batchFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(VECTOR_STORE_DIR, `batch_${batchId}.json`);\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(batchFile)) {\n                try {\n                    const batchData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(batchFile, \"utf-8\"));\n                    vectorStore = [\n                        ...vectorStore,\n                        ...batchData\n                    ];\n                    totalLoaded += batchData.length;\n                    console.log(`Loaded batch ${batchId} with ${batchData.length} items`);\n                } catch (error) {\n                    console.error(`Error loading batch ${batchId}:`, error);\n                }\n            }\n        }\n        // If no batches were loaded, try loading from single vectorStore.json file as fallback\n        if (totalLoaded === 0) {\n            const singleStoreFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"vectorStore.json\");\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(singleStoreFile)) {\n                try {\n                    const fileData = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(singleStoreFile, \"utf8\");\n                    const parsedData = JSON.parse(fileData);\n                    // Handle both formats: array of items or {items: [...]} structure\n                    if (Array.isArray(parsedData)) {\n                        vectorStore = parsedData;\n                        totalLoaded = parsedData.length;\n                    } else if (parsedData.items && Array.isArray(parsedData.items)) {\n                        vectorStore = parsedData.items;\n                        totalLoaded = parsedData.items.length;\n                    }\n                    console.log(`Loaded ${totalLoaded} items from single vectorStore.json file`);\n                } catch (error) {\n                    console.error(\"Error loading from single vectorStore.json file:\", error);\n                }\n            }\n        }\n        console.log(`Loaded ${totalLoaded} total items from ${activeBatches.length} batches and fallback sources`);\n    } catch (error) {\n        console.error(\"Error loading vector store:\", error);\n        vectorStore = [];\n        activeBatches = [];\n    }\n}\n// Create a new batch and add it to the index\nfunction createNewBatch() {\n    const batchId = Date.now().toString();\n    activeBatches.push(batchId);\n    // Update the batch index\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(BATCH_INDEX_FILE, JSON.stringify({\n        activeBatches,\n        lastUpdated: Date.now()\n    }, null, 2));\n    console.log(`Created new batch: ${batchId}`);\n    return batchId;\n}\n// Save a specific batch to disk\nfunction saveBatch(batchId, items) {\n    const batchFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(VECTOR_STORE_DIR, `batch_${batchId}.json`);\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(batchFile, JSON.stringify(items, null, 2));\n    console.log(`Saved batch ${batchId} with ${items.length} items`);\n}\n// Save the current state of all batches\nfunction saveVectorStore() {\n    try {\n        if (activeBatches.length === 0 && vectorStore.length > 0) {\n            // First-time save - create initial batch\n            const initialBatchId = createNewBatch();\n            // Add batch metadata to all items\n            vectorStore = vectorStore.map((item)=>({\n                    ...item,\n                    metadata: {\n                        ...item.metadata,\n                        batch: initialBatchId\n                    }\n                }));\n            // Save as first batch\n            saveBatch(initialBatchId, vectorStore);\n        } else {\n            // Group items by batch\n            const batchMap = {};\n            // Find items without batch ID (newly added)\n            const unbatchedItems = vectorStore.filter((item)=>!item.metadata?.batch);\n            if (unbatchedItems.length > 0) {\n                // Get current batch or create new one\n                let currentBatchId = activeBatches[activeBatches.length - 1];\n                if (currentBatchId) {\n                    // Count items in the current batch\n                    const currentBatchCount = vectorStore.filter((item)=>item.metadata?.batch === currentBatchId).length;\n                    // Create a new batch if current one is too full\n                    if (currentBatchCount + unbatchedItems.length > MAX_BATCH_SIZE) {\n                        currentBatchId = createNewBatch();\n                    }\n                } else {\n                    // No batches exist yet, create the first one\n                    currentBatchId = createNewBatch();\n                }\n                // Assign batch ID to unbatched items\n                unbatchedItems.forEach((item)=>{\n                    if (!item.metadata) item.metadata = {};\n                    item.metadata.batch = currentBatchId;\n                });\n            }\n            // Group all items by batch\n            vectorStore.forEach((item)=>{\n                const batchId = item.metadata?.batch;\n                if (batchId) {\n                    if (!batchMap[batchId]) batchMap[batchId] = [];\n                    batchMap[batchId].push(item);\n                }\n            });\n            // Save each batch\n            Object.entries(batchMap).forEach(([batchId, items])=>{\n                if (items.length > 0) {\n                    saveBatch(batchId, items);\n                }\n            });\n        }\n        // Update index file\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(BATCH_INDEX_FILE, JSON.stringify({\n            activeBatches,\n            lastUpdated: Date.now()\n        }, null, 2));\n        // Also save to the single vectorStore.json file as a backup\n        const singleStoreFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"vectorStore.json\");\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(singleStoreFile, JSON.stringify({\n            items: vectorStore,\n            lastUpdated: Date.now()\n        }, null, 2));\n        console.log(`Saved vector store with ${activeBatches.length} batches and ${vectorStore.length} total items`);\n    } catch (error) {\n        console.error(\"Error saving vector store:\", error);\n    }\n}\n/**\n * Calculate cosine similarity between two vectors\n * @param vecA First vector\n * @param vecB Second vector\n * @returns Cosine similarity score (0-1)\n */ function cosineSimilarity(vecA, vecB) {\n    const dot = vecA.reduce((sum, a, i)=>sum + a * vecB[i], 0);\n    const magA = Math.sqrt(vecA.reduce((sum, a)=>sum + a * a, 0));\n    const magB = Math.sqrt(vecB.reduce((sum, b)=>sum + b * b, 0));\n    return dot / (magA * magB);\n}\n/**\n * Add an item or multiple items to the vector store\n * @param items Single item or array of items to add\n */ function addToVectorStore(items) {\n    // Convert single item to array\n    const itemsArray = Array.isArray(items) ? items : [\n        items\n    ];\n    if (itemsArray.length === 0) return;\n    // Add to in-memory store\n    vectorStore = [\n        ...vectorStore,\n        ...itemsArray\n    ];\n    // Save changes to disk\n    saveVectorStore();\n}\n// Enhanced version of getSimilarItems with stronger emphasis on structured data\nfunction getSimilarItems(queryEmbedding, limit = 5, queryText, priorityInfoType) {\n    // Check if the vector store is initialized\n    if (!vectorStore || vectorStore.length === 0) {\n        loadVectorStore();\n    }\n    if (!vectorStore || vectorStore.length === 0) {\n        console.warn(\"Vector store is empty. No results to return.\");\n        return [];\n    }\n    console.log(\"Searching for similar items...\");\n    // Look for certain types of inquiries to boost specific content\n    let shouldBoostStructuredInfo = false;\n    let shouldBoostCompanyValues = false;\n    let shouldBoostInvestors = false;\n    let shouldBoostLeadership = false;\n    let shouldBoostPricing = false;\n    let shouldBoostProductFeatures = false;\n    let shouldBoostSalesInfo = false;\n    if (queryText) {\n        const queryLower = queryText.toLowerCase();\n        // Check for company values inquiries\n        shouldBoostCompanyValues = queryLower.includes(\"value\") || queryLower.includes(\"culture\") || queryLower.includes(\"principle\") || queryLower.includes(\"mission\") || queryLower.includes(\"vision\");\n        // Check for investor inquiries\n        shouldBoostInvestors = queryLower.includes(\"investor\") || queryLower.includes(\"funding\") || queryLower.includes(\"backed by\") || queryLower.includes(\"invested\");\n        // Check for leadership inquiries\n        shouldBoostLeadership = queryLower.includes(\"founder\") || queryLower.includes(\"ceo\") || queryLower.includes(\"leader\") || queryLower.includes(\"executive\");\n        // Check for pricing inquiries\n        shouldBoostPricing = queryLower.includes(\"pricing\") || queryLower.includes(\"price\") || queryLower.includes(\"cost\") || queryLower.includes(\"subscription\") || queryLower.includes(\"plan\") || queryLower.includes(\"tier\");\n        // Check for product feature inquiries  \n        shouldBoostProductFeatures = queryLower.includes(\"feature\") || queryLower.includes(\"function\") || queryLower.includes(\"capability\") || queryLower.includes(\"how does it work\") || queryLower.includes(\"what does it do\");\n        // Check for sales information inquiries\n        shouldBoostSalesInfo = queryLower.includes(\"sell\") || queryLower.includes(\"pitch\") || queryLower.includes(\"competitor\") || queryLower.includes(\"comparison\");\n        // Set the overall structured info flag if any specific type should be boosted\n        shouldBoostStructuredInfo = shouldBoostCompanyValues || shouldBoostInvestors || shouldBoostLeadership || shouldBoostPricing || shouldBoostProductFeatures || shouldBoostSalesInfo;\n    }\n    // Calculate similarity scores\n    const itemsWithScores = vectorStore.map((item)=>{\n        // Compute base score using cosine similarity\n        let score = cosineSimilarity(queryEmbedding, item.embedding);\n        // Apply boosting for structured information when relevant\n        if (shouldBoostStructuredInfo && item.metadata?.isStructured) {\n            // Specific boosts for different types of structured information\n            const infoType = item.metadata?.infoType;\n            // Handle the case when a specific info type is prioritized\n            if (priorityInfoType && infoType === priorityInfoType) {\n                score *= 1.5; // Strong boost for exact info type match\n            } else if (shouldBoostCompanyValues && infoType === \"company_values\") {\n                score *= 1.3;\n            } else if (shouldBoostInvestors && infoType === \"investors\") {\n                score *= 1.3;\n            } else if (shouldBoostLeadership && infoType === \"leadership\") {\n                score *= 1.3;\n            } else if (shouldBoostPricing && infoType === \"pricing\") {\n                score *= 1.3;\n            } else if (shouldBoostProductFeatures && infoType === \"product_features\") {\n                score *= 1.3;\n            } else if (shouldBoostSalesInfo && infoType === \"sales_info\") {\n                score *= 1.3;\n            } else if (item.metadata?.isStructured) {\n                // General boost for any structured info\n                score *= 1.1;\n            }\n        }\n        return {\n            ...item,\n            score\n        };\n    });\n    // Sort by similarity score\n    const sortedResults = itemsWithScores.sort((a, b)=>b.score - a.score);\n    // Get the top results, but ensure priority structured info is included if relevant\n    let result = sortedResults.slice(0, limit);\n    // Check if we need to guarantee inclusion of specific structured info\n    if (shouldBoostStructuredInfo) {\n        // Check if we already have a relevant piece of structured information\n        let hasRelevantStructuredInfo = false;\n        // Use the priorityInfoType if available, otherwise check all relevant types\n        if (priorityInfoType) {\n            hasRelevantStructuredInfo = result.some((item)=>item.metadata?.infoType === priorityInfoType);\n        } else {\n            hasRelevantStructuredInfo = result.some((item)=>{\n                const infoType = item.metadata?.infoType;\n                return shouldBoostCompanyValues && infoType === \"company_values\" || shouldBoostInvestors && infoType === \"investors\" || shouldBoostLeadership && infoType === \"leadership\" || shouldBoostPricing && infoType === \"pricing\" || shouldBoostProductFeatures && infoType === \"product_features\" || shouldBoostSalesInfo && infoType === \"sales_info\";\n            });\n        }\n        // If we don't have the relevant info in our top results, find and include it\n        if (!hasRelevantStructuredInfo) {\n            let structuredInfoToInclude;\n            if (priorityInfoType) {\n                // Look for the specific priority info type\n                structuredInfoToInclude = sortedResults.find((item)=>item.metadata?.infoType === priorityInfoType && !result.includes(item));\n            } else {\n                // Look for any relevant structured info type\n                structuredInfoToInclude = sortedResults.find((item)=>{\n                    const infoType = item.metadata?.infoType;\n                    return (shouldBoostCompanyValues && infoType === \"company_values\" || shouldBoostInvestors && infoType === \"investors\" || shouldBoostLeadership && infoType === \"leadership\" || shouldBoostPricing && infoType === \"pricing\" || shouldBoostProductFeatures && infoType === \"product_features\" || shouldBoostSalesInfo && infoType === \"sales_info\") && !result.includes(item);\n                });\n            }\n            // If we found a relevant item, add it and remove the lowest scored item\n            if (structuredInfoToInclude) {\n                result.pop(); // Remove the lowest scored item\n                result.push(structuredInfoToInclude);\n                // Re-sort to maintain score order\n                result = result.sort((a, b)=>b.score - a.score);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Clear the vector store\n */ function clearVectorStore() {\n    // Clear in-memory data\n    vectorStore = [];\n    // Delete all batch files\n    try {\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(VECTOR_STORE_DIR)) {\n            const files = fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(VECTOR_STORE_DIR);\n            files.forEach((file)=>{\n                if (file.startsWith(\"batch_\")) {\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(path__WEBPACK_IMPORTED_MODULE_1___default().join(VECTOR_STORE_DIR, file));\n                }\n            });\n        }\n        // Reset batch index\n        activeBatches = [];\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(BATCH_INDEX_FILE, JSON.stringify({\n            activeBatches: [],\n            lastUpdated: Date.now()\n        }, null, 2));\n        console.log(\"Vector store cleared successfully\");\n    } catch (error) {\n        console.error(\"Error clearing vector store:\", error);\n    }\n}\n/**\n * Get the current size of the vector store\n * @returns Number of items in the vector store\n */ function getVectorStoreSize() {\n    return vectorStore.length;\n}\n// Initialize vector store on module load\ntry {\n    loadVectorStore();\n} catch (error) {\n    console.error(\"Failed to initialize vector store:\", error);\n    vectorStore = [];\n    activeBatches = [];\n}\n/**\n * Get all items from the vector store\n * @returns Array of all vector store items\n */ function getAllVectorStoreItems() {\n    return [\n        ...vectorStore\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxDQUFDL0IsR0FBR00sSUFBTUEsRUFBRW9CLEtBQUssR0FBRzFCLEVBQUUwQixLQUFLO1lBQ2xEO1FBQ0Y7SUFDRjtJQUVBLE9BQU9NO0FBQ1Q7QUFFQTs7Q0FFQyxHQUNNLFNBQVNPO0lBQ2QsdUJBQXVCO0lBQ3ZCOUYsY0FBYyxFQUFFO0lBRWhCLHlCQUF5QjtJQUN6QixJQUFJO1FBQ0YsSUFBSVIsb0RBQWEsQ0FBQ0UsbUJBQW1CO1lBQ25DLE1BQU1xRyxRQUFRdkcscURBQWMsQ0FBQ0U7WUFDN0JxRyxNQUFNakQsT0FBTyxDQUFDbUQsQ0FBQUE7Z0JBQ1osSUFBSUEsS0FBS0MsVUFBVSxDQUFDLFdBQVc7b0JBQzdCMUcsb0RBQWEsQ0FBQ0MsZ0RBQVMsQ0FBQ0Msa0JBQWtCdUc7Z0JBQzVDO1lBQ0Y7UUFDRjtRQUVBLG9CQUFvQjtRQUNwQmhHLGdCQUFnQixFQUFFO1FBQ2xCVCx1REFBZ0IsQ0FBQ00sa0JBQWtCVSxLQUFLQyxTQUFTLENBQUM7WUFDaERSLGVBQWUsRUFBRTtZQUNqQlMsYUFBYUMsS0FBS0MsR0FBRztRQUN2QixHQUFHLE1BQU07UUFFVEUsUUFBUUMsR0FBRyxDQUFDO0lBQ2QsRUFBRSxPQUFPUyxPQUFPO1FBQ2RWLFFBQVFVLEtBQUssQ0FBQyxnQ0FBZ0NBO0lBQ2hEO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDTSxTQUFTNEU7SUFDZCxPQUFPcEcsWUFBWXVCLE1BQU07QUFDM0I7QUFFQSx5Q0FBeUM7QUFDekMsSUFBSTtJQUNGVjtBQUNGLEVBQUUsT0FBT1csT0FBTztJQUNkVixRQUFRVSxLQUFLLENBQUMsc0NBQXNDQTtJQUNwRHhCLGNBQWMsRUFBRTtJQUNoQkMsZ0JBQWdCLEVBQUU7QUFDcEI7QUFFQTs7O0NBR0MsR0FDTSxTQUFTb0c7SUFDZCxPQUFPO1dBQUlyRztLQUFZO0FBQ3pCO0FBRXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FsZXMtY2hhdC1vcGVuYWktcmFnLy4vdXRpbHMvdmVjdG9yU3RvcmUudHM/NTU2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFZlY3RvclN0b3JlSXRlbSB7XG4gIGVtYmVkZGluZzogbnVtYmVyW107XG4gIHRleHQ6IHN0cmluZztcbiAgbWV0YWRhdGE/OiB7XG4gICAgc291cmNlPzogc3RyaW5nO1xuICAgIHBhZ2U/OiBudW1iZXI7XG4gICAgYmF0Y2g/OiBzdHJpbmc7XG4gICAgaXNTdHJ1Y3R1cmVkPzogYm9vbGVhbjtcbiAgICBpbmZvVHlwZT86IHN0cmluZztcbiAgICBwcmlvcml0eT86IHN0cmluZztcbiAgfTtcbn1cblxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vLyBDb25zdGFudHMgZm9yIGJhdGNoIHByb2Nlc3NpbmdcbmNvbnN0IFZFQ1RPUl9TVE9SRV9ESVIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2RhdGEnLCAndmVjdG9yX2JhdGNoZXMnKTtcbmNvbnN0IEJBVENIX0lOREVYX0ZJTEUgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2RhdGEnLCAnYmF0Y2hfaW5kZXguanNvbicpO1xuY29uc3QgTUFYX0JBVENIX1NJWkUgPSAxMDAwOyAvLyBNYXhpbXVtIGl0ZW1zIHBlciBiYXRjaCBmaWxlXG5cbi8vIEluLW1lbW9yeSB2ZWN0b3Igc3RvcmUgKG5vdyBsb2FkcyBmcm9tIG11bHRpcGxlIGZpbGVzKVxubGV0IHZlY3RvclN0b3JlOiBWZWN0b3JTdG9yZUl0ZW1bXSA9IFtdO1xubGV0IGFjdGl2ZUJhdGNoZXM6IHN0cmluZ1tdID0gW107XG5cbi8vIEluaXRpYWxpemUgdmVjdG9yIHN0b3JlIGRpcmVjdG9yeVxuZnVuY3Rpb24gaW5pdFZlY3RvclN0b3JlKCkge1xuICAvLyBFbnN1cmUgZGF0YSBkaXJlY3RvcnkgZXhpc3RzXG4gIGNvbnN0IGRhdGFEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2RhdGEnKTtcbiAgaWYgKCFmcy5leGlzdHNTeW5jKGRhdGFEaXIpKSB7XG4gICAgZnMubWtkaXJTeW5jKGRhdGFEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB9XG4gIFxuICAvLyBFbnN1cmUgdmVjdG9yX2JhdGNoZXMgZGlyZWN0b3J5IGV4aXN0c1xuICBpZiAoIWZzLmV4aXN0c1N5bmMoVkVDVE9SX1NUT1JFX0RJUikpIHtcbiAgICBmcy5ta2RpclN5bmMoVkVDVE9SX1NUT1JFX0RJUiwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gIH1cbiAgXG4gIC8vIENyZWF0ZSBiYXRjaCBpbmRleCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gIGlmICghZnMuZXhpc3RzU3luYyhCQVRDSF9JTkRFWF9GSUxFKSkge1xuICAgIGZzLndyaXRlRmlsZVN5bmMoQkFUQ0hfSU5ERVhfRklMRSwgSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgIGFjdGl2ZUJhdGNoZXM6IFtdLFxuICAgICAgbGFzdFVwZGF0ZWQ6IERhdGUubm93KCkgXG4gICAgfSkpO1xuICB9XG59XG5cbi8vIExvYWQgdmVjdG9yIHN0b3JlIGluZGV4IGFuZCBhbGwgYWN0aXZlIGJhdGNoZXNcbmZ1bmN0aW9uIGxvYWRWZWN0b3JTdG9yZSgpIHtcbiAgdHJ5IHtcbiAgICBpbml0VmVjdG9yU3RvcmUoKTtcbiAgICBjb25zb2xlLmxvZygnTG9hZGluZyB2ZWN0b3Igc3RvcmUgYmF0Y2hlcy4uLicpO1xuICAgIFxuICAgIC8vIFJlYWQgdGhlIGJhdGNoIGluZGV4XG4gICAgY29uc3QgaW5kZXhEYXRhID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoQkFUQ0hfSU5ERVhfRklMRSwgJ3V0Zi04JykpO1xuICAgIGFjdGl2ZUJhdGNoZXMgPSBpbmRleERhdGEuYWN0aXZlQmF0Y2hlcyB8fCBbXTtcbiAgICBcbiAgICAvLyBMb2FkIGVhY2ggYWN0aXZlIGJhdGNoXG4gICAgdmVjdG9yU3RvcmUgPSBbXTtcbiAgICBsZXQgdG90YWxMb2FkZWQgPSAwO1xuICAgIFxuICAgIGZvciAoY29uc3QgYmF0Y2hJZCBvZiBhY3RpdmVCYXRjaGVzKSB7XG4gICAgICBjb25zdCBiYXRjaEZpbGUgPSBwYXRoLmpvaW4oVkVDVE9SX1NUT1JFX0RJUiwgYGJhdGNoXyR7YmF0Y2hJZH0uanNvbmApO1xuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoYmF0Y2hGaWxlKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGJhdGNoRGF0YSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGJhdGNoRmlsZSwgJ3V0Zi04JykpO1xuICAgICAgICAgIHZlY3RvclN0b3JlID0gWy4uLnZlY3RvclN0b3JlLCAuLi5iYXRjaERhdGFdO1xuICAgICAgICAgIHRvdGFsTG9hZGVkICs9IGJhdGNoRGF0YS5sZW5ndGg7XG4gICAgICAgICAgY29uc29sZS5sb2coYExvYWRlZCBiYXRjaCAke2JhdGNoSWR9IHdpdGggJHtiYXRjaERhdGEubGVuZ3RofSBpdGVtc2ApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGxvYWRpbmcgYmF0Y2ggJHtiYXRjaElkfTpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gSWYgbm8gYmF0Y2hlcyB3ZXJlIGxvYWRlZCwgdHJ5IGxvYWRpbmcgZnJvbSBzaW5nbGUgdmVjdG9yU3RvcmUuanNvbiBmaWxlIGFzIGZhbGxiYWNrXG4gICAgaWYgKHRvdGFsTG9hZGVkID09PSAwKSB7XG4gICAgICBjb25zdCBzaW5nbGVTdG9yZUZpbGUgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2RhdGEnLCAndmVjdG9yU3RvcmUuanNvbicpO1xuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoc2luZ2xlU3RvcmVGaWxlKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGZpbGVEYXRhID0gZnMucmVhZEZpbGVTeW5jKHNpbmdsZVN0b3JlRmlsZSwgJ3V0ZjgnKTtcbiAgICAgICAgICBjb25zdCBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShmaWxlRGF0YSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gSGFuZGxlIGJvdGggZm9ybWF0czogYXJyYXkgb2YgaXRlbXMgb3Ige2l0ZW1zOiBbLi4uXX0gc3RydWN0dXJlXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkRGF0YSkpIHtcbiAgICAgICAgICAgIHZlY3RvclN0b3JlID0gcGFyc2VkRGF0YTtcbiAgICAgICAgICAgIHRvdGFsTG9hZGVkID0gcGFyc2VkRGF0YS5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJzZWREYXRhLml0ZW1zICYmIEFycmF5LmlzQXJyYXkocGFyc2VkRGF0YS5pdGVtcykpIHtcbiAgICAgICAgICAgIHZlY3RvclN0b3JlID0gcGFyc2VkRGF0YS5pdGVtcztcbiAgICAgICAgICAgIHRvdGFsTG9hZGVkID0gcGFyc2VkRGF0YS5pdGVtcy5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnNvbGUubG9nKGBMb2FkZWQgJHt0b3RhbExvYWRlZH0gaXRlbXMgZnJvbSBzaW5nbGUgdmVjdG9yU3RvcmUuanNvbiBmaWxlYCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBmcm9tIHNpbmdsZSB2ZWN0b3JTdG9yZS5qc29uIGZpbGU6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGBMb2FkZWQgJHt0b3RhbExvYWRlZH0gdG90YWwgaXRlbXMgZnJvbSAke2FjdGl2ZUJhdGNoZXMubGVuZ3RofSBiYXRjaGVzIGFuZCBmYWxsYmFjayBzb3VyY2VzYCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyB2ZWN0b3Igc3RvcmU6JywgZXJyb3IpO1xuICAgIHZlY3RvclN0b3JlID0gW107XG4gICAgYWN0aXZlQmF0Y2hlcyA9IFtdO1xuICB9XG59XG5cbi8vIENyZWF0ZSBhIG5ldyBiYXRjaCBhbmQgYWRkIGl0IHRvIHRoZSBpbmRleFxuZnVuY3Rpb24gY3JlYXRlTmV3QmF0Y2goKTogc3RyaW5nIHtcbiAgY29uc3QgYmF0Y2hJZCA9IERhdGUubm93KCkudG9TdHJpbmcoKTtcbiAgYWN0aXZlQmF0Y2hlcy5wdXNoKGJhdGNoSWQpO1xuICBcbiAgLy8gVXBkYXRlIHRoZSBiYXRjaCBpbmRleFxuICBmcy53cml0ZUZpbGVTeW5jKEJBVENIX0lOREVYX0ZJTEUsIEpTT04uc3RyaW5naWZ5KHtcbiAgICBhY3RpdmVCYXRjaGVzLFxuICAgIGxhc3RVcGRhdGVkOiBEYXRlLm5vdygpXG4gIH0sIG51bGwsIDIpKTtcbiAgXG4gIGNvbnNvbGUubG9nKGBDcmVhdGVkIG5ldyBiYXRjaDogJHtiYXRjaElkfWApO1xuICByZXR1cm4gYmF0Y2hJZDtcbn1cblxuLy8gU2F2ZSBhIHNwZWNpZmljIGJhdGNoIHRvIGRpc2tcbmZ1bmN0aW9uIHNhdmVCYXRjaChiYXRjaElkOiBzdHJpbmcsIGl0ZW1zOiBWZWN0b3JTdG9yZUl0ZW1bXSkge1xuICBjb25zdCBiYXRjaEZpbGUgPSBwYXRoLmpvaW4oVkVDVE9SX1NUT1JFX0RJUiwgYGJhdGNoXyR7YmF0Y2hJZH0uanNvbmApO1xuICBmcy53cml0ZUZpbGVTeW5jKGJhdGNoRmlsZSwgSlNPTi5zdHJpbmdpZnkoaXRlbXMsIG51bGwsIDIpKTtcbiAgY29uc29sZS5sb2coYFNhdmVkIGJhdGNoICR7YmF0Y2hJZH0gd2l0aCAke2l0ZW1zLmxlbmd0aH0gaXRlbXNgKTtcbn1cblxuLy8gU2F2ZSB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbGwgYmF0Y2hlc1xuZnVuY3Rpb24gc2F2ZVZlY3RvclN0b3JlKCkge1xuICB0cnkge1xuICAgIGlmIChhY3RpdmVCYXRjaGVzLmxlbmd0aCA9PT0gMCAmJiB2ZWN0b3JTdG9yZS5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBGaXJzdC10aW1lIHNhdmUgLSBjcmVhdGUgaW5pdGlhbCBiYXRjaFxuICAgICAgY29uc3QgaW5pdGlhbEJhdGNoSWQgPSBjcmVhdGVOZXdCYXRjaCgpO1xuICAgICAgXG4gICAgICAvLyBBZGQgYmF0Y2ggbWV0YWRhdGEgdG8gYWxsIGl0ZW1zXG4gICAgICB2ZWN0b3JTdG9yZSA9IHZlY3RvclN0b3JlLm1hcChpdGVtID0+ICh7XG4gICAgICAgIC4uLml0ZW0sXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgLi4uaXRlbS5tZXRhZGF0YSxcbiAgICAgICAgICBiYXRjaDogaW5pdGlhbEJhdGNoSWRcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgXG4gICAgICAvLyBTYXZlIGFzIGZpcnN0IGJhdGNoXG4gICAgICBzYXZlQmF0Y2goaW5pdGlhbEJhdGNoSWQsIHZlY3RvclN0b3JlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gR3JvdXAgaXRlbXMgYnkgYmF0Y2hcbiAgICAgIGNvbnN0IGJhdGNoTWFwOiBSZWNvcmQ8c3RyaW5nLCBWZWN0b3JTdG9yZUl0ZW1bXT4gPSB7fTtcbiAgICAgIFxuICAgICAgLy8gRmluZCBpdGVtcyB3aXRob3V0IGJhdGNoIElEIChuZXdseSBhZGRlZClcbiAgICAgIGNvbnN0IHVuYmF0Y2hlZEl0ZW1zID0gdmVjdG9yU3RvcmUuZmlsdGVyKGl0ZW0gPT4gIWl0ZW0ubWV0YWRhdGE/LmJhdGNoKTtcbiAgICAgIFxuICAgICAgaWYgKHVuYmF0Y2hlZEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gR2V0IGN1cnJlbnQgYmF0Y2ggb3IgY3JlYXRlIG5ldyBvbmVcbiAgICAgICAgbGV0IGN1cnJlbnRCYXRjaElkID0gYWN0aXZlQmF0Y2hlc1thY3RpdmVCYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICBcbiAgICAgICAgaWYgKGN1cnJlbnRCYXRjaElkKSB7XG4gICAgICAgICAgLy8gQ291bnQgaXRlbXMgaW4gdGhlIGN1cnJlbnQgYmF0Y2hcbiAgICAgICAgICBjb25zdCBjdXJyZW50QmF0Y2hDb3VudCA9IHZlY3RvclN0b3JlLmZpbHRlcihcbiAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS5tZXRhZGF0YT8uYmF0Y2ggPT09IGN1cnJlbnRCYXRjaElkXG4gICAgICAgICAgKS5sZW5ndGg7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoIGlmIGN1cnJlbnQgb25lIGlzIHRvbyBmdWxsXG4gICAgICAgICAgaWYgKGN1cnJlbnRCYXRjaENvdW50ICsgdW5iYXRjaGVkSXRlbXMubGVuZ3RoID4gTUFYX0JBVENIX1NJWkUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRCYXRjaElkID0gY3JlYXRlTmV3QmF0Y2goKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTm8gYmF0Y2hlcyBleGlzdCB5ZXQsIGNyZWF0ZSB0aGUgZmlyc3Qgb25lXG4gICAgICAgICAgY3VycmVudEJhdGNoSWQgPSBjcmVhdGVOZXdCYXRjaCgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBBc3NpZ24gYmF0Y2ggSUQgdG8gdW5iYXRjaGVkIGl0ZW1zXG4gICAgICAgIHVuYmF0Y2hlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgaWYgKCFpdGVtLm1ldGFkYXRhKSBpdGVtLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgaXRlbS5tZXRhZGF0YS5iYXRjaCA9IGN1cnJlbnRCYXRjaElkO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gR3JvdXAgYWxsIGl0ZW1zIGJ5IGJhdGNoXG4gICAgICB2ZWN0b3JTdG9yZS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBjb25zdCBiYXRjaElkID0gaXRlbS5tZXRhZGF0YT8uYmF0Y2g7XG4gICAgICAgIGlmIChiYXRjaElkKSB7XG4gICAgICAgICAgaWYgKCFiYXRjaE1hcFtiYXRjaElkXSkgYmF0Y2hNYXBbYmF0Y2hJZF0gPSBbXTtcbiAgICAgICAgICBiYXRjaE1hcFtiYXRjaElkXS5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSBlYWNoIGJhdGNoXG4gICAgICBPYmplY3QuZW50cmllcyhiYXRjaE1hcCkuZm9yRWFjaCgoW2JhdGNoSWQsIGl0ZW1zXSkgPT4ge1xuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNhdmVCYXRjaChiYXRjaElkLCBpdGVtcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBVcGRhdGUgaW5kZXggZmlsZVxuICAgIGZzLndyaXRlRmlsZVN5bmMoQkFUQ0hfSU5ERVhfRklMRSwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgYWN0aXZlQmF0Y2hlcyxcbiAgICAgIGxhc3RVcGRhdGVkOiBEYXRlLm5vdygpXG4gICAgfSwgbnVsbCwgMikpO1xuICAgIFxuICAgIC8vIEFsc28gc2F2ZSB0byB0aGUgc2luZ2xlIHZlY3RvclN0b3JlLmpzb24gZmlsZSBhcyBhIGJhY2t1cFxuICAgIGNvbnN0IHNpbmdsZVN0b3JlRmlsZSA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnZGF0YScsICd2ZWN0b3JTdG9yZS5qc29uJyk7XG4gICAgZnMud3JpdGVGaWxlU3luYyhzaW5nbGVTdG9yZUZpbGUsIEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICBpdGVtczogdmVjdG9yU3RvcmUsXG4gICAgICBsYXN0VXBkYXRlZDogRGF0ZS5ub3coKVxuICAgIH0sIG51bGwsIDIpKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgU2F2ZWQgdmVjdG9yIHN0b3JlIHdpdGggJHthY3RpdmVCYXRjaGVzLmxlbmd0aH0gYmF0Y2hlcyBhbmQgJHt2ZWN0b3JTdG9yZS5sZW5ndGh9IHRvdGFsIGl0ZW1zYCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIHZlY3RvciBzdG9yZTonLCBlcnJvcik7XG4gIH1cbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgY29zaW5lIHNpbWlsYXJpdHkgYmV0d2VlbiB0d28gdmVjdG9yc1xuICogQHBhcmFtIHZlY0EgRmlyc3QgdmVjdG9yXG4gKiBAcGFyYW0gdmVjQiBTZWNvbmQgdmVjdG9yXG4gKiBAcmV0dXJucyBDb3NpbmUgc2ltaWxhcml0eSBzY29yZSAoMC0xKVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29zaW5lU2ltaWxhcml0eSh2ZWNBOiBudW1iZXJbXSwgdmVjQjogbnVtYmVyW10pOiBudW1iZXIge1xuICBjb25zdCBkb3QgPSB2ZWNBLnJlZHVjZSgoc3VtLCBhLCBpKSA9PiBzdW0gKyBhICogdmVjQltpXSwgMCk7XG4gIGNvbnN0IG1hZ0EgPSBNYXRoLnNxcnQodmVjQS5yZWR1Y2UoKHN1bSwgYSkgPT4gc3VtICsgYSAqIGEsIDApKTtcbiAgY29uc3QgbWFnQiA9IE1hdGguc3FydCh2ZWNCLnJlZHVjZSgoc3VtLCBiKSA9PiBzdW0gKyBiICogYiwgMCkpO1xuICByZXR1cm4gZG90IC8gKG1hZ0EgKiBtYWdCKTtcbn1cblxuLyoqXG4gKiBBZGQgYW4gaXRlbSBvciBtdWx0aXBsZSBpdGVtcyB0byB0aGUgdmVjdG9yIHN0b3JlXG4gKiBAcGFyYW0gaXRlbXMgU2luZ2xlIGl0ZW0gb3IgYXJyYXkgb2YgaXRlbXMgdG8gYWRkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRUb1ZlY3RvclN0b3JlKGl0ZW1zOiBWZWN0b3JTdG9yZUl0ZW0gfCBWZWN0b3JTdG9yZUl0ZW1bXSk6IHZvaWQge1xuICAvLyBDb252ZXJ0IHNpbmdsZSBpdGVtIHRvIGFycmF5XG4gIGNvbnN0IGl0ZW1zQXJyYXkgPSBBcnJheS5pc0FycmF5KGl0ZW1zKSA/IGl0ZW1zIDogW2l0ZW1zXTtcbiAgaWYgKGl0ZW1zQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIFxuICAvLyBBZGQgdG8gaW4tbWVtb3J5IHN0b3JlXG4gIHZlY3RvclN0b3JlID0gWy4uLnZlY3RvclN0b3JlLCAuLi5pdGVtc0FycmF5XTtcbiAgXG4gIC8vIFNhdmUgY2hhbmdlcyB0byBkaXNrXG4gIHNhdmVWZWN0b3JTdG9yZSgpO1xufVxuXG4vLyBFbmhhbmNlZCB2ZXJzaW9uIG9mIGdldFNpbWlsYXJJdGVtcyB3aXRoIHN0cm9uZ2VyIGVtcGhhc2lzIG9uIHN0cnVjdHVyZWQgZGF0YVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNpbWlsYXJJdGVtcyhcbiAgcXVlcnlFbWJlZGRpbmc6IG51bWJlcltdLFxuICBsaW1pdDogbnVtYmVyID0gNSxcbiAgcXVlcnlUZXh0Pzogc3RyaW5nLFxuICBwcmlvcml0eUluZm9UeXBlPzogc3RyaW5nXG4pOiAoVmVjdG9yU3RvcmVJdGVtICYgeyBzY29yZTogbnVtYmVyIH0pW10ge1xuICAvLyBDaGVjayBpZiB0aGUgdmVjdG9yIHN0b3JlIGlzIGluaXRpYWxpemVkXG4gIGlmICghdmVjdG9yU3RvcmUgfHwgdmVjdG9yU3RvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgbG9hZFZlY3RvclN0b3JlKCk7XG4gIH1cbiAgXG4gIGlmICghdmVjdG9yU3RvcmUgfHwgdmVjdG9yU3RvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc29sZS53YXJuKCdWZWN0b3Igc3RvcmUgaXMgZW1wdHkuIE5vIHJlc3VsdHMgdG8gcmV0dXJuLicpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBcbiAgY29uc29sZS5sb2coJ1NlYXJjaGluZyBmb3Igc2ltaWxhciBpdGVtcy4uLicpO1xuICBcbiAgLy8gTG9vayBmb3IgY2VydGFpbiB0eXBlcyBvZiBpbnF1aXJpZXMgdG8gYm9vc3Qgc3BlY2lmaWMgY29udGVudFxuICBsZXQgc2hvdWxkQm9vc3RTdHJ1Y3R1cmVkSW5mbyA9IGZhbHNlO1xuICBsZXQgc2hvdWxkQm9vc3RDb21wYW55VmFsdWVzID0gZmFsc2U7XG4gIGxldCBzaG91bGRCb29zdEludmVzdG9ycyA9IGZhbHNlO1xuICBsZXQgc2hvdWxkQm9vc3RMZWFkZXJzaGlwID0gZmFsc2U7XG4gIGxldCBzaG91bGRCb29zdFByaWNpbmcgPSBmYWxzZTtcbiAgbGV0IHNob3VsZEJvb3N0UHJvZHVjdEZlYXR1cmVzID0gZmFsc2U7XG4gIGxldCBzaG91bGRCb29zdFNhbGVzSW5mbyA9IGZhbHNlO1xuICBcbiAgaWYgKHF1ZXJ5VGV4dCkge1xuICAgIGNvbnN0IHF1ZXJ5TG93ZXIgPSBxdWVyeVRleHQudG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICAvLyBDaGVjayBmb3IgY29tcGFueSB2YWx1ZXMgaW5xdWlyaWVzXG4gICAgc2hvdWxkQm9vc3RDb21wYW55VmFsdWVzID0gcXVlcnlMb3dlci5pbmNsdWRlcygndmFsdWUnKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUxvd2VyLmluY2x1ZGVzKCdjdWx0dXJlJykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlMb3dlci5pbmNsdWRlcygncHJpbmNpcGxlJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUxvd2VyLmluY2x1ZGVzKCdtaXNzaW9uJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUxvd2VyLmluY2x1ZGVzKCd2aXNpb24nKTtcbiAgICBcbiAgICAvLyBDaGVjayBmb3IgaW52ZXN0b3IgaW5xdWlyaWVzXG4gICAgc2hvdWxkQm9vc3RJbnZlc3RvcnMgPSBxdWVyeUxvd2VyLmluY2x1ZGVzKCdpbnZlc3RvcicpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlMb3dlci5pbmNsdWRlcygnZnVuZGluZycpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlMb3dlci5pbmNsdWRlcygnYmFja2VkIGJ5JykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ2ludmVzdGVkJyk7XG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIGxlYWRlcnNoaXAgaW5xdWlyaWVzXG4gICAgc2hvdWxkQm9vc3RMZWFkZXJzaGlwID0gcXVlcnlMb3dlci5pbmNsdWRlcygnZm91bmRlcicpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ2NlbycpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ2xlYWRlcicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlMb3dlci5pbmNsdWRlcygnZXhlY3V0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgLy8gQ2hlY2sgZm9yIHByaWNpbmcgaW5xdWlyaWVzXG4gICAgc2hvdWxkQm9vc3RQcmljaW5nID0gcXVlcnlMb3dlci5pbmNsdWRlcygncHJpY2luZycpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlMb3dlci5pbmNsdWRlcygncHJpY2UnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ2Nvc3QnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ3N1YnNjcmlwdGlvbicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlMb3dlci5pbmNsdWRlcygncGxhbicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlMb3dlci5pbmNsdWRlcygndGllcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIC8vIENoZWNrIGZvciBwcm9kdWN0IGZlYXR1cmUgaW5xdWlyaWVzICBcbiAgICBzaG91bGRCb29zdFByb2R1Y3RGZWF0dXJlcyA9IHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ2ZlYXR1cmUnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUxvd2VyLmluY2x1ZGVzKCdmdW5jdGlvbicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ2NhcGFiaWxpdHknKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUxvd2VyLmluY2x1ZGVzKCdob3cgZG9lcyBpdCB3b3JrJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlMb3dlci5pbmNsdWRlcygnd2hhdCBkb2VzIGl0IGRvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIC8vIENoZWNrIGZvciBzYWxlcyBpbmZvcm1hdGlvbiBpbnF1aXJpZXNcbiAgICBzaG91bGRCb29zdFNhbGVzSW5mbyA9IHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ3NlbGwnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUxvd2VyLmluY2x1ZGVzKCdwaXRjaCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5TG93ZXIuaW5jbHVkZXMoJ2NvbXBldGl0b3InKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUxvd2VyLmluY2x1ZGVzKCdjb21wYXJpc29uJyk7XG4gICAgXG4gICAgLy8gU2V0IHRoZSBvdmVyYWxsIHN0cnVjdHVyZWQgaW5mbyBmbGFnIGlmIGFueSBzcGVjaWZpYyB0eXBlIHNob3VsZCBiZSBib29zdGVkXG4gICAgc2hvdWxkQm9vc3RTdHJ1Y3R1cmVkSW5mbyA9IHNob3VsZEJvb3N0Q29tcGFueVZhbHVlcyB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkQm9vc3RJbnZlc3RvcnMgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZEJvb3N0TGVhZGVyc2hpcCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRCb29zdFByaWNpbmcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkQm9vc3RQcm9kdWN0RmVhdHVyZXMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkQm9vc3RTYWxlc0luZm87XG4gIH1cbiAgXG4gIC8vIENhbGN1bGF0ZSBzaW1pbGFyaXR5IHNjb3Jlc1xuICBjb25zdCBpdGVtc1dpdGhTY29yZXMgPSB2ZWN0b3JTdG9yZS5tYXAoaXRlbSA9PiB7XG4gICAgLy8gQ29tcHV0ZSBiYXNlIHNjb3JlIHVzaW5nIGNvc2luZSBzaW1pbGFyaXR5XG4gICAgbGV0IHNjb3JlID0gY29zaW5lU2ltaWxhcml0eShxdWVyeUVtYmVkZGluZywgaXRlbS5lbWJlZGRpbmcpO1xuICAgIFxuICAgIC8vIEFwcGx5IGJvb3N0aW5nIGZvciBzdHJ1Y3R1cmVkIGluZm9ybWF0aW9uIHdoZW4gcmVsZXZhbnRcbiAgICBpZiAoc2hvdWxkQm9vc3RTdHJ1Y3R1cmVkSW5mbyAmJiBpdGVtLm1ldGFkYXRhPy5pc1N0cnVjdHVyZWQpIHtcbiAgICAgIC8vIFNwZWNpZmljIGJvb3N0cyBmb3IgZGlmZmVyZW50IHR5cGVzIG9mIHN0cnVjdHVyZWQgaW5mb3JtYXRpb25cbiAgICAgIGNvbnN0IGluZm9UeXBlID0gaXRlbS5tZXRhZGF0YT8uaW5mb1R5cGU7XG4gICAgICBcbiAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVuIGEgc3BlY2lmaWMgaW5mbyB0eXBlIGlzIHByaW9yaXRpemVkXG4gICAgICBpZiAocHJpb3JpdHlJbmZvVHlwZSAmJiBpbmZvVHlwZSA9PT0gcHJpb3JpdHlJbmZvVHlwZSkge1xuICAgICAgICBzY29yZSAqPSAxLjU7IC8vIFN0cm9uZyBib29zdCBmb3IgZXhhY3QgaW5mbyB0eXBlIG1hdGNoXG4gICAgICB9XG4gICAgICAvLyBPdGhlcndpc2UsIGFwcGx5IHN0YW5kYXJkIGJvb3N0c1xuICAgICAgZWxzZSBpZiAoc2hvdWxkQm9vc3RDb21wYW55VmFsdWVzICYmIGluZm9UeXBlID09PSAnY29tcGFueV92YWx1ZXMnKSB7XG4gICAgICAgIHNjb3JlICo9IDEuMztcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkQm9vc3RJbnZlc3RvcnMgJiYgaW5mb1R5cGUgPT09ICdpbnZlc3RvcnMnKSB7XG4gICAgICAgIHNjb3JlICo9IDEuMztcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkQm9vc3RMZWFkZXJzaGlwICYmIGluZm9UeXBlID09PSAnbGVhZGVyc2hpcCcpIHtcbiAgICAgICAgc2NvcmUgKj0gMS4zO1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRCb29zdFByaWNpbmcgJiYgaW5mb1R5cGUgPT09ICdwcmljaW5nJykge1xuICAgICAgICBzY29yZSAqPSAxLjM7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZEJvb3N0UHJvZHVjdEZlYXR1cmVzICYmIGluZm9UeXBlID09PSAncHJvZHVjdF9mZWF0dXJlcycpIHtcbiAgICAgICAgc2NvcmUgKj0gMS4zO1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRCb29zdFNhbGVzSW5mbyAmJiBpbmZvVHlwZSA9PT0gJ3NhbGVzX2luZm8nKSB7XG4gICAgICAgIHNjb3JlICo9IDEuMztcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS5tZXRhZGF0YT8uaXNTdHJ1Y3R1cmVkKSB7XG4gICAgICAgIC8vIEdlbmVyYWwgYm9vc3QgZm9yIGFueSBzdHJ1Y3R1cmVkIGluZm9cbiAgICAgICAgc2NvcmUgKj0gMS4xO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4geyAuLi5pdGVtLCBzY29yZSB9O1xuICB9KTtcbiAgXG4gIC8vIFNvcnQgYnkgc2ltaWxhcml0eSBzY29yZVxuICBjb25zdCBzb3J0ZWRSZXN1bHRzID0gaXRlbXNXaXRoU2NvcmVzLnNvcnQoKGEsIGIpID0+IGIuc2NvcmUgLSBhLnNjb3JlKTtcbiAgXG4gIC8vIEdldCB0aGUgdG9wIHJlc3VsdHMsIGJ1dCBlbnN1cmUgcHJpb3JpdHkgc3RydWN0dXJlZCBpbmZvIGlzIGluY2x1ZGVkIGlmIHJlbGV2YW50XG4gIGxldCByZXN1bHQgPSBzb3J0ZWRSZXN1bHRzLnNsaWNlKDAsIGxpbWl0KTtcbiAgXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gZ3VhcmFudGVlIGluY2x1c2lvbiBvZiBzcGVjaWZpYyBzdHJ1Y3R1cmVkIGluZm9cbiAgaWYgKHNob3VsZEJvb3N0U3RydWN0dXJlZEluZm8pIHtcbiAgICAvLyBDaGVjayBpZiB3ZSBhbHJlYWR5IGhhdmUgYSByZWxldmFudCBwaWVjZSBvZiBzdHJ1Y3R1cmVkIGluZm9ybWF0aW9uXG4gICAgbGV0IGhhc1JlbGV2YW50U3RydWN0dXJlZEluZm8gPSBmYWxzZTtcbiAgICBcbiAgICAvLyBVc2UgdGhlIHByaW9yaXR5SW5mb1R5cGUgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgY2hlY2sgYWxsIHJlbGV2YW50IHR5cGVzXG4gICAgaWYgKHByaW9yaXR5SW5mb1R5cGUpIHtcbiAgICAgIGhhc1JlbGV2YW50U3RydWN0dXJlZEluZm8gPSByZXN1bHQuc29tZShcbiAgICAgICAgaXRlbSA9PiBpdGVtLm1ldGFkYXRhPy5pbmZvVHlwZSA9PT0gcHJpb3JpdHlJbmZvVHlwZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzUmVsZXZhbnRTdHJ1Y3R1cmVkSW5mbyA9IHJlc3VsdC5zb21lKGl0ZW0gPT4ge1xuICAgICAgICBjb25zdCBpbmZvVHlwZSA9IGl0ZW0ubWV0YWRhdGE/LmluZm9UeXBlO1xuICAgICAgICByZXR1cm4gKHNob3VsZEJvb3N0Q29tcGFueVZhbHVlcyAmJiBpbmZvVHlwZSA9PT0gJ2NvbXBhbnlfdmFsdWVzJykgfHxcbiAgICAgICAgICAgICAgIChzaG91bGRCb29zdEludmVzdG9ycyAmJiBpbmZvVHlwZSA9PT0gJ2ludmVzdG9ycycpIHx8XG4gICAgICAgICAgICAgICAoc2hvdWxkQm9vc3RMZWFkZXJzaGlwICYmIGluZm9UeXBlID09PSAnbGVhZGVyc2hpcCcpIHx8XG4gICAgICAgICAgICAgICAoc2hvdWxkQm9vc3RQcmljaW5nICYmIGluZm9UeXBlID09PSAncHJpY2luZycpIHx8XG4gICAgICAgICAgICAgICAoc2hvdWxkQm9vc3RQcm9kdWN0RmVhdHVyZXMgJiYgaW5mb1R5cGUgPT09ICdwcm9kdWN0X2ZlYXR1cmVzJykgfHxcbiAgICAgICAgICAgICAgIChzaG91bGRCb29zdFNhbGVzSW5mbyAmJiBpbmZvVHlwZSA9PT0gJ3NhbGVzX2luZm8nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIHRoZSByZWxldmFudCBpbmZvIGluIG91ciB0b3AgcmVzdWx0cywgZmluZCBhbmQgaW5jbHVkZSBpdFxuICAgIGlmICghaGFzUmVsZXZhbnRTdHJ1Y3R1cmVkSW5mbykge1xuICAgICAgbGV0IHN0cnVjdHVyZWRJbmZvVG9JbmNsdWRlO1xuICAgICAgXG4gICAgICBpZiAocHJpb3JpdHlJbmZvVHlwZSkge1xuICAgICAgICAvLyBMb29rIGZvciB0aGUgc3BlY2lmaWMgcHJpb3JpdHkgaW5mbyB0eXBlXG4gICAgICAgIHN0cnVjdHVyZWRJbmZvVG9JbmNsdWRlID0gc29ydGVkUmVzdWx0cy5maW5kKFxuICAgICAgICAgIGl0ZW0gPT4gaXRlbS5tZXRhZGF0YT8uaW5mb1R5cGUgPT09IHByaW9yaXR5SW5mb1R5cGUgJiYgIXJlc3VsdC5pbmNsdWRlcyhpdGVtKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTG9vayBmb3IgYW55IHJlbGV2YW50IHN0cnVjdHVyZWQgaW5mbyB0eXBlXG4gICAgICAgIHN0cnVjdHVyZWRJbmZvVG9JbmNsdWRlID0gc29ydGVkUmVzdWx0cy5maW5kKGl0ZW0gPT4ge1xuICAgICAgICAgIGNvbnN0IGluZm9UeXBlID0gaXRlbS5tZXRhZGF0YT8uaW5mb1R5cGU7XG4gICAgICAgICAgcmV0dXJuICgoc2hvdWxkQm9vc3RDb21wYW55VmFsdWVzICYmIGluZm9UeXBlID09PSAnY29tcGFueV92YWx1ZXMnKSB8fFxuICAgICAgICAgICAgICAgICAoc2hvdWxkQm9vc3RJbnZlc3RvcnMgJiYgaW5mb1R5cGUgPT09ICdpbnZlc3RvcnMnKSB8fFxuICAgICAgICAgICAgICAgICAoc2hvdWxkQm9vc3RMZWFkZXJzaGlwICYmIGluZm9UeXBlID09PSAnbGVhZGVyc2hpcCcpIHx8XG4gICAgICAgICAgICAgICAgIChzaG91bGRCb29zdFByaWNpbmcgJiYgaW5mb1R5cGUgPT09ICdwcmljaW5nJykgfHxcbiAgICAgICAgICAgICAgICAgKHNob3VsZEJvb3N0UHJvZHVjdEZlYXR1cmVzICYmIGluZm9UeXBlID09PSAncHJvZHVjdF9mZWF0dXJlcycpIHx8XG4gICAgICAgICAgICAgICAgIChzaG91bGRCb29zdFNhbGVzSW5mbyAmJiBpbmZvVHlwZSA9PT0gJ3NhbGVzX2luZm8nKSkgJiZcbiAgICAgICAgICAgICAgICAgIXJlc3VsdC5pbmNsdWRlcyhpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIElmIHdlIGZvdW5kIGEgcmVsZXZhbnQgaXRlbSwgYWRkIGl0IGFuZCByZW1vdmUgdGhlIGxvd2VzdCBzY29yZWQgaXRlbVxuICAgICAgaWYgKHN0cnVjdHVyZWRJbmZvVG9JbmNsdWRlKSB7XG4gICAgICAgIHJlc3VsdC5wb3AoKTsgLy8gUmVtb3ZlIHRoZSBsb3dlc3Qgc2NvcmVkIGl0ZW1cbiAgICAgICAgcmVzdWx0LnB1c2goc3RydWN0dXJlZEluZm9Ub0luY2x1ZGUpO1xuICAgICAgICAvLyBSZS1zb3J0IHRvIG1haW50YWluIHNjb3JlIG9yZGVyXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zb3J0KChhLCBiKSA9PiBiLnNjb3JlIC0gYS5zY29yZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENsZWFyIHRoZSB2ZWN0b3Igc3RvcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVmVjdG9yU3RvcmUoKTogdm9pZCB7XG4gIC8vIENsZWFyIGluLW1lbW9yeSBkYXRhXG4gIHZlY3RvclN0b3JlID0gW107XG4gIFxuICAvLyBEZWxldGUgYWxsIGJhdGNoIGZpbGVzXG4gIHRyeSB7XG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoVkVDVE9SX1NUT1JFX0RJUikpIHtcbiAgICAgIGNvbnN0IGZpbGVzID0gZnMucmVhZGRpclN5bmMoVkVDVE9SX1NUT1JFX0RJUik7XG4gICAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICBpZiAoZmlsZS5zdGFydHNXaXRoKCdiYXRjaF8nKSkge1xuICAgICAgICAgIGZzLnVubGlua1N5bmMocGF0aC5qb2luKFZFQ1RPUl9TVE9SRV9ESVIsIGZpbGUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJlc2V0IGJhdGNoIGluZGV4XG4gICAgYWN0aXZlQmF0Y2hlcyA9IFtdO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoQkFUQ0hfSU5ERVhfRklMRSwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgYWN0aXZlQmF0Y2hlczogW10sXG4gICAgICBsYXN0VXBkYXRlZDogRGF0ZS5ub3coKVxuICAgIH0sIG51bGwsIDIpKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygnVmVjdG9yIHN0b3JlIGNsZWFyZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2xlYXJpbmcgdmVjdG9yIHN0b3JlOicsIGVycm9yKTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBzaXplIG9mIHRoZSB2ZWN0b3Igc3RvcmVcbiAqIEByZXR1cm5zIE51bWJlciBvZiBpdGVtcyBpbiB0aGUgdmVjdG9yIHN0b3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRWZWN0b3JTdG9yZVNpemUoKTogbnVtYmVyIHtcbiAgcmV0dXJuIHZlY3RvclN0b3JlLmxlbmd0aDtcbn1cblxuLy8gSW5pdGlhbGl6ZSB2ZWN0b3Igc3RvcmUgb24gbW9kdWxlIGxvYWRcbnRyeSB7XG4gIGxvYWRWZWN0b3JTdG9yZSgpO1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgdmVjdG9yIHN0b3JlOicsIGVycm9yKTtcbiAgdmVjdG9yU3RvcmUgPSBbXTtcbiAgYWN0aXZlQmF0Y2hlcyA9IFtdO1xufVxuXG4vKipcbiAqIEdldCBhbGwgaXRlbXMgZnJvbSB0aGUgdmVjdG9yIHN0b3JlXG4gKiBAcmV0dXJucyBBcnJheSBvZiBhbGwgdmVjdG9yIHN0b3JlIGl0ZW1zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxWZWN0b3JTdG9yZUl0ZW1zKCk6IFZlY3RvclN0b3JlSXRlbVtdIHtcbiAgcmV0dXJuIFsuLi52ZWN0b3JTdG9yZV07XG59XG5cbmV4cG9ydCB7IHZlY3RvclN0b3JlIH07ICJdLCJuYW1lcyI6WyJmcyIsInBhdGgiLCJWRUNUT1JfU1RPUkVfRElSIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJCQVRDSF9JTkRFWF9GSUxFIiwiTUFYX0JBVENIX1NJWkUiLCJ2ZWN0b3JTdG9yZSIsImFjdGl2ZUJhdGNoZXMiLCJpbml0VmVjdG9yU3RvcmUiLCJkYXRhRGlyIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsInJlY3Vyc2l2ZSIsIndyaXRlRmlsZVN5bmMiLCJKU09OIiwic3RyaW5naWZ5IiwibGFzdFVwZGF0ZWQiLCJEYXRlIiwibm93IiwibG9hZFZlY3RvclN0b3JlIiwiY29uc29sZSIsImxvZyIsImluZGV4RGF0YSIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwidG90YWxMb2FkZWQiLCJiYXRjaElkIiwiYmF0Y2hGaWxlIiwiYmF0Y2hEYXRhIiwibGVuZ3RoIiwiZXJyb3IiLCJzaW5nbGVTdG9yZUZpbGUiLCJmaWxlRGF0YSIsInBhcnNlZERhdGEiLCJBcnJheSIsImlzQXJyYXkiLCJpdGVtcyIsImNyZWF0ZU5ld0JhdGNoIiwidG9TdHJpbmciLCJwdXNoIiwic2F2ZUJhdGNoIiwic2F2ZVZlY3RvclN0b3JlIiwiaW5pdGlhbEJhdGNoSWQiLCJtYXAiLCJpdGVtIiwibWV0YWRhdGEiLCJiYXRjaCIsImJhdGNoTWFwIiwidW5iYXRjaGVkSXRlbXMiLCJmaWx0ZXIiLCJjdXJyZW50QmF0Y2hJZCIsImN1cnJlbnRCYXRjaENvdW50IiwiZm9yRWFjaCIsIk9iamVjdCIsImVudHJpZXMiLCJjb3NpbmVTaW1pbGFyaXR5IiwidmVjQSIsInZlY0IiLCJkb3QiLCJyZWR1Y2UiLCJzdW0iLCJhIiwiaSIsIm1hZ0EiLCJNYXRoIiwic3FydCIsIm1hZ0IiLCJiIiwiYWRkVG9WZWN0b3JTdG9yZSIsIml0ZW1zQXJyYXkiLCJnZXRTaW1pbGFySXRlbXMiLCJxdWVyeUVtYmVkZGluZyIsImxpbWl0IiwicXVlcnlUZXh0IiwicHJpb3JpdHlJbmZvVHlwZSIsIndhcm4iLCJzaG91bGRCb29zdFN0cnVjdHVyZWRJbmZvIiwic2hvdWxkQm9vc3RDb21wYW55VmFsdWVzIiwic2hvdWxkQm9vc3RJbnZlc3RvcnMiLCJzaG91bGRCb29zdExlYWRlcnNoaXAiLCJzaG91bGRCb29zdFByaWNpbmciLCJzaG91bGRCb29zdFByb2R1Y3RGZWF0dXJlcyIsInNob3VsZEJvb3N0U2FsZXNJbmZvIiwicXVlcnlMb3dlciIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJpdGVtc1dpdGhTY29yZXMiLCJzY29yZSIsImVtYmVkZGluZyIsImlzU3RydWN0dXJlZCIsImluZm9UeXBlIiwic29ydGVkUmVzdWx0cyIsInNvcnQiLCJyZXN1bHQiLCJzbGljZSIsImhhc1JlbGV2YW50U3RydWN0dXJlZEluZm8iLCJzb21lIiwic3RydWN0dXJlZEluZm9Ub0luY2x1ZGUiLCJmaW5kIiwicG9wIiwiY2xlYXJWZWN0b3JTdG9yZSIsImZpbGVzIiwicmVhZGRpclN5bmMiLCJmaWxlIiwic3RhcnRzV2l0aCIsInVubGlua1N5bmMiLCJnZXRWZWN0b3JTdG9yZVNpemUiLCJnZXRBbGxWZWN0b3JTdG9yZUl0ZW1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./utils/vectorStore.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fquery.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();